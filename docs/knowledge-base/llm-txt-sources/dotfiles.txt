# dotfiles

## Summary
Repository: coderabbitai/dotfiles
Commit: e568588259710cac3341828c091115433211327a
Files analyzed: 44

Estimated tokens: 102.9k

## File Tree
Directory structure:
└── coderabbitai-dotfiles/
    ├── README.md
    ├── dot_aliases
    ├── dot_gitconfig
    ├── dot_gitconfig_themes
    ├── dot_golangci.yml
    ├── dot_prettierrc
    ├── dot_tmux.conf
    ├── dot_tmux.conf.settings
    ├── dot_urlview
    ├── dot_vimrc
    ├── dot_zprofile
    ├── dot_zshrc
    ├── dot_completions/
    │   ├── _circleci
    │   ├── _gt
    │   └── _parallel
    ├── dot_config/
    │   ├── broot/
    │   │   └── conf.hjson
    │   ├── fsh/
    │   │   ├── current_theme.zsh
    │   │   └── secondary_theme.zsh
    │   ├── ghostty/
    │   │   └── config
    │   ├── nvim/
    │   │   ├── coc-settings.json
    │   │   ├── ginit.vim
    │   │   └── init.vim
    │   ├── pip/
    │   │   └── pip.conf
    │   └── smug/
    │       ├── dotfiles-personal.yml
    │       └── dotfiles.yml
    ├── dot_vim/
    │   └── after/
    │       └── autoload/
    │           └── coc/
    │               └── ui.vim
    ├── notes/
    │   ├── dot_vale.ini
    │   └── styles/
    │       └── Vocab/
    │           └── symlink_FluxNinja
    ├── sw/
    │   └── assets/
    │       ├── apple_gruvbox.heic
    │       ├── base16-gruvbox-dark-medium.config
    │       ├── executable_dot_session_preview
    │       ├── executable_dotfiles-edit.sh
    │       ├── executable_install.sh
    │       ├── executable_install_gruvbox.sh
    │       ├── executable_insults.zsh
    │       ├── executable_iterm2_default.py
    │       ├── executable_lessfilter
    │       ├── executable_set_colors.zsh
    │       ├── executable_utils.zsh
    │       ├── iterm2_gruvbox.json
    │       ├── lose.ogg
    │       ├── win.ogg
    │       └── zsh_cnf.zsh
    └── .github/
        └── workflows/
            └── openai-review.yml


## Content
================================================
FILE: README.md
================================================
# CodeRabbit Dotfiles

![CodeRabbit Neovim](./sw/assets/vim.png)

## Introduction

Welcome to CodeRabbit optimized development environment that is well integrated
with our stack.

## Setup

We use [chezmoi](https://www.chezmoi.io) to manage CodeRabbit dotfiles in your
home directory.

### Automatic Setup

```
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/coderabbitai/dotfiles/master/sw/assets/executable_install.sh)"
```

### Manual Setup

```
cd $HOME
chezmoi init git@github.com:coderabbitai/dotfiles.git
# show diff of changes that will be made
chezmoi diff
# If you are happy with the changes, apply away!
chezmoi apply -v
```

Please close and reopen the terminal to trigger first time install/updates.

Recommend using `GitHub CLI` for authenticating with GitHub. Run
`gh auth login`. Alternatively, add
[SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh).

## Git setup

### Username and local settings

Provide username and email address by creating `.gitconfig_local` e.g.

```
[user]
  name = Harjot Gill
  email = harjot@coderabbit.ai
[github]
   user = <github user name>
   token = <personal access token>
```

You can generate
[personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
for GitHub to use HTTP API. Also, it's useful to add this token to your
`$HOME/.netrc` file. Run -
`echo 'machine api.github.com login <user> password <token>' >> $HOME/.netrc`

### GitHub org cloning script

To clone CodeRabbit, run: `gh_clone_all.sh coderabbitai $HOME/work`. This step
is performed automatically on installation.

### Git pull all repos script

To update all repos in a directory, run: `pull_all.sh $HOME/work/coderabbitai`.
This step is performed automatically on auto-updates.

## Preparing your terminal

- **Nerd fonts**: Please enable a nerd font such as `Hack Nerd Font` in your
  terminal profile to see icons properly when using `nvim` in terminal mode.
- **Terminal colors**: See the section about [colors](#colors).

## Homebrew

Homebrew is the default package manager for this environment. You can provide
private packages by adding them to: `$HOME/.brew_local`

## Autoupdates

This environment is set to autoupdate every 7 days by default. You can trigger
autoupdates manually by calling `autoupdate.zsh --force` You can provide custom
autoupdate commands by adding them to: `$HOME/.autoupdate_local.zsh`

## zshrc

You can provide additional zshrc settings by adding them to:
`$HOME/.zshrc_local`

![zsh](./sw/assets/zsh.png)

### Features

- Fuzzy menus: Fuzzy menus are available for command completion (press `TAB`)
  menus and command history (press `^r`).
- Vi mode: Press `ESC` to enter Vi `NORMAL` mode. Cool tip - while in normal
  mode, press `vv` to switch to visual mode (it will open `nvim` editor) and in
  that mode you can use GitHub Copilot to build sophisticated commands using AI!
- Prompt flags: Type `yazpt_explain_git` to understand the meaning of various
  flags in the prompt.
- Forgit: You can use `forgit` as an interactive frontend for various git
  commands. E.g. try `git forgit log`.
- iTerm2 integration: On macOS, please install iTerm2 shell
  [integration](https://iterm2.com/documentation-shell-integration.html) to use
  nice features such as navigating marks in prompt.

## tmux

![tmux Menu](./sw/assets/tmux-menu.png)
![tmux Fuzzy Menu](./sw/assets/tmux-fzf.png)

`tmux` sessions are automatically started as part of `.zshrc` execution. You
will be shown an option to join an existing detached session if they exist,
otherwise a new session will be created and attached to.

### Features

- Prefix: `C-a` or `C-b`
- Fuzzy menu: Press `C-a C-Space` to access fuzzy menu for quick tmux management
  and shortcuts to various commands.
- tmux menu: Press `F12` to access tmux session/window/pane management menu.
- Nested tmux sessions (e.g. remote ssh): Press `F1` to suspend/unsuspend local
  tmux.
- [Smug](https://github.com/ivaaaan/smug): Define and orchestrate tmux sessions
  with smug. e.g. use smug to start/stop local dev Kubernetes cluster and so on.
- Fuzzy search tmux terminal buffer: Press `C-a C-/`
- Vi bindings are enabled in tmux copy mode
- Facebook PathPicker: Press `C-a C-P` to select any line from scrollback buffer
  (e.g. git status) and use those in another command.
- Urlview: Press `C-a C-U` to select any url in scrollback buffer and open in
  browser.

## Neovim

This environment is highly tuned towards providing a modern neovim/vim setup for
development using modern languages such as Golang, Typescript etc.

![Fuzzy Menu](./sw/assets/fuzzymenu.png)

![IDE](./sw/assets/vim_ide.png)

### vimrc

You can provide additional `vimrc` settings by adding them to:
`$HOME/.vimrc_local`. You can also use **FuzzyMenu** (`<space><space>`) to tweak
and persist local settings. In addition, you can provide additional vim plugins
by adding them to `$HOME/.vimrc_plugins`.

Several `colorschemes` are bundled and `gruvbox` is chosen by default. You can
override `colorscheme` by providing `let colorscheme = <colorscheme>` in your
`.vimrc_local` file.

See `.vimrc` file for available `colorschemes`. Also see
`~/.config/nvim/init.vim` for Neovim specific settings.

### Discoverability of commands and plugins

- Landing page for new tabs contains several useful links that help with
  discoverability.
- Press `<space><space>` (double space) or `Shift + LeftMouse` click to open a
  contextual FuzzyMenu for the word under cursor or selection.

### AI-based autocompletion

- GitHub Copilot - Type `:Copilot setup` in Neovim to set up.
- CodeGPT - Just highlight the code and press `<space><space>` to see CodeGPT
  options in the FuzzyMenu. You must provide `OPENAI_API_KEY` environment
  variable in your `.zshrc_local` to use this feature.

### LanguageTool

If you have LanguageTool Premium, you can provide `LANGTOOL_HTTP_URI`,
`LANGTOOL_USERNAME` and `LANGTOOL_API_KEY` environment variables to use the
language server in Neovim.

## Colors

Unlike `nvim` which allows setting themes easily via `.vimrc_local`, color
themes for terminal interface are spread across multiple settings.

- **Terminal theme** -
  - macOS: For iTerm2, the option will be provided to install bundled profile
    that contains font/color settings. If you do not wish to install the
    profile, then the colors will be set via terminal escape codes unless
    `SET_TERMINAL_COLORS` is set to `false` in your `.zshrc_local`.
  - Linux: Colors will be set automatically using terminal escape codes unless
    `SET_TERMINAL_COLORS` is set to `false` in your `.zshrc_local`.
    Alternatively, you can install default color profile using
    `$HOME/sw/assets/install_gruvbox.sh`. Make sure to set `SET_TERMINAL_COLORS`
    to `false` in your `.zshrc_local` if you would like to use terminal's color
    profiles.
- tmux theme - See `.tmux.conf.settings` for example configuration and override
  it in your personal `.tmux.conf_local` file. The tmux theme configures the
  tmux status line and not the terminal itself.
- bat theme (cat replacement) - Environment variable `BAT_THEME` sets the theme.
  See `bat --list-themes` to get the list. You can override this theme in your
  `.zshrc_local` file. Bat is used extensively for fzf previews, git pager
  (delta), less command filter and so on.
- FZF colors - Get and source color schemes from
  [base16-fzf](https://github.com/fnune/base16-fzf) in your
  `$HOME/.zshrc_local`.
- LS_COLORS - We use [vivid](https://github.com/sharkdp/vivid) to set the
  themes. Run `vivid themes` to get the list. You can override this theme in
  your `.zshrc_local` file.
- Git pager - See `.gitconfig_themes` to see the available themes. You can
  override them in your local `.gitconfig_local`.
- Fast Syntax Highlighting (zsh) - You can run `fast-theme -l` to get the list.
  To set the theme, first, override `FAST_WORK_DIR` environment variable in your
  `.zshrc` and point it to `$HOME/.config/fsh_local`. Next, run
  `fast-theme <theme>` to switch the theme.

Note: Currently all these settings are configured to match `gruvbox-dark` color
palette. But it's pretty easy to override them to match `onedark` or
[Nord](https://www.nordtheme.com)

Bonus:

- Slack Gruvbox - Paste this in your DM to Slackbot and click the
  `Switch sidebar theme` button.
  ` gruvbox dark #282828,#3c3836,#ebdbb2,#1d2021,#3e313c,#ebdbb2,#689d6a,#fb4934`

## Managing `*_local` override files

You can use [vcsh](https://github.com/RichiH/vcsh) utility to version local
files and sync them across machines.



================================================
FILE: dot_aliases
================================================
eza_options='--links --git --group --changed --time-style long-iso --icons'
# replace ls with eza
alias ls='eza $(printf $eza_options)'
alias tree='eza --tree $(printf $eza_options)'

# Homebrew stuffs
alias update="brew update"
alias upgrade="brew upgrade"
alias cleanup="brew cleanup"
alias install="brew install"
alias doctor="echo '\nDoctor? Doctor who?\n' && brew doctor"
alias uud="update; upgrade; cleanup; doctor"
alias ood="uud"

# Utility commands (mostly from https://news.ycombinator.com/item?id=9869231)
alias o='open'
alias q='exit'
alias c='clear'
# Search process by name and highlight
function psgrep() { ps axu | grep -v grep | grep "$@" -i --color=auto; }
alias du='dust'
alias df='duf'
alias curl='curlie'

alias cat='bat -P'
alias diff='batdiff'
alias bathelp='bat --plain --language=help'
help() {
    "$@" --help 2>&1 | bathelp
}

alias top='btm -b'

if [[ $OSTYPE == 'darwin'* ]]; then
  #icloud drive
  alias icloud='cd ~/Library/Mobile\ Documents/com\~apple\~CloudDocs/'
fi

alias k='kubectl'

alias root='cd $(git rev-parse --show-toplevel || echo ".")'
alias '?'='gh copilot explain'
alias '??'='gh copilot suggest'



================================================
FILE: dot_gitconfig
================================================
# This is Git's per-user configuration file.
[core]
  editor = nvim
  pager = delta
[help]
  autoCorrect = prompt
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[push]
  default = current
[merge]
  tool = nvim_mergetool
  conflictstyle = diff3
[mergetool "nvim_mergetool"]
  cmd = nvim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
  trustExitCode = true  
[pull]
  ff = only
  rebase = false
[interactive]
  diffFilter = delta --color-only --features=interactive
[diff]
  colorMoved = default
[include]
  path = ~/.gitconfig_themes
[delta]
  features = fn-gruvbox
  navigate = true  # use n and N to move between diff sections
  side-by-side = true
  line-numbers = true
[delta "interactive"]
  keep-plus-minus-markers = false
# Use ~/.gitconfig_local to provide username etc.
[include]
  path = ~/.gitconfig_local
[diff "sopsdiffer"]
  textconv = sops --decrypt
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/



================================================
FILE: dot_gitconfig_themes
================================================
# To use these themes, first include this file in your own gitconfig file:
#
# [include]
#     path = PATH/TO/delta/themes.gitconfig
#
# Then, in your own gitconfig file, activate the chosen theme, e.g.
#
# [delta]
#    features = kingfisher
#
# Please add your own themes to this file, and open a PR.
#
# Instructions:
#
# 1. The name of the theme must be the name of some sort of wild organism:
#    mammal, bird, plant, mollusk -- whatever. It can be in any language.
#
# 2. Use `delta --show-config` to list all the style settings that are active in
#    your current delta environment, but only include settings in your theme
#    that are essential to its appearance.
#
# 3. Include either `dark = true` or `light = true` according to whether it is
#    designed for a light or dark terminal background. (This marks a feature as
#    a "theme", causing it to be picked up by `delta --show-themes`).
#
# 4. Feel free to include a comment line indicating who is the author of the
#    theme. E.g. a link to your github user page.

[delta "fn-gruvbox"]
    plus-style = syntax "#004000"
    minus-style = syntax "#400000"
    syntax-theme = gruvbox-dark
    line-numbers-minus-style = "#cc241d"
    line-numbers-zero-style = "#ebdbb2"
    line-numbers-plus-style = "#98971a"
    line-numbers-left-format = "{nm:>4}┊"
    line-numbers-right-format = "{np:>4}│"
    line-numbers-left-style = "#076678"
    line-numbers-right-style = "#076678"
    commit-decoration-style = bold "#d79921" box ul
    file-style = bold "#d79921" ul
    file-decoration-style = none
    hunk-header-decoration-style = "#d79921" box

[delta "collared-trogon"]
    # author: https://github.com/clnoll
    commit-decoration-style = bold box ul
    dark = true
    file-decoration-style = none
    file-style = omit
    hunk-header-decoration-style = "#022b45" box ul
    hunk-header-file-style = "#999999"
    hunk-header-line-number-style = bold "#003300"
    hunk-header-style = file line-number syntax
    line-numbers = true
    line-numbers-left-style = "#022b45"
    line-numbers-minus-style = "#80002a"
    line-numbers-plus-style = "#003300"
    line-numbers-right-style = "#022b45"
    line-numbers-zero-style = "#999999"
    minus-emph-style = normal "#80002a"
    minus-style = normal "#330011"
    plus-emph-style = syntax "#003300"
    plus-style = syntax "#001a00"
    syntax-theme = Nord

[delta "coracias-caudatus"]
    # author: https://github.com/clnoll
    commit-decoration-style = ol "#7536ff"
    commit-style = "#200078"
    file-decoration-style = none
    file-style = omit
    hunk-header-decoration-style = "#cfd6ff" ul
    hunk-header-file-style = "#858dff"
    hunk-header-line-number-style = "#7536ff"
    hunk-header-style = file line-number syntax
    light = true
    line-numbers = true
    line-numbers-left-format = "{nm:>4} ."
    line-numbers-left-style = "#e3ab02"
    line-numbers-minus-style = "#ff38b6"
    line-numbers-plus-style = "#00e0c2"
    line-numbers-right-format = "{np:>4}  "
    line-numbers-right-style = white
    line-numbers-zero-style = "#cccccc"
    minus-emph-style = bold "#ff3838" "#ffe3f7"
    minus-style = "#ff0080"
    plus-emph-style = "#008a81" bold "#00ffbf"
    plus-style = syntax "#cffff3"
    syntax-theme = Github

[delta "hoopoe"]
    # author: https://github.com/dandavison
    light = true
    pink = "#ffe0e0"
    dark-pink = "#ffc0c0"
    green = "#d0ffd0"
    dark-green = "#a0efa0"
    dark-green-2 = "#067a00"
    minus-style = normal hoopoe.pink
    minus-emph-style = normal hoopoe.dark-pink
    minus-non-emph-style = minus-style
    plus-style = syntax hoopoe.green
    plus-emph-style = syntax hoopoe.dark-green
    plus-non-emph-style = plus-style
    minus-empty-line-marker-style = minus-style
    plus-empty-line-marker-style = plus-style
    commit-decoration-style = blue ol
    commit-style = raw
    file-style = omit
    hunk-header-decoration-style = blue box
    hunk-header-file-style = red
    hunk-header-line-number-style = hoopoe.dark-green-2
    hunk-header-style = file line-number syntax
    syntax-theme = GitHub
    zero-style = syntax

[delta "tangara-chilensis"]
    # author: https://github.com/clnoll
    commit-decoration-style = bold box ul "#34fd50"
    dark = true
    file-decoration-style = none
    file-style = omit
    hunk-header-decoration-style = "#00b494" box ul
    hunk-header-file-style = "#999999"
    hunk-header-line-number-style = bold "#03a4ff"
    hunk-header-style = file line-number syntax
    line-numbers = true
    line-numbers-left-style = black
    line-numbers-minus-style = "#B10036"
    line-numbers-plus-style = "#03a4ff"
    line-numbers-right-style = black
    line-numbers-zero-style = "#999999"
    minus-emph-style = normal "#de004e"
    minus-style = normal "#990017"
    plus-emph-style = syntax "#03a4ff"
    plus-style = syntax "#450eff"
    side-by-side = true
    syntax-theme = Vibrant Sunburst

[delta "villsau"]
    # author: https://github.com/torarnv
    dark = true
    file-style = omit
    hunk-header-decoration-style = omit
    hunk-header-file-style = magenta
    hunk-header-line-number-style = dim magenta
    hunk-header-style = file line-number syntax
    line-numbers = false
    minus-emph-style = bold red 52
    minus-empty-line-marker-style = normal "#3f0001"
    minus-non-emph-style = dim red
    minus-style = bold red
    plus-emph-style = bold green 22
    plus-empty-line-marker-style = normal "#002800"
    plus-non-emph-style = dim green
    plus-style = bold green
    syntax-theme = OneHalfDark
    whitespace-error-style = reverse red
    zero-style = dim syntax

[delta "woolly-mammoth"]
    # author: https://github.com/Kr1ss-XD
    commit-decoration-style = 232 130 box
    commit-style = 232 bold italic 130
    dark = true
    file-added-label = [+]
    file-copied-label = [C]
    file-decoration-style = "#606018" overline
    file-modified-label = [M]
    file-removed-label = [-]
    file-renamed-label = [R]
    file-style = 232 bold 184
    hunk-header-decoration-style = none
    hunk-header-style = syntax bold italic 237
    line-numbers = true
    line-numbers-left-format = "{nm:>1}┊"
    line-numbers-left-style = red
    line-numbers-minus-style = red italic black
    line-numbers-plus-style = green italic black
    line-numbers-right-format = "{np:>1}┊"
    line-numbers-right-style = green
    line-numbers-zero-style = "#545474" italic
    minus-emph-style = syntax bold "#780000"
    minus-style = syntax "#400000"
    plus-emph-style = syntax bold "#007800"
    plus-style = syntax "#004000"
    syntax-theme = Vibrant Sunburst
    whitespace-error-style = "#280050" reverse
    zero-style = syntax
    blame-format = "{author:<18} ({commit:>7}) ┊{timestamp:^16}┊ "
    blame-palette = "#101010 #200020 #002800 #000028 #202000 #280000 #002020 #002800 #202020"

[delta "calochortus-lyallii"]
    # author: https://github.com/manojkarthick
    commit-decoration-style = none
    dark = true
    file-added-label = [+]
    file-copied-label = [C]
    file-decoration-style = none
    file-modified-label = [M]
    file-removed-label = [-]
    file-renamed-label = [R]
    file-style = 232 bold 184
    hunk-header-decoration-style = none
    hunk-header-file-style = "#999999"
    hunk-header-line-number-style = bold "#03a4ff"
    hunk-header-style = file line-number syntax
    line-numbers = true
    line-numbers-left-style = black
    line-numbers-minus-style = "#B10036"
    line-numbers-plus-style = "#03a4ff"
    line-numbers-right-style = black
    line-numbers-zero-style = "#999999"
    minus-emph-style = syntax bold "#780000"
    minus-style = syntax "#400000"
    plus-emph-style = syntax bold "#007800"
    plus-style = syntax "#004000"
    whitespace-error-style = "#280050" reverse
    zero-style = syntax
    syntax-theme = Nord

[delta "mantis-shrimp"]
    #author: https://github.com/2kabhishek
    dark = true
    side-by-side = true
    navigate = true
    keep-plus-minus-markers = true
    hyperlinks = true
    file-added-label = [+]
    file-copied-label = [==]
    file-modified-label = [*]
    file-removed-label = [-]
    file-renamed-label = [->]
    file-style = omit
    zero-style = syntax
    syntax-theme = Monokai Extended
    commit-decoration-style ="#11ce16" box
    commit-style = "#ffd21a" bold italic
    hunk-header-decoration-style = "#1688f0" box ul
    hunk-header-file-style = "#c63bee" ul bold
    hunk-header-line-number-style = "#ffd21a" box bold
    hunk-header-style = file line-number syntax bold italic
    line-numbers = true
    line-numbers-left-format = "{nm:>1}|"
    line-numbers-left-style = "#1688f0"
    line-numbers-minus-style = "#ff0051" bold
    line-numbers-plus-style = "#03e57f" bold
    line-numbers-right-format = "{np:>1}|"
    line-numbers-right-style = "#1688f0"
    line-numbers-zero-style = "#aaaaaa" italic
    minus-emph-style = syntax bold "#b80000"
    minus-style = syntax "#5d001e"
    plus-emph-style = syntax bold "#007800"
    plus-style = syntax "#004433"
    whitespace-error-style = "#280050"

[delta "mantis-shrimp-lite"]
    #author: https://github.com/2kabhishek
    dark = true
    side-by-side = true
    navigate = true
    keep-plus-minus-markers = true
    file-added-label = [+]
    file-copied-label = [==]
    file-modified-label = [*]
    file-removed-label = [-]
    file-renamed-label = [->]
    file-style = omit
    zero-style = syntax
    syntax-theme = Monokai Extended
    commit-decoration-style = green box
    commit-style = yellow bold italic
    hunk-header-decoration-style = blue box ul
    hunk-header-file-style = purple ul bold
    hunk-header-line-number-style = yellow box bold
    hunk-header-style = file line-number syntax bold italic
    line-numbers = true
    line-numbers-left-format = "{nm:>1}|"
    line-numbers-left-style = blue
    line-numbers-minus-style = red bold
    line-numbers-plus-style = green bold
    line-numbers-right-format = "{np:>1}|"
    line-numbers-right-style = blue
    line-numbers-zero-style = white italic
    minus-emph-style = syntax bold red
    plus-emph-style = syntax bold green
    whitespace-error-style = purple bold

[delta "zebra-dark"]
    minus-style = syntax "#330f0f"
    minus-emph-style = syntax "#4f1917"
    plus-style = syntax "#0e2f19"
    plus-emph-style = syntax "#174525"
    map-styles = \
       bold purple => syntax "#330f29", \
       bold blue => syntax "#271344", \
       bold cyan => syntax "#0d3531", \
       bold yellow => syntax "#222f14"
    zero-style = syntax
    whitespace-error-style = "#aaaaaa"

[delta "zebra-light"]
    minus-style = syntax "#fbdada"
    minus-emph-style = syntax "#f6b6b6"
    plus-style = syntax "#d6ffd6"
    plus-emph-style = syntax "#adffad"
    map-styles = \
       bold purple => syntax "#feecf7", \
       bold blue => syntax "#e5dff6", \
       bold cyan => syntax "#d8fdf6", \
       bold yellow => syntax "#f4ffe0"
    zero-style = syntax
    whitespace-error-style = "#aaaaaa"

[delta "chameleon"]
    #author: https://github.com/AirOnSkin
    dark = true
    line-numbers = true
    side-by-side = true
    keep-plus-minus-markers = true
    syntax-theme = Nord
    file-style = "#434C5E" bold
    file-decoration-style = "#434C5E" ul
    file-added-label = [+]
    file-copied-label = [==]
    file-modified-label = [*]
    file-removed-label = [-]
    file-renamed-label = [->]
    hunk-header-style = omit
    line-numbers-left-format = " {nm:>1} │"
    line-numbers-left-style = red
    line-numbers-right-format = " {np:>1} │"
    line-numbers-right-style = green
    line-numbers-minus-style = red italic black
    line-numbers-plus-style = green italic black
    line-numbers-zero-style = "#434C5E" italic
    minus-style = bold red
    minus-emph-style = bold red
    plus-style = bold green
    plus-emph-style = bold green
    zero-style = syntax
    blame-code-style = syntax
    blame-format = "{author:<18} ({commit:>7}) {timestamp:^12} "
    blame-palette = "#2E3440" "#3B4252" "#434C5E" "#4C566A"



================================================
FILE: dot_golangci.yml
================================================
---
# Options for analysis running.
run:
  timeout: 10s
  allow-parallel-runners: true



================================================
FILE: dot_prettierrc
================================================
{
  "tabWidth": 2,
  "useTabs": false,
  "arrowParens": "always",
  "bracketSameLine": true,
  "printWidth": 80,
  "trailingComma": "all",
  "proseWrap": "always"
}



================================================
FILE: dot_tmux.conf
================================================
# : << EOF
# https://github.com/gpakosz/.tmux
# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license,
#         without any warranty.
#         Copyright 2012— Gregory Pakosz (@gpakosz).
# /!\ do not edit this file
#     instead, override settings in ~/.tmux.conf.settings, see README.md


# -- general -------------------------------------------------------------------

set -g default-terminal "screen-256color"
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "tmux-256color"'

set -ga terminal-overrides ",xterm-256color*:Tc"

setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

set -g prefix2 C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix -2

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history

# edit configuration
bind e new-window -n "~/.tmux.conf.settings" "EDITOR=\${EDITOR//mvim/nvim} && EDITOR=\${EDITOR//gvim/nvim} && \${EDITOR:-nvim} ~/.tmux.conf.settings && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\""

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 5     # redraw status line every 5 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind BTab switch-client -l  # move to last session

# split current window horizontally
bind - split-window -v
# split current window vertically
bind _ split-window -h

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"


# -- urlview -------------------------------------------------------------------

bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"


# -- facebook pathpicker -------------------------------------------------------

bind F run "cut -c3- ~/.tmux.conf | sh -s _fpp #{pane_id}"


# -- list choice (tmux < 2.4) --------------------------------------------------

# vi-choice is gone in tmux >= 2.4
run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'


# -- edit mode (tmux < 2.4) ----------------------------------------------------

# vi-edit is gone in tmux >= 2.4
run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from


# -- user defined overrides ----------------------------------------------------

source -q ~/.tmux.conf.settings

# -- 8< ------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'


# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# _uname_s=$(uname -s)
#
# _tmux_version=$(tmux -V | awk '{gsub(/[^0-9.]/, "", $2); print ($2+0) * 100}')
#
# _is_enabled() {
#   [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"enabled" ] || [ x"$1" = x"1" ]
# }
#
# _circled() {
#   circled_digits='⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳'
#   if [ "$1" -le 20 ] 2>/dev/null; then
#     i=$(( $1 + 1 ))
#     eval set -- "$circled_digits"
#     eval echo "\${$i}"
#   else
#     echo "$1"
#   fi
# }
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# if command -v pkill > /dev/null 2>&1; then
#   _pkillf() {
#     pkill -f "$@" || true
#   }
# else
#   case "$_uname_s" in
#     *CYGWIN*)
#       _pkillf() {
#         while IFS= read -r pid; do
#           kill "$pid" || true
#         done  << EOF
# $(grep -Eao "$@" /proc/*/cmdline | xargs -0 | sed -E -n 's,/proc/([0-9]+)/.+$,\1,pg')
# EOF
#       }
#       ;;
#     *)
#       _pkillf() {
#         while IFS= read -r pid; do
#           kill "$pid" || true
#         done  << EOF
# $(ps -x -o pid= -o command= | grep -E "$@" | cut -d' ' -f1)
# EOF
#       }
#       ;;
#   esac
# fi
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     current_pane_height=$(tmux display -t "$current_pane" -p "#{pane_height}")
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != x"$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
# }
#
# _battery_info() {
#   count=0
#   charge=0
#   case "$_uname_s" in
#     *Darwin*)
#       while IFS= read -r line; do
#         [ -z "$line" ] && continue
#         discharging=$(printf '%s' "$line" | grep -qi "discharging" && echo "true" || echo "false")
#         percentage=$(printf '%s' "$line" | grep -E -o '[0-9]+%' || echo "0%")
#         charge=$(awk -v charge="$charge" -v percentage="${percentage%%%}" 'BEGIN { print charge + percentage / 100 }')
#         count=$((count + 1))
#       done  << EOF
# $(pmset -g batt | grep 'InternalBattery')
# EOF
#       ;;
#     *Linux*)
#       while IFS= read -r batpath; do
#         [ -z "$batpath" ] && continue
#         grep -i -q device "$batpath/scope" 2> /dev/null && continue
#
#         discharging=$(grep -qi "discharging" "$batpath/status" && echo "true" || echo "false")
#         bat_capacity="$batpath/capacity"
#         if [ -r "$bat_capacity" ]; then
#           charge=$(awk -v charge="$charge" -v capacity="$(cat "$bat_capacity")" 'BEGIN { print charge + (capacity > 100 ? 100 : capacity) / 100 }')
#         else
#           bat_energy_full="$batpath/energy_full"
#           bat_energy_now="$batpath/energy_now"
#           if [ -r "$bat_energy_full" ] && [ -r "$bat_energy_now" ]; then
#             charge=$(awk -v charge="$charge" -v energy_now="$(cat "$bat_energy_now")" -v energy_full="$(cat "$bat_energy_full")" 'BEGIN { print charge + energy_now / energy_full }')
#           fi
#         fi
#         count=$((count + 1))
#       done  << EOF
# $(find /sys/class/power_supply -maxdepth 1 -iname '*bat*')
# EOF
#       ;;
#     *CYGWIN*|*MSYS*|*MINGW*)
#       while IFS= read -r line; do
#         [ -z "$line" ] && continue
#         discharging=$(printf '%s' "$line" | awk '{ s = ($1 == 1) ? "true" : "false"; print s }')
#         charge=$(printf '%s' "$line" | awk -v charge="$charge" '{ print charge + $2 / 100 }')
#         count=$((count + 1))
#       done  << EOF
# $(wmic path Win32_Battery get BatteryStatus, EstimatedChargeRemaining 2> /dev/null | tr -d '\r' | tail -n +2 || true)
# EOF
#       ;;
#     *OpenBSD*)
#       for batid in 0 1 2; do
#         sysctl -n "hw.sensors.acpibat$batid.raw0" 2>&1 | grep -q 'not found' && continue
#         discharging=$(sysctl -n "hw.sensors.acpibat$batid.raw0" | grep -q 1 && echo "true" || echo "false")
#         if sysctl -n "hw.sensors.acpibat$batid" | grep -q amphour; then
#           charge=$(awk -v charge="$charge" -v remaining="$(sysctl -n hw.sensors.acpibat$batid.amphour3 | cut -d' ' -f1)" -v full="$(sysctl -n hw.sensors.acpibat$batid.amphour0 | cut -d' ' -f1)" 'BEGIN { print charge + remaining / full }')
#         else
#           charge=$(awk -v charge="$charge" -v remaining="$(sysctl -n hw.sensors.acpibat$batid.watthour3 | cut -d' ' -f1)" -v full="$(sysctl -n hw.sensors.acpibat$batid.watthour0 | cut -d' ' -f1)" 'BEGIN { print charge + remaining / full }')
#         fi
#         count=$((count + 1))
#       done
#       ;;
#   esac
#   [ "$count" -ne 0 ] && charge=$(awk -v charge="$charge" -v count="$count" 'BEGIN { print charge / count }') || true
# }
#
# _battery_status() {
#   _battery_info
#   if [ "$charge" = 0 ]; then
#     tmux set -ug '@battery_status'
#     return
#   fi
#
#   battery_status_charging=$1
#   battery_status_discharging=$2
#   if [ x"$discharging" = x"true" ]; then
#     battery_status="$battery_status_discharging"
#   else
#     battery_status="$battery_status_charging"
#   fi
#
#   tmux set -g '@battery_status' "$battery_status"
# }
#
# _battery_bar() {
#   _battery_info
#   if [ "$charge" = 0 ]; then
#     tmux  set -ug '@battery_bar'     \;\
#           set -ug '@battery_hbar'    \;\
#           set -ug '@battery_vbar'    \;\
#           set -ug '@battery_percentage'
#     return
#   fi
#
#   battery_bar_symbol_full=$1
#   battery_bar_symbol_empty=$2
#   battery_bar_length=$3
#   battery_bar_palette=$4
#   battery_hbar_palette=$5
#   battery_vbar_palette=$6
#
#   if [ x"$battery_bar_length" = x"auto" ]; then
#     columns=$(tmux -q display -p '#{client_width}' 2> /dev/null || echo 80)
#     if [ "$columns" -ge 80 ]; then
#       battery_bar_length=10
#     else
#       battery_bar_length=5
#     fi
#   fi
#
#   if echo "$battery_bar_palette" | grep -q -E '^heat|gradient(,[#a-z0-9]{7,9})?$'; then
#     # shellcheck disable=SC2086
#     { set -f; IFS=,; set -- $battery_bar_palette; unset IFS; set +f; }
#     palette_style=$1
#     battery_bg=${2:-none}
#     [ x"$palette_style" = x"gradient" ] && \
#       palette="196 202 208 214 220 226 190 154 118 82 46"
#     [ x"$palette_style" = x"heat" ] && \
#       palette="243 245 247 144 143 142 184 214 208 202 196"
#
#     palette=$(echo "$palette" | awk -v n="$battery_bar_length" '{ for (i = 0; i < n; ++i) printf $(1 + (i * NF / n))" " }')
#     eval set -- "$palette"
#
#     full=$(awk "BEGIN { printf \"%.0f\", ($charge) * $battery_bar_length }")
#     battery_bar="#[bg=$battery_bg]"
#     # shellcheck disable=SC2046
#     [ "$full" -gt 0 ] && \
#       battery_bar="$battery_bar$(printf "#[fg=colour%s]$battery_bar_symbol_full" $(echo "$palette" | cut -d' ' -f1-"$full"))"
#     # shellcheck disable=SC2046
#     empty=$((battery_bar_length - full))
#     # shellcheck disable=SC2046
#     [ "$empty" -gt 0 ] && \
#       battery_bar="$battery_bar$(printf "#[fg=colour%s]$battery_bar_symbol_empty" $(echo "$palette" | cut -d' ' -f$((full + 1))-$((full + empty))))"
#       eval battery_bar="$battery_bar#[fg=colour\${$((full == 0 ? 1 : full))}]"
#   elif echo "$battery_bar_palette" | grep -q -E '^(([#a-z0-9]{7,9}|none),?){3}$'; then
#     # shellcheck disable=SC2086
#     { set -f; IFS=,; set -- $battery_bar_palette; unset IFS; set +f; }
#     battery_full_fg=$1
#     battery_empty_fg=$2
#     battery_bg=$3
#
#     full=$(awk "BEGIN { printf \"%.0f\", ($charge) * $battery_bar_length }")
#     [ x"$battery_bg" != x"none" ] && \
#       battery_bar="#[bg=$battery_bg]"
#     #shellcheck disable=SC2046
#     [ "$full" -gt 0 ] && \
#       battery_bar="$battery_bar#[fg=$battery_full_fg]$(printf "%0.s$battery_bar_symbol_full" $(seq 1 "$full"))"
#     empty=$((battery_bar_length - full))
#     #shellcheck disable=SC2046
#     [ "$empty" -gt 0 ] && \
#       battery_bar="$battery_bar#[fg=$battery_empty_fg]$(printf "%0.s$battery_bar_symbol_empty" $(seq 1 "$empty"))" && \
#       battery_bar="$battery_bar#[fg=$battery_empty_fg]"
#   fi
#
#   if echo "$battery_hbar_palette" | grep -q -E '^heat|gradient(,[#a-z0-9]{7,9})?$'; then
#     # shellcheck disable=SC2086
#     { set -f; IFS=,; set -- $battery_hbar_palette; unset IFS; set +f; }
#     palette_style=$1
#     [ x"$palette_style" = x"gradient" ] && \
#       palette="196 202 208 214 220 226 190 154 118 82 46"
#     [ x"$palette_style" = x"heat" ] && \
#       palette="233 234 235 237 239 241 243 245 247 144 143 142 184 214 208 202 196"
#
#     palette=$(echo "$palette" | awk -v n="$battery_bar_length" '{ for (i = 0; i < n; ++i) printf $(1 + (i * NF / n))" " }')
#     eval set -- "$palette"
#
#     full=$(awk "BEGIN { printf \"%.0f\", ($charge) * $battery_bar_length }")
#     eval battery_hbar_fg="colour\${$((full == 0 ? 1 : full))}"
#   elif echo "$battery_hbar_palette" | grep -q -E '^([#a-z0-9]{7,9},?){3}$'; then
#     # shellcheck disable=SC2086
#     { set -f; IFS=,; set -- $battery_hbar_palette; unset IFS; set +f; }
#
#     # shellcheck disable=SC2046
#     eval $(awk "BEGIN { printf \"battery_hbar_fg=$%d\", (($charge) - 0.001) * $# + 1 }")
#   fi
#
#   eval set -- "▏ ▎ ▍ ▌ ▋ ▊ ▉ █"
#   # shellcheck disable=SC2046
#   eval $(awk "BEGIN { printf \"battery_hbar_symbol=$%d\", ($charge) * ($# - 1) + 1 }")
#   battery_hbar="#[fg=${battery_hbar_fg?}]${battery_hbar_symbol?}"
#
#   if echo "$battery_vbar_palette" | grep -q -E '^heat|gradient(,[#a-z0-9]{7,9})?$'; then
#     # shellcheck disable=SC2086
#     { set -f; IFS=,; set -- $battery_vbar_palette; unset IFS; set +f; }
#     palette_style=$1
#     [ x"$palette_style" = x"gradient" ] && \
#       palette="196 202 208 214 220 226 190 154 118 82 46"
#     [ x"$palette_style" = x"heat" ] && \
#       palette="233 234 235 237 239 241 243 245 247 144 143 142 184 214 208 202 196"
#
#     palette=$(echo "$palette" | awk -v n="$battery_bar_length" '{ for (i = 0; i < n; ++i) printf $(1 + (i * NF / n))" " }')
#     eval set -- "$palette"
#
#     full=$(awk "BEGIN { printf \"%.0f\", ($charge) * $battery_bar_length }")
#     eval battery_vbar_fg="colour\${$((full == 0 ? 1 : full))}"
#   elif echo "$battery_vbar_palette" | grep -q -E '^([#a-z0-9]{7,9},?){3}$'; then
#     # shellcheck disable=SC2086
#     { set -f; IFS=,; set -- $battery_vbar_palette; unset IFS; set +f; }
#
#     # shellcheck disable=SC2046
#     eval $(awk "BEGIN { printf \"battery_vbar_fg=$%d\", (($charge) - 0.001) * $# + 1 }")
#   fi
#
#   eval set -- "▁ ▂ ▃ ▄ ▅ ▆ ▇ █"
#   # shellcheck disable=SC2046
#   eval $(awk "BEGIN { printf \"battery_vbar_symbol=$%d\", ($charge) * ($# - 1) + 1 }")
#   battery_vbar="#[fg=${battery_vbar_fg?}]${battery_vbar_symbol?}"
#
#   battery_percentage="$(awk "BEGIN { printf \"%.0f%%\", ($charge) * 100 }")"
#
#   tmux  set -g '@battery_status' "$battery_status" \;\
#         set -g '@battery_bar' "$battery_bar" \;\
#         set -g '@battery_hbar' "$battery_hbar" \;\
#         set -g '@battery_vbar' "$battery_vbar" \;\
#         set -g '@battery_percentage' "$battery_percentage"
# }
#
# _pane_info() {
#   pane_pid="$1"
#   pane_tty="${2##/dev/}"
#   case "$_uname_s" in
#     *CYGWIN*)
#       ps -al | tail -n +2 | awk -v pane_pid="$pane_pid" -v tty="$pane_tty" '
#         ((/ssh/ && !/-W/) || !/ssh/) && !/tee/ && $5 == tty {
#           user[$1] = $6; if (!child[$2]) child[$2] = $1
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           file = "/proc/" pid "/cmdline"; getline command < file; close(file)
#           gsub(/\0/, " ", command)
#           "id -un " user[pid] | getline username
#           print pid":"username":"command
#         }
#       '
#       ;;
#     *Linux*)
#       ps -t "$pane_tty" --sort=lstart -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid="$pane_pid" '
#         ((/ssh/ && !/-W/) || !/ssh/) && !/tee/ {
#           user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           print pid":"user[pid]":"command[pid]
#         }
#       '
#       ;;
#     *)
#       ps -t "$pane_tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid="$pane_pid" '
#         ((/ssh/ && !/-W/) || !/ssh/) && !/tee/ {
#           user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           print pid":"user[pid]":"command[pid]
#         }
#       '
#       ;;
#   esac
# }
#
# _ssh_or_mosh_args() {
#   case "$1" in
#     *ssh*)
#       args=$(printf '%s' "$1" | perl -n -e 'print if s/.*?\bssh[\w]*\s*((?:\s+-\w+)*)(\s+\w+)(\s\w+)?/\1\2/')
#       ;;
#     *mosh-client*)
#       args=$(printf '%s' "$1" | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/' -e 's/-[^ ]*//g' -e 's/\d:\d//g')
#       ;;
#   esac
#
#  printf '%s' "$args"
# }
#
# _username() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   ssh_only=$3
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk '/^user / { print $2; exit }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh $ssh_or_mosh_args -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" 2>&1 | awk '/^%username% / { print $2; exit }')
#     [ -z "$username" ] && username=$(ssh $ssh_or_mosh_args -v -T -o ControlPath=none -o ProxyCommand=false -o IdentityFile='%%username%%/%r' 2>&1 | awk '/%username%/ { print substr($4,12); exit }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       username=${pane_info#*:}
#       username=${username%%:*}
#     fi
#   fi
#
#   printf '%s\n' "$username"
# }
#
# _hostname() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   ssh_only=$3
#   full=$4
#   h_or_H=$5
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk '/^hostname / { print $2; exit }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_or_mosh_args 2>&1 | awk '/^%hostname% / { print $2; exit }')
#
#     if ! _is_enabled "$full"; then
#       case "$hostname" in
#           *[a-z-].*)
#               hostname=${hostname%%.*}
#               ;;
#           127.0.0.1)
#               hostname="localhost"
#               ;;
#       esac
#     fi
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname="$h_or_H"
#     fi
#   fi
#
#   printf '%s\n' "$hostname"
# }
#
# _root() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   root=$3
#
#   username=$(_username "$pane_id" "$pane_tty" false)
#
#   [ x"$username" = x"root" ] && echo "$root"
# }
#
# _uptime() {
#   case "$_uname_s" in
#     *Darwin*|*FreeBSD*)
#       boot=$(sysctl -q -n kern.boottime | awk -F'[ ,:]+' '{ print $4 }')
#       now=$(date +%s)
#       ;;
#     *Linux*|*CYGWIN*|*MSYS*|*MINGW*)
#       boot=0
#       now=$(cut -d' ' -f1 < /proc/uptime)
#       ;;
#     *OpenBSD*)
#       boot=$(sysctl -n kern.boottime)
#       now=$(date +%s)
#   esac
#   # shellcheck disable=SC1004
#   awk -v boot="$boot" -v now="$now" '
#     BEGIN {
#       uptime = now - boot
#       y = int(uptime / 31536000)
#       dy = int(uptime / 86400) % 365
#       d = int(uptime / 86400)
#       h = int(uptime / 3600) % 24
#       m = int(uptime / 60) % 60
#       s = int(uptime) % 60
#
#       system("tmux  set -g @uptime_y " y + 0 " \\; " \
#                    "set -g @uptime_dy " dy + 0 " \\; " \
#                    "set -g @uptime_d " d + 0 " \\; " \
#                    "set -g @uptime_h " h + 0 " \\; " \
#                    "set -g @uptime_m " m + 0 " \\; " \
#                    "set -g @uptime_s " s + 0)
#     }'
# }
#
# _loadavg() {
#   case "$_uname_s" in
#     *Darwin*|*FreeBSD*)
#       tmux set -g @loadavg "$(sysctl -q -n vm.loadavg | cut -d' ' -f2)"
#       ;;
#     *Linux*|*CYGWIN*)
#       tmux set -g @loadavg "$(cut -d' ' -f1 < /proc/loadavg)"
#       ;;
#     *OpenBSD*)
#       tmux set -g @loadavg "$(sysctl -q -n vm.loadavg | cut -d' ' -f1)"
#       ;;
#   esac
# }
#
# _split_window_ssh() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   shift 2
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   case "$command" in
#     *mosh-client*)
#       # shellcheck disable=SC2046
#        tmux split-window "$@" mosh $(echo "$command" | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/')
#      ;;
#     *ssh*)
#       # shellcheck disable=SC2046
#       tmux split-window "$@" $(echo "$command" | sed -e 's/;/\\;/g')
#       ;;
#     *)
#       tmux split-window "$@"
#   esac
# }
#
# _split_window() {
#   _split_window_ssh "$@"
# }
#
# _apply_overrides() {
#   tmux_conf_theme_24b_colour=${tmux_conf_theme_24b_colour:-false}
#   tmux_conf_24b_colour=${tmux_conf_24b_colour:-$tmux_conf_theme_24b_colour}
#   if _is_enabled "$tmux_conf_24b_colour"; then
#     case "$TERM" in
#       screen-*|tmux-*)
#         ;;
#       *)
#         tmux set-option -ga terminal-overrides ",*256col*:Tc"
#         ;;
#     esac
#   fi
# }
#
# _apply_bindings() {
#   cfg=$(mktemp) && trap 'rm -f $cfg*' EXIT
#
#   tmux list-keys | grep -vF '.tmux.conf.settings' | grep -E 'new-window|split(-|_)window|new-session|copy-selection|copy-pipe' > "$cfg"
#
#   # tmux 3.0 doesn't include 02254d1e5c881be95fd2fc37b4c4209640b6b266 and the
#   # output of list-keys can be truncated
#   perl -p -i -e "s/'#\{\?window_zoomed_flag,Unzoom,Zoom\}' 'z' \{resize-pane -$/'#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z}\"/g" "$cfg"
#
#   perl -p -i -e "
#     s/\bnew-window\b([^;}\n]*?)(?:\s+-c\s+((?:\\\\\")?|\"?|'?)#\{pane_current_path\}\2)/new-window\1/g
#     ;
#     s/\brun-shell\b\s+(\"|')cut\s+-c3-\s+~\/\.tmux\.conf\s+\|\s+sh\s+-s\s+_split_window\s+#\{b:pane_tty\}([^\n\1]*)(\s+-c\s+((?:\\\\\")?|\"?|'?)#\{pane_current_path\}\4)([^\n\1]*)\1/run-shell \1cut -c3- ~\/.tmux.conf | sh -s _split_window #{pane_pid} #{b:pane_tty}\2\5\1/g
#     ;
#     s/\brun-shell\b(\s+((?:\\\\\")?|\"?|'?)cut\s+-c3-\s+~\/\.tmux\.conf\s+\|\s+sh\s+-s\s+_split_window\s+((?:\\\\\")?|\"?|'?)#\{b:pane_tty\}\3)(.*?)\2/split-window\4/g
#     ;
#     s/\bsplit-window\b([^;}\n]*?)(?:\s+-c\s+((?:\\\\\")?|\"?|'?)#\{pane_current_path\}\2)/split-window\1/g" \
#     "$cfg"
#
#   tmux_conf_new_window_retain_current_path=${tmux_conf_new_window_retain_current_path:-false}
#   if _is_enabled "$tmux_conf_new_window_retain_current_path"; then
#     perl -p -i -e "
#       s/\bnew-window\b(?!\s+(?:-|}))/{$&}/g if /\bdisplay-menu\b/
#       ;
#       s/\bnew-window\b/new-window -c '#\{pane_current_path\}'/g" \
#       "$cfg"
#   fi
#
#   perl -p -i -e "
#     s/\bsplit-window\b((?:(?:[ \t]+-[bdfhIvP])|(?:[ \t]+-[celtF][ \t]+(?!\bssh\b)[^\s]+))*)?(?:\s+(\bssh\b))((?:(?:[ \t]+-[bdfhIvP])|(?:[ \t]+-[celtF][ \t]+(?!\bssh\b)[^\s]+))*)?/run-shell 'cut -c3- ~\/\.tmux\.conf | sh -s _split_window_ssh #\{pane_pid\} #\{b:pane_tty\}\1'/g if /\bsplit-window\b((?:(?:[ \t]+-[bdfhIvP])|(?:[ \t]+-[celtF][ \t]+(?!ssh)[^\s]+))*)?(?:\s+(ssh))((?:(?:[ \t]+-[bdfhIvP])|(?:[ \t]+-[celtF][ \t]+(?!ssh)[^\s]+))*)?/"\
#   "$cfg"
#
#   tmux_conf_new_pane_retain_current_path=${tmux_conf_new_pane_retain_current_path:-true}
#   tmux_conf_new_pane_reconnect_ssh=${tmux_conf_new_pane_reconnect_ssh:-false}
#   if _is_enabled "$tmux_conf_new_pane_reconnect_ssh"; then
#     perl -p -i -e "s/\bsplit-window\b([^;}\n\"]*)/run-shell 'cut -c3- ~\/\.tmux\.conf | sh -s _split_window #\{pane_pid\} #\{b:pane_tty\}\1'/g" "$cfg"
#   fi
#
#   if _is_enabled "$tmux_conf_new_pane_retain_current_path"; then
#     perl -p -i -e "
#       s/\bsplit-window\b(?!\s+(?:-|}))/{$&}/g if /\bdisplay-menu\b/
#       ;
#       s/\bsplit-window\b/split-window -c '#{pane_current_path}'\1/g
#       ;
#       s/\brun-shell\b\s+'cut\s+-c3-\s+~\/\.tmux\.conf\s+\|\s+sh\s+-s\s+_split_window(_ssh)?\s+#\{b:pane_tty\}([^}\n']*)'/run-shell 'cut -c3- ~\/.tmux.conf | sh -s _split_window\1 #\{b:pane_tty\} -c \\\\\"#\{pane_current_path\}\\\\\"\2'/g if /\bdisplay-menu\b/
#       ;
#       s/\brun-shell\b\s+'cut\s+-c3-\s+~\/\.tmux\.conf\s+\|\s+sh\s+-s\s+_split_window(_ssh)?\s+#\{b:pane_tty\}([^}\n']*)'/run-shell 'cut -c3- ~\/.tmux.conf | sh -s _split_window\1 #\{b:pane_tty\} -c \"#\{pane_current_path\}\"\2'/g" \
#       "$cfg"
#   fi
#
#   tmux_conf_new_session_prompt=${tmux_conf_new_session_prompt:-false}
#   if _is_enabled "$tmux_conf_new_session_prompt"; then
#     perl -p -i \
#       -e "s/(?<!command-prompt -p )\b(new-session)\b(?!\s+(?:-|}))/{$&}/g if /\bdisplay-menu\b/" \
#       -e ';' \
#       -e "s/(?<!\bcommand-prompt -p )\bnew-session\b(?! -s)/command-prompt -p new-session 'new-session -s \"%%\"'/g" \
#       "$cfg"
#   else
#     perl -p -i -e "s/\bcommand-prompt\s+-p\s+new-session\s+'new-session\s+-s\s+\"%%\"'/new-session/g" "$cfg"
#   fi
#
#   tmux_conf_copy_to_os_clipboard=${tmux_conf_copy_to_os_clipboard:-false}
#   command -v xsel > /dev/null 2>&1 && command='xsel -i -b'
#   ! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1 && command='xclip -i -selection clipboard > \/dev\/null 2>\&1'
#   command -v pbcopy > /dev/null 2>&1 && command='pbcopy'
#   command -v reattach-to-user-namespace > /dev/null 2>&1 && command='reattach-to-user-namespace pbcopy'
#   command -v clip.exe > /dev/null 2>&1 && command='clip\.exe'
#   [ -c /dev/clipboard ] && command='cat > \/dev\/clipboard'
#
#   if [ -n "$command" ]; then
#     if _is_enabled "$tmux_conf_copy_to_os_clipboard"; then
#       perl -p -i -e "s/(?!.*?$command)\bcopy-(?:selection|pipe)(-and-cancel)?\b/copy-pipe\1 '$command'/g" "$cfg"
#     else
#       if [ $_tmux_version -ge 320 ]; then
#         perl -p -i -e "s/\bcopy-pipe(-and-cancel)?\b\s+(\"|')?$command\2?/copy-pipe\1/g" "$cfg"
#       else
#         perl -p -i -e "s/\bcopy-pipe(-and-cancel)?\b\s+(\"|')?$command\2?/copy-selection\1/g" "$cfg"
#       fi
#     fi
#   fi
#
#   # until tmux >= 3.0, output of tmux list-keys can't be consumed back by tmux source-file without applying some escapings
#   awk < "$cfg" \
#     '{i = $2 == "-T" ? 4 : 5; gsub(/^[;]$/, "\\\\&", $i); gsub(/^[$"#~]$/, "'"'"'&'"'"'", $i); gsub(/^['"'"']$/, "\"&\"", $i); print}' > "$cfg.in"
#
#   # ignore bindings with errors
#   if ! tmux source-file "$cfg.in"; then
#     verbose_flag=$(tmux source-file -v /dev/null 2> /dev/null && printf -- '-v' || true)
#     while ! out=$(tmux source-file "$verbose_flag" "$cfg.in"); do
#       line=$(printf "%s" "$out" | tail -1 | cut -d':' -f2)
#       perl -n -i -e "if ($. != $line) { print }" "$cfg.in"
#     done
#   fi
# }
#
# _apply_theme() {
#
#   # -- default theme -----------------------------------------------------
#
#   tmux_conf_theme_colour_1=${tmux_conf_theme_colour_1:-#080808}     # dark gray
#   tmux_conf_theme_colour_2=${tmux_conf_theme_colour_2:-#303030}     # gray
#   tmux_conf_theme_colour_3=${tmux_conf_theme_colour_3:-#8a8a8a}     # light gray
#   tmux_conf_theme_colour_4=${tmux_conf_theme_colour_4:-#00afff}     # light blue
#   tmux_conf_theme_colour_5=${tmux_conf_theme_colour_5:-#ffff00}     # yellow
#   tmux_conf_theme_colour_6=${tmux_conf_theme_colour_6:-#080808}     # dark gray
#   tmux_conf_theme_colour_7=${tmux_conf_theme_colour_7:-#e4e4e4}     # white
#   tmux_conf_theme_colour_8=${tmux_conf_theme_colour_8:-#080808}     # dark gray
#   tmux_conf_theme_colour_9=${tmux_conf_theme_colour_9:-#ffff00}     # yellow
#   tmux_conf_theme_colour_10=${tmux_conf_theme_colour_10:-#ff00af}   # pink
#   tmux_conf_theme_colour_11=${tmux_conf_theme_colour_11:-#5fff00}   # green
#   tmux_conf_theme_colour_12=${tmux_conf_theme_colour_12:-#8a8a8a}   # light gray
#   tmux_conf_theme_colour_13=${tmux_conf_theme_colour_13:-#e4e4e4}   # white
#   tmux_conf_theme_colour_14=${tmux_conf_theme_colour_14:-#080808}   # dark gray
#   tmux_conf_theme_colour_15=${tmux_conf_theme_colour_15:-#080808}   # dark gray
#   tmux_conf_theme_colour_16=${tmux_conf_theme_colour_16:-#d70000}   # red
#   tmux_conf_theme_colour_17=${tmux_conf_theme_colour_17:-#e4e4e4}   # white
#
#   # -- panes -------------------------------------------------------------
#
#   tmux_conf_theme_window_fg=${tmux_conf_theme_window_fg:-default}
#   tmux_conf_theme_window_bg=${tmux_conf_theme_window_bg:-default}
#   tmux_conf_theme_highlight_focused_pane=${tmux_conf_theme_highlight_focused_pane:-false}
#   tmux_conf_theme_focused_pane_fg=${tmux_conf_theme_focused_pane_fg:-default}
#   tmux_conf_theme_focused_pane_bg=${tmux_conf_theme_focused_pane_bg:-$tmux_conf_theme_colour_2}
#
#   window_style="fg=$tmux_conf_theme_window_fg,bg=$tmux_conf_theme_window_bg"
#   if _is_enabled "$tmux_conf_theme_highlight_focused_pane"; then
#     window_active_style="fg=$tmux_conf_theme_focused_pane_fg,bg=$tmux_conf_theme_focused_pane_bg"
#   else
#     window_active_style="default"
#   fi
#
#   tmux_conf_theme_pane_border_style=${tmux_conf_theme_pane_border_style:-thin}
#   tmux_conf_theme_pane_border=${tmux_conf_theme_pane_border:-$tmux_conf_theme_colour_2}
#   tmux_conf_theme_pane_active_border=${tmux_conf_theme_pane_active_border:-$tmux_conf_theme_colour_4}
#   tmux_conf_theme_pane_border_fg=${tmux_conf_theme_pane_border_fg:-$tmux_conf_theme_pane_border}
#   tmux_conf_theme_pane_active_border_fg=${tmux_conf_theme_pane_active_border_fg:-$tmux_conf_theme_pane_active_border}
#   case "$tmux_conf_theme_pane_border_style" in
#     fat)
#       tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-$tmux_conf_theme_pane_border_fg}
#       tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-$tmux_conf_theme_pane_active_border_fg}
#       ;;
#     thin|*)
#       tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-default}
#       tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-default}
#       ;;
#   esac
#
#   tmux_conf_theme_pane_indicator=${tmux_conf_theme_pane_indicator:-$tmux_conf_theme_colour_4}
#   tmux_conf_theme_pane_active_indicator=${tmux_conf_theme_pane_active_indicator:-$tmux_conf_theme_colour_4}
#
#   # -- status line -------------------------------------------------------
#
#   tmux_conf_theme_left_separator_main=$(_decode_unicode_escapes "${tmux_conf_theme_left_separator_main-}")
#   tmux_conf_theme_left_separator_sub=$(_decode_unicode_escapes "${tmux_conf_theme_left_separator_sub-|}")
#   tmux_conf_theme_right_separator_main=$(_decode_unicode_escapes "${tmux_conf_theme_right_separator_main-}")
#   tmux_conf_theme_right_separator_sub=$(_decode_unicode_escapes "${tmux_conf_theme_right_separator_sub-|}")
#
#   tmux_conf_theme_message_fg=${tmux_conf_theme_message_fg:-$tmux_conf_theme_colour_1}
#   tmux_conf_theme_message_bg=${tmux_conf_theme_message_bg:-$tmux_conf_theme_colour_5}
#   tmux_conf_theme_message_attr=${tmux_conf_theme_message_attr:-bold}
#
#   tmux_conf_theme_message_command_fg=${tmux_conf_theme_message_command_fg:-$tmux_conf_theme_colour_5}
#   tmux_conf_theme_message_command_bg=${tmux_conf_theme_message_command_bg:-$tmux_conf_theme_colour_1}
#   tmux_conf_theme_message_command_attr=${tmux_conf_theme_message_command_attr:-bold}
#
#   tmux_conf_theme_mode_fg=${tmux_conf_theme_mode_fg:-$tmux_conf_theme_colour_1}
#   tmux_conf_theme_mode_bg=${tmux_conf_theme_mode_bg:-$tmux_conf_theme_colour_5}
#   tmux_conf_theme_mode_attr=${tmux_conf_theme_mode_attr:-bold}
#
#   tmux_conf_theme_status_fg=${tmux_conf_theme_status_fg:-$tmux_conf_theme_colour_3}
#   tmux_conf_theme_status_bg=${tmux_conf_theme_status_bg:-$tmux_conf_theme_colour_1}
#   tmux_conf_theme_status_attr=${tmux_conf_theme_status_attr:-none}
#
#   tmux_conf_theme_terminal_title=${tmux_conf_theme_terminal_title:-#h ❐ #S ● #I #W}
#
#   tmux_conf_theme_terminal_title=$(echo "$tmux_conf_theme_terminal_title" | sed \
#     -e 's%#{circled_window_index}%#(cut -c3- ~/.tmux.conf | sh -s _circled #I)%g' \
#     -e 's%#{circled_session_name}%#(cut -c3- ~/.tmux.conf | sh -s _circled #S)%g' \
#     -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} false #D)%g' \
#     -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false false #h #D)%g' \
#     -e 's%#{hostname_full}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false true #H #D)%g' \
#     -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} true #D)%g' \
#     -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true false #h #D)%g' \
#     -e 's%#{hostname_full_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true true #H #D)%g')
#
#   tmux_conf_theme_window_status_fg=${tmux_conf_theme_window_status_fg:-$tmux_conf_theme_colour_3}
#   tmux_conf_theme_window_status_bg=${tmux_conf_theme_window_status_bg:-$tmux_conf_theme_colour_1}
#   tmux_conf_theme_window_status_attr=${tmux_conf_theme_window_status_attr:-none}
#   tmux_conf_theme_window_status_format=${tmux_conf_theme_window_status_format:-#I #W}
#
#   tmux_conf_theme_window_status_current_fg=${tmux_conf_theme_window_status_current_fg:-$tmux_conf_theme_colour_1}
#   tmux_conf_theme_window_status_current_bg=${tmux_conf_theme_window_status_current_bg:-$tmux_conf_theme_colour_4}
#   tmux_conf_theme_window_status_current_attr=${tmux_conf_theme_window_status_current_attr:-bold}
#   tmux_conf_theme_window_status_current_format=${tmux_conf_theme_window_status_current_format:-#I #W}
#
#   tmux_conf_theme_window_status_activity_fg=${tmux_conf_theme_window_status_activity_fg:-default}
#   tmux_conf_theme_window_status_activity_bg=${tmux_conf_theme_window_status_activity_bg:-default}
#   tmux_conf_theme_window_status_activity_attr=${tmux_conf_theme_window_status_activity_attr:-underscore}
#
#   tmux_conf_theme_window_status_bell_fg=${tmux_conf_theme_window_status_bell_fg:-$tmux_conf_theme_colour_5}
#   tmux_conf_theme_window_status_bell_bg=${tmux_conf_theme_window_status_bell_bg:-default}
#   tmux_conf_theme_window_status_bell_attr=${tmux_conf_theme_window_status_bell_attr:-blink,bold}
#
#   tmux_conf_theme_window_status_last_fg=${tmux_conf_theme_window_status_last_fg:-$tmux_conf_theme_colour_4}
#   tmux_conf_theme_window_status_last_bg=${tmux_conf_theme_window_status_last_bg:-default}
#   tmux_conf_theme_window_status_last_attr=${tmux_conf_theme_window_status_last_attr:-none}
#
#   if [ x"$tmux_conf_theme_window_status_bg" = x"$tmux_conf_theme_status_bg" ] || [ x"$tmux_conf_theme_window_status_bg" = x"default" ]; then
#     spacer=''
#     spacer_current=' '
#   else
#     spacer=' '
#     spacer_current=' '
#   fi
#   if [ x"$tmux_conf_theme_window_status_last_bg" = x"$tmux_conf_theme_status_bg" ] || [ x"$tmux_conf_theme_window_status_last_bg" = x"default" ] ; then
#     spacer_last=''
#   else
#     spacer_last=' '
#   fi
#   if [ x"$tmux_conf_theme_window_status_activity_bg" = x"$tmux_conf_theme_status_bg" ] || [ x"$tmux_conf_theme_window_status_activity_bg" = x"default" ] ; then
#     spacer_activity=''
#     spacer_last_activity="$spacer_last"
#   else
#     spacer_activity=' '
#     spacer_last_activity=' '
#   fi
#   if [ x"$tmux_conf_theme_window_status_bell_bg" = x"$tmux_conf_theme_status_bg" ] || [ x"$tmux_conf_theme_window_status_bell_bg" = x"default" ] ; then
#     spacer_bell=''
#     spacer_last_bell="$spacer_last"
#     spacer_activity_bell="$spacer_activity"
#     spacer_last_activity_bell="$spacer_last_activity"
#   else
#     spacer_bell=' '
#     spacer_last_bell=' '
#     spacer_activity_bell=' '
#     spacer_last_activity_bell=' '
#   fi
#   spacer="#{?window_last_flag,#{?window_activity_flag,#{?window_bell_flag,$spacer_last_activity_bell,$spacer_last_activity},#{?window_bell_flag,$spacer_last_bell,$spacer_last}},#{?window_activity_flag,#{?window_bell_flag,$spacer_activity_bell,$spacer_activity},#{?window_bell_flag,$spacer_bell,$spacer}}}"
#   if [ x"$(tmux show -g -v status-justify)" = x"right" ]; then
#     if [ -z "$tmux_conf_theme_right_separator_main" ]; then
#       window_status_separator=' '
#     else
#       window_status_separator=''
#     fi
#     tmux_conf_theme_window_status_format="#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_status_bg,none]#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr]#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}$spacer$(printf "$tmux_conf_theme_window_status_last_attr" | perl -n -e 'print "#{?window_last_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_last_flag,#[\1],}/g; print if !/default/')$(printf "$tmux_conf_theme_window_status_activity_attr" | perl -n -e 'print "#{?window_activity_flag?,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_activity_flag,#[\1],}/g; print if !/default/')$(printf "$tmux_conf_theme_window_status_bell_attr" | perl -n -e 'print "#{?window_bell_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_bell_flag,#[\1],}/g; print if !/default/')$tmux_conf_theme_window_status_format#[none]$spacer#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_bg]#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#[none]$tmux_conf_theme_right_separator_main"
#     tmux_conf_theme_window_status_current_format="#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg,none]$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr]$spacer_current$tmux_conf_theme_window_status_current_format$spacer_current#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_right_separator_main"
#   else
#     if [ -z "$tmux_conf_theme_left_separator_main" ]; then
#       window_status_separator=' '
#     else
#       window_status_separator=''
#     fi
#     tmux_conf_theme_window_status_format="#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_bg,none]#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr]#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}$spacer$(printf "$tmux_conf_theme_window_status_last_attr" | perl -n -e 'print "#{?window_last_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_last_flag,#[\1],}/g; print if !/default/')$(printf "$tmux_conf_theme_window_status_activity_attr" | perl -n -e 'print "#{?window_activity_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_activity_flag,#[\1],}/g; print if !/default/')$(printf "$tmux_conf_theme_window_status_bell_attr" | perl -n -e 'print "#{?window_bell_flag,#[none],}" if /!default/ ; s/([a-z]+),?/#{?window_bell_flag,#[\1],}/g; print if !/default/')$tmux_conf_theme_window_status_format#[none]$spacer#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_status_bg]#{?window_last_flag,$(printf "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}$tmux_conf_theme_left_separator_main"
#     tmux_conf_theme_window_status_current_format="#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr]$spacer_current$tmux_conf_theme_window_status_current_format$spacer_current#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg]$tmux_conf_theme_left_separator_main"
#   fi
#
#   tmux_conf_theme_window_status_format=$(echo "$tmux_conf_theme_window_status_format" | sed \
#     -e 's%#{circled_window_index}%#(cut -c3- ~/.tmux.conf | sh -s _circled #I)%g' \
#     -e 's%#{circled_session_name}%#(cut -c3- ~/.tmux.conf | sh -s _circled #S)%g' \
#     -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} false #D)%g' \
#     -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false false #h #D)%g' \
#     -e 's%#{hostname_full}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false true #H #D)%g' \
#     -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} true #D)%g' \
#     -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true false #h #D)%g' \
#     -e 's%#{hostname_full_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true true #H #D)%g')
#   tmux_conf_theme_window_status_current_format=$(echo "$tmux_conf_theme_window_status_current_format" | sed \
#     -e 's%#{circled_window_index}%#(cut -c3- ~/.tmux.conf | sh -s _circled #I)%g' \
#     -e 's%#{circled_session_name}%#(cut -c3- ~/.tmux.conf | sh -s _circled #S)%g' \
#     -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} false #D)%g' \
#     -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false false #h #D)%g' \
#     -e 's%#{hostname_full}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false true #H #D)%g' \
#     -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} true #D)%g' \
#     -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true false #h #D)%g' \
#     -e 's%#{hostname_full_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true true #H #D)%g')
#
#   # -- indicators
#
#   tmux_conf_theme_pairing=${tmux_conf_theme_pairing:-⚇}                         # U+2687
#   tmux_conf_theme_pairing_fg=${tmux_conf_theme_pairing_fg:-none}
#   tmux_conf_theme_pairing_bg=${tmux_conf_theme_pairing_bg:-none}
#   tmux_conf_theme_pairing_attr=${tmux_conf_theme_pairing_attr:-none}
#
#   tmux_conf_theme_prefix=${tmux_conf_theme_prefix:-⌨}                           # U+2328
#   tmux_conf_theme_prefix_fg=${tmux_conf_theme_prefix_fg:-none}
#   tmux_conf_theme_prefix_bg=${tmux_conf_theme_prefix_bg:-none}
#   tmux_conf_theme_prefix_attr=${tmux_conf_theme_prefix_attr:-none}
#
#   tmux_conf_theme_mouse=${tmux_conf_theme_mouse:-↗}                             # U+2197
#   tmux_conf_theme_mouse_fg=${tmux_conf_theme_mouse_fg:-none}
#   tmux_conf_theme_mouse_bg=${tmux_conf_theme_mouse_bg:-none}
#   tmux_conf_theme_mouse_attr=${tmux_conf_theme_mouse_attr:-none}
#
#   tmux_conf_theme_root=${tmux_conf_theme_root:-!}
#   tmux_conf_theme_root_fg=${tmux_conf_theme_root_fg:-none}
#   tmux_conf_theme_root_bg=${tmux_conf_theme_root_bg:-none}
#   tmux_conf_theme_root_attr=${tmux_conf_theme_root_attr:-bold,blink}
#
#   tmux_conf_theme_synchronized=${tmux_conf_theme_synchronized:-⚏}               # U+268F
#   tmux_conf_theme_synchronized_fg=${tmux_conf_theme_synchronized_fg:-none}
#   tmux_conf_theme_synchronized_bg=${tmux_conf_theme_synchronized_bg:-none}
#   tmux_conf_theme_synchronized_attr=${tmux_conf_theme_synchronized_attr:-none}
#
#   # -- status-left style
#
#   tmux_conf_theme_status_left=${tmux_conf_theme_status_left-' ❐ #S | ↑#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} '}
#   tmux_conf_theme_status_left_fg=${tmux_conf_theme_status_left_fg:-$tmux_conf_theme_colour_6,$tmux_conf_theme_colour_7,$tmux_conf_theme_colour_8}
#   tmux_conf_theme_status_left_bg=${tmux_conf_theme_status_left_bg:-$tmux_conf_theme_colour_9,$tmux_conf_theme_colour_10,$tmux_conf_theme_colour_11}
#   tmux_conf_theme_status_left_attr=${tmux_conf_theme_status_left_attr:-bold,none,none}
#
#   if [ -n "$tmux_conf_theme_status_left" ]; then
#     status_left=$(echo "$tmux_conf_theme_status_left" | sed \
#       -e "s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{?session_many_attached,$tmux_conf_theme_pairing ,}/g" \
#       -e "s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{?client_prefix,$tmux_conf_theme_prefix ,$(printf "$tmux_conf_theme_prefix" | sed -e 's/./ /g') }/g" \
#       -e "s/#{mouse}/#[fg=$tmux_conf_theme_mouse_fg]#[bg=$tmux_conf_theme_mouse_bg]#[$tmux_conf_theme_mouse_attr]#{?mouse,$tmux_conf_theme_mouse ,$(printf "$tmux_conf_theme_mouse" | sed -e 's/./ /g') }/g" \
#       -e "s%#{synchronized}%#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{?pane_synchronized,$tmux_conf_theme_synchronized ,}%g" \
#       -e 's%#{circled_session_name}%#(cut -c3- ~/.tmux.conf | sh -s _circled #S)%g')
#
#     if [ -n "$(tmux display -p '#{version}')" ]; then
#       status_left=$(echo "$status_left" | sed \
#         -e "s%#{root}%#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#{?#{==:#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} #D),root},$tmux_conf_theme_root,}#[inherit]%g")
#     else
#       status_left=$(echo "$status_left" | sed \
#         -e "s%#{root}%#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_pid} #{b:pane_tty} $tmux_conf_theme_root #D)#[inherit]%g")
#     fi
#
#     status_left=$(printf '%s' "$status_left" | awk \
#                       -v status_bg="$tmux_conf_theme_status_bg" \
#                       -v fg_="$tmux_conf_theme_status_left_fg" \
#                       -v bg_="$tmux_conf_theme_status_left_bg" \
#                       -v attr_="$tmux_conf_theme_status_left_attr" \
#                       -v mainsep="$tmux_conf_theme_left_separator_main" \
#                       -v subsep="$tmux_conf_theme_left_separator_sub" '
#       function subsplit(s, l, i, a, r)
#       {
#         l = split(s, a, ",")
#         for (i = 1; i <= l; ++i)
#         {
#           o = split(a[i], _, "(") - 1
#           c = split(a[i], _, ")") - 1
#           open += o - c
#           o_ = split(a[i], _, "{") - 1
#           c_ = split(a[i], _, "}") - 1
#           open_ += o_ - c_
#           o__ = split(a[i], _, "[") - 1
#           c__ = split(a[i], _, "]") - 1
#           open__ += o__ - c__
#
#           if (i == l)
#             r = sprintf("%s%s", r, a[i])
#           else if (open || open_ || open__)
#             r = sprintf("%s%s,", r, a[i])
#           else
#             r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#         }
#
#         gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#         return r
#       }
#       BEGIN {
#         FS = "|"
#         l1 = split(fg_, fg, ",")
#         l2 = split(bg_, bg, ",")
#         l3 = split(attr_, attr, ",")
#         l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#       }
#       {
#         for (i = j = 1; i <= NF; ++i)
#         {
#           if (open || open_ || open__)
#             printf "|%s", subsplit($i)
#           else
#           {
#             if (i > 1)
#               printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j_], bg[j], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#             else
#               printf "#[fg=%s,bg=%s,%s]%s", fg[j], bg[j], attr[j], subsplit($i)
#           }
#
#           if (!open && !open_ && !open__)
#           {
#             j_ = j
#             j = j % l + 1
#           }
#         }
#         printf "#[fg=%s,bg=%s,none]%s", bg[j_], status_bg, mainsep
#       }')
#   fi
#
#   status_left="$status_left "
#
#   # -- status-right style
#
#   tmux_conf_theme_status_right=${tmux_conf_theme_status_right-' #{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_status, #{battery_status},}#{?battery_bar, #{battery_bar},}#{?battery_percentage, #{battery_percentage},} , %R , %d %b | #{username}#{root} | #{hostname} '}
#   tmux_conf_theme_status_right_fg=${tmux_conf_theme_status_right_fg:-$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14}
#   tmux_conf_theme_status_right_bg=${tmux_conf_theme_status_right_bg:-$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17}
#   tmux_conf_theme_status_right_attr=${tmux_conf_theme_status_right_attr:-none,none,bold}
#
#   if [ -n "$tmux_conf_theme_status_right" ]; then
#     status_right=$(echo "$tmux_conf_theme_status_right" | sed \
#       -e "s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{?session_many_attached,$tmux_conf_theme_pairing ,}/g" \
#       -e "s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{?client_prefix,$tmux_conf_theme_prefix ,$(printf "$tmux_conf_theme_prefix" | sed -e 's/./ /g') }/g" \
#       -e "s/#{mouse}/#[fg=$tmux_conf_theme_mouse_fg]#[bg=$tmux_conf_theme_mouse_bg]#[$tmux_conf_theme_mouse_attr]#{?mouse,$tmux_conf_theme_mouse ,$(printf "$tmux_conf_theme_mouse" | sed -e 's/./ /g') }/g" \
#       -e "s%#{synchronized}%#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{?pane_synchronized,$tmux_conf_theme_synchronized ,}%g" \
#       -e 's%#{circled_session_name}%#(cut -c3- ~/.tmux.conf | sh -s _circled #S)%g')
#
#     if [ -z "$(tmux display -p '#{version}')" ]; then
#       status_right=$(echo "$status_right" | sed \
#         -e "s%#{root}%#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#{?#{==:#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} #D),root},$tmux_conf_theme_root,}#[inherit]%g")
#     else
#       status_right=$(echo "$status_right" | sed \
#         -e "s%#{root}%#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_pid} #{b:pane_tty} $tmux_conf_theme_root #D)#[inherit]%g")
#     fi
#
#     status_right=$(printf '%s' "$status_right" | awk \
#                       -v status_bg="$tmux_conf_theme_status_bg" \
#                       -v fg_="$tmux_conf_theme_status_right_fg" \
#                       -v bg_="$tmux_conf_theme_status_right_bg" \
#                       -v attr_="$tmux_conf_theme_status_right_attr" \
#                       -v mainsep="$tmux_conf_theme_right_separator_main" \
#                       -v subsep="$tmux_conf_theme_right_separator_sub" '
#       function subsplit(s, l, i, a, r)
#       {
#         l = split(s, a, ",")
#         for (i = 1; i <= l; ++i)
#         {
#           o = split(a[i], _, "(") - 1
#           c = split(a[i], _, ")") - 1
#           open += o - c
#           o_ = split(a[i], _, "{") - 1
#           c_ = split(a[i], _, "}") - 1
#           open_ += o_ - c_
#           o__ = split(a[i], _, "[") - 1
#           c__ = split(a[i], _, "]") - 1
#           open__ += o__ - c__
#
#           if (i == l)
#             r = sprintf("%s%s", r, a[i])
#           else if (open || open_ || open__)
#             r = sprintf("%s%s,", r, a[i])
#           else
#             r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#         }
#
#         gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#         return r
#       }
#       BEGIN {
#         FS = "|"
#         l1 = split(fg_, fg, ",")
#         l2 = split(bg_, bg, ",")
#         l3 = split(attr_, attr, ",")
#         l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#       }
#       {
#         for (i = j = 1; i <= NF; ++i)
#         {
#           if (open_ || open || open__)
#             printf "|%s", subsplit($i)
#           else
#             printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j], (i == 1) ? status_bg : bg[j_], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#
#           if (!open && !open_ && !open__)
#           {
#             j_ = j
#             j = j % l + 1
#           }
#         }
#       }')
#   fi
#
#   # -- variables
#
#   tmux_conf_battery_bar_symbol_full=$(_decode_unicode_escapes "${tmux_conf_battery_bar_symbol_full:-◼}")
#   tmux_conf_battery_bar_symbol_empty=$(_decode_unicode_escapes "${tmux_conf_battery_bar_symbol_empty:-◻}")
#   tmux_conf_battery_bar_length=${tmux_conf_battery_bar_length:-auto}
#   tmux_conf_battery_bar_palette=${tmux_conf_battery_bar_palette:-gradient}
#   tmux_conf_battery_hbar_palette=${tmux_conf_battery_hbar_palette:-gradient}
#   tmux_conf_battery_vbar_palette=${tmux_conf_battery_vbar_palette:-gradient}
#   tmux_conf_battery_status_charging=$(_decode_unicode_escapes "${tmux_conf_battery_status_charging:-↑}")        # U+2191
#   tmux_conf_battery_status_discharging=$(_decode_unicode_escapes "${tmux_conf_battery_status_discharging:-↓}")  # U+2193
#
#   _pkillf 'cut -c3- ~/\.tmux\.conf \| sh -s _battery_bar'
#   _battery_info
#   if [ "$charge" != 0 ]; then
#     case "$status_left $status_right" in
#       *'#{battery_'*|*'#{?battery_'*)
#         status_left=$(echo "$status_left" | sed -E \
#           -e 's/#\{(\?)?battery_bar/#\{\1@battery_bar/g' \
#           -e 's/#\{(\?)?battery_hbar/#\{\1@battery_hbar/g' \
#           -e 's/#\{(\?)?battery_vbar/#\{\1@battery_vbar/g' \
#           -e 's/#\{(\?)?battery_status/#\{\1@battery_status/g' \
#           -e 's/#\{(\?)?battery_percentage/#\{\1@battery_percentage/g')
#         status_right=$(echo "$status_right" | sed -E \
#           -e 's/#\{(\?)?battery_bar/#\{\1@battery_bar/g' \
#           -e 's/#\{(\?)?battery_hbar/#\{\1@battery_hbar/g' \
#           -e 's/#\{(\?)?battery_vbar/#\{\1@battery_vbar/g' \
#           -e 's/#\{(\?)?battery_status/#\{\1@battery_status/g' \
#           -e 's/#\{(\?)?battery_percentage/#\{\1@battery_percentage/g')
#         status_right="#(echo; nice cut -c3- ~/.tmux.conf | sh -s _battery_status \"$tmux_conf_battery_status_charging\" \"$tmux_conf_battery_status_discharging\")$status_right"
#         interval=60
#         if [ $_tmux_version -ge 320 ]; then
#           tmux run -b "trap '[ -n \"\$sleep_pid\" ] && kill -9 \$sleep_pid; exit 0' TERM; while [ x\"\$(tmux -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- ~/.tmux.conf | sh -s _battery_bar \"$tmux_conf_battery_bar_symbol_full\" \"$tmux_conf_battery_bar_symbol_empty\" \"$tmux_conf_battery_bar_length\" \"$tmux_conf_battery_bar_palette\" \"$tmux_conf_battery_hbar_palette\" \"$tmux_conf_battery_vbar_palette\"; sleep $interval & sleep_pid=\$!; wait \$sleep_pid; sleep_pid=; done"
#         elif [ $_tmux_version -ge 280 ]; then
#           status_right="#(echo; while [ x\"\$(tmux -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- ~/.tmux.conf | sh -s _battery_bar \"$tmux_conf_battery_bar_symbol_full\" \"$tmux_conf_battery_bar_symbol_empty\" \"$tmux_conf_battery_bar_length\" \"$tmux_conf_battery_bar_palette\" \"$tmux_conf_battery_hbar_palette\" \"$tmux_conf_battery_vbar_palette\"; sleep $interval; done)$status_right"
#         elif [ $_tmux_version -gt 240 ]; then
#           status_right="#(echo; while :; do nice cut -c3- ~/.tmux.conf | sh -s _battery_bar \"$tmux_conf_battery_bar_symbol_full\" \"$tmux_conf_battery_bar_symbol_empty\" \"$tmux_conf_battery_bar_length\" \"$tmux_conf_battery_bar_palette\" \"$tmux_conf_battery_hbar_palette\" \"$tmux_conf_battery_vbar_palette\"; sleep $interval; done)$status_right"
#         else
#           status_right="#(nice cut -c3- ~/.tmux.conf | sh -s _battery_bar \"$tmux_conf_battery_bar_symbol_full\" \"$tmux_conf_battery_bar_symbol_empty\" \"$tmux_conf_battery_bar_length\" \"$tmux_conf_battery_bar_palette\" \"$tmux_conf_battery_hbar_palette\" \"$tmux_conf_battery_vbar_palette\")$status_right"
#         fi
#         ;;
#     esac
#   fi
#
#   case "$status_left $status_right" in
#     *'#{username}'*|*'#{hostname}'*|*'#{hostname_full}'*|*'#{username_ssh}'*|*'#{hostname_ssh}'*|*'#{hostname_full_ssh}'*)
#       status_left=$(echo "$status_left" | sed \
#         -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} false #D)%g' \
#         -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false false #h #D)%g' \
#         -e 's%#{hostname_full}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false true #H #D)%g' \
#         -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} true #D)%g' \
#         -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true false #h #D)%g' \
#         -e 's%#{hostname_full_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true true #H #D)%g')
#       status_right=$(echo "$status_right" | sed \
#         -e 's%#{username}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} false #D)%g' \
#         -e 's%#{hostname}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false false #h #D)%g' \
#         -e 's%#{hostname_full}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} false true #H #D)%g' \
#         -e 's%#{username_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_pid} #{b:pane_tty} true #D)%g' \
#         -e 's%#{hostname_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true false #h #D)%g' \
#         -e 's%#{hostname_full_ssh}%#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_pid} #{b:pane_tty} true true #H #D)%g')
#       ;;
#   esac
#
#   _pkillf 'cut -c3- ~/\.tmux\.conf \| sh -s _uptime'
#   case "$status_left $status_right" in
#     *'#{uptime_'*|*'#{?uptime_'*)
#       status_left=$(echo "$status_left" | perl -p -e '
#         ; s/#\{(\?)?uptime_y\b/#\{\1\@uptime_y/g
#         ; s/#\{(\?)?uptime_d\b/#\{\1\@uptime_d/g
#         ; s/\@uptime_d\b/\@uptime_dy/g if /\@uptime_y\b/
#         ; s/#\{(\?)?uptime_h\b/#\{\1\@uptime_h/g
#         ; s/#\{(\?)?uptime_m\b/#\{\1\@uptime_m/g
#         ; s/#\{(\?)?uptime_s\b/#\{\1\@uptime_s/g')
#       status_right=$(echo "$status_right" | perl -p -e '
#         ; s/#\{(\?)?uptime_y\b/#\{\1\@uptime_y/g
#         ; s/#\{(\?)?uptime_d\b/#\{\1\@uptime_d/g
#         ; s/\@uptime_d\b/\@uptime_dy/g if /\@uptime_y\b/
#         ; s/#\{(\?)?uptime_h\b/#\{\1\@uptime_h/g
#         ; s/#\{(\?)?uptime_m\b/#\{\1\@uptime_m/g
#         ; s/#\{(\?)?uptime_s\b/#\{\1\@uptime_s/g')
#       interval=60
#       case "$status_left $status_right" in
#         *'#{@uptime_s}'*)
#           interval=$(tmux show -gv status-interval)
#           ;;
#       esac
#       if [ $_tmux_version -ge 320 ]; then
#         tmux run -b "trap '[ -n \"\$sleep_pid\" ] && kill -9 \$sleep_pid; exit 0' TERM; while [ x\"\$(tmux -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- ~/.tmux.conf | sh -s _uptime; sleep $interval & sleep_pid=\$!; wait \$sleep_pid; sleep_pid=; done"
#       elif [ $_tmux_version -gt 280 ]; then
#         status_right="#(echo; while [ x\"\$(tmux -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- ~/.tmux.conf | sh -s _uptime; sleep $interval; done)$status_right"
#       elif [ $_tmux_version -gt 240 ]; then
#         status_right="#(echo; while :; do nice cut -c3- ~/.tmux.conf | sh -s _uptime; sleep $interval; done)$status_right"
#       else
#         status_right="#(nice cut -c3- ~/.tmux.conf | sh -s _uptime)$status_right"
#       fi
#       ;;
#   esac
#
#   _pkillf 'cut -c3- ~/\.tmux\.conf \| sh -s _loadavg'
#   case "$status_left $status_right" in
#     *'#{loadavg'*|*'#{?loadavg'*)
#       status_left=$(echo "$status_left" | sed -E \
#         -e 's/#\{(\?)?loadavg/#\{\1@loadavg/g')
#       status_right=$(echo "$status_right" | sed -E \
#         -e 's/#\{(\?)?loadavg/#\{\1@loadavg/g')
#       interval=$(tmux show -gv status-interval)
#       if [ $_tmux_version -ge 320 ]; then
#         tmux run -b "trap '[ -n \"\$sleep_pid\" ] && kill -9 \$sleep_pid; exit 0' TERM; while [ x\"\$(tmux -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- ~/.tmux.conf | sh -s _loadavg; sleep $interval & sleep_pid=\$!; wait \$sleep_pid; sleep_pid=; done"
#       elif [ $_tmux_version -gt 280 ]; then
#         status_right="#(echo; while [ x\"\$(tmux -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- ~/.tmux.conf | sh -s _loadavg; sleep $interval; done)$status_right"
#       elif [ $_tmux_version -gt 240 ]; then
#         status_right="#(echo; while :; do nice cut -c3- ~/.tmux.conf | sh -s _loadavg; sleep $interval; done)$status_right"
#       else
#         status_right="#(nice cut -c3- ~/.tmux.conf | sh -s _loadavg)$status_right"
#       fi
#       ;;
#   esac
#
#   # -- clock -------------------------------------------------------------
#
#   tmux_conf_theme_clock_colour=${tmux_conf_theme_clock_colour:-$tmux_conf_theme_colour_4}
#   tmux_conf_theme_clock_style=${tmux_conf_theme_clock_style:-24}
#
#   # -- custom variables ---------------------------------------------------
#
#   if [ -f ~/.tmux.conf.settings ] && [ x"$(cut -c3- ~/.tmux.conf.settings | sh 2>/dev/null -s printf probe)" = x"probe" ]; then
#     replacements=$(perl -n -e 'print if s!^#\s+([^_][^()\s]+)\s*\(\)\s*{\s*\n!s%#\\\{\1((?:\\s+(?:[^\{\}]+?|#\\{(?:[^\{\}]+?)\}))*)\\\}%#(cut -c3- ~/.tmux.conf.settings | sh -s \1\\1)%g; !p' < ~/.tmux.conf.settings)
#     status_left=$(echo "$status_left" | perl -p -e "$replacements" || echo "$status_left")
#     status_right=$(echo "$status_right" | perl -p -e "$replacements" || echo "$status_right")
#   fi
#
#   # -----------------------------------------------------------------------
#
#   tmux setw -g window-style "$window_style" \; setw -g window-active-style "$window_active_style" \;\
#        setw -g pane-border-style "fg=$tmux_conf_theme_pane_border_fg,bg=$tmux_conf_theme_pane_border_bg" \; set -g pane-active-border-style "fg=$tmux_conf_theme_pane_active_border_fg,bg=$tmux_conf_theme_pane_active_border_bg" \;\
#        set -g display-panes-colour "$tmux_conf_theme_pane_indicator" \; set -g display-panes-active-colour "$tmux_conf_theme_pane_active_indicator" \;\
#        set -g message-style "fg=$tmux_conf_theme_message_fg,bg=$tmux_conf_theme_message_bg,$tmux_conf_theme_message_attr" \;\
#        set -g message-command-style "fg=$tmux_conf_theme_message_command_fg,bg=$tmux_conf_theme_message_command_bg,$tmux_conf_theme_message_command_attr" \;\
#        setw -g mode-style "fg=$tmux_conf_theme_mode_fg,bg=$tmux_conf_theme_mode_bg,$tmux_conf_theme_mode_attr" \;\
#        set -g status-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr"        \;\
#        set -g status-left-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr"   \;\
#        set -g status-right-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr" \;\
#        set -g set-titles-string "$(_decode_unicode_escapes "$tmux_conf_theme_terminal_title")" \;\
#        setw -g window-status-style "fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr" \;\
#        setw -g window-status-format "$(_decode_unicode_escapes "$tmux_conf_theme_window_status_format")" \;\
#        setw -g window-status-current-style "fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr" \;\
#        setw -g window-status-current-format "$(_decode_unicode_escapes "$tmux_conf_theme_window_status_current_format")" \;\
#        setw -g window-status-activity-style "fg=$tmux_conf_theme_window_status_activity_fg,bg=$tmux_conf_theme_window_status_activity_bg,$tmux_conf_theme_window_status_activity_attr" \;\
#        setw -g window-status-bell-style "fg=$tmux_conf_theme_window_status_bell_fg,bg=$tmux_conf_theme_window_status_bell_bg,$tmux_conf_theme_window_status_bell_attr" \;\
#        setw -g window-status-last-style "fg=$tmux_conf_theme_window_status_last_fg,bg=$tmux_conf_theme_window_status_last_bg,$tmux_conf_theme_window_status_last_attr" \;\
#        setw -g window-status-separator "$window_status_separator" \;\
#        set -g status-left-length 1000 \; set -g status-left "$(_decode_unicode_escapes "$status_left")" \;\
#        set -g status-right-length 1000 \; set -g status-right "$(_decode_unicode_escapes "$status_right")" \;\
#        setw -g clock-mode-colour "$tmux_conf_theme_clock_colour" \;\
#        setw -g clock-mode-style "$tmux_conf_theme_clock_style"
# }
#
# __apply_plugins() {
#   window_active="$1"
#   tmux_conf_update_plugins_on_launch="$2"
#   tmux_conf_update_plugins_on_reload="$3"
#   tmux_conf_uninstall_plugins_on_reload="$4"
#
#   TMUX_PLUGIN_MANAGER_PATH=${TMUX_PLUGIN_MANAGER_PATH:-~/.tmux/plugins}
#   if [ -z "$(tmux show -gv '@plugin')" ] && [ -z "$(tmux show -gv '@tpm_plugins')" ]; then
#     if _is_enabled "$tmux_conf_uninstall_plugins_on_reload" && [ -d "$TMUX_PLUGIN_MANAGER_PATH/tpm" ]; then
#       tmux display 'Uninstalling tpm and plugins...'
#       rm -rf "$TMUX_PLUGIN_MANAGER_PATH"
#       tmux display 'Done uninstalling tpm and plugins...'
#     fi
#   else
#     if git ls-remote -hq https://github.com/gpakosz/.tmux.git master > /dev/null; then
#       if [ ! -d "$TMUX_PLUGIN_MANAGER_PATH/tpm" ]; then
#         install_tpm=true
#         tmux display 'Installing tpm and plugins...'
#         git clone --depth 1 https://github.com/tmux-plugins/tpm "$TMUX_PLUGIN_MANAGER_PATH/tpm"
#       elif { [ -z "$window_active" ] && _is_enabled "$tmux_conf_update_plugins_on_launch"; } || { [ -n "$window_active" ] && _is_enabled "$tmux_conf_update_plugins_on_reload"; }; then
#         update_tpm=true
#         tmux display 'Updating tpm and plugins...'
#         (cd "$TMUX_PLUGIN_MANAGER_PATH/tpm" && git fetch -q -p && git checkout -q master && git reset -q --hard origin/master)
#       fi
#       if [ x"$install_tpm" = x"true" ] || [ x"$update_tpm" = x"true" ]; then
#         perl -0777 -p -i -e 's/git clone(?!\s+--depth\s+1)/git clone --depth 1/g
#                             ;s/(install_plugin(.(?!&))*)\n(\s+)done/\1&\n\3done\n\3wait/g' "$TMUX_PLUGIN_MANAGER_PATH/tpm/scripts/install_plugins.sh"
#         perl -p -i -e 's/git submodule update --init --recursive(?!\s+--depth\s+1)/git submodule update --init --recursive --depth 1/g' "$TMUX_PLUGIN_MANAGER_PATH/tpm/scripts/update_plugin.sh"
#         perl -p -i -e 's,\$tmux_file\s+>/dev/null\s+2>\&1,$& || { tmux display "Plugin \$(basename \${plugin_path}) failed" && false; },' "$TMUX_PLUGIN_MANAGER_PATH/tpm/scripts/source_plugins.sh"
#         tmux set-environment -g TMUX_PLUGIN_MANAGER_PATH "$TMUX_PLUGIN_MANAGER_PATH"
#       fi
#       if [ x"$update_tpm" = x"true" ]; then
#         {
#           echo "Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins ..." > "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1 && \
#           "$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins" >> "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1     &&\
#           echo "Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/update_plugins all ..." > "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1 && \
#           "$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/update_plugins" all >> "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1  &&\
#           echo "Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/clean_plugins all ..." > "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1 && \
#           "$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/clean_plugins" all >> "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1   &&\
#           tmux display 'Done updating tpm and plugins...'
#         } || tmux display 'Failed updating tpm and plugins...'
#       elif [ x"$install_tpm" = x"true" ]; then
#         {
#           echo "Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins ..." > "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1 && \
#           "$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins" >> "$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt" 2>&1
#           tmux display 'Done installing tpm and plugins...'
#         } || tmux display 'Failed installing tpm and plugins...'
#       fi
#     else
#       tmux display "GitHub doesn't seem to be reachable, skipping installing and/or updating tpm and plugins..."
#     fi
#
#     [ -z "$(tmux show -gqv '@tpm-install')" ] && tmux set -g '@tpm-install' 'I'
#     [ -z "$(tmux show -gqv '@tpm-update')" ] && tmux set -g '@tpm-update' 'u'
#     [ -z "$(tmux show -gqv '@tpm-clean')" ] && tmux set -g '@tpm-clean' 'M-u'
#     [ -f "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm" ] && "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm" || tmux display "One or more tpm plugin(s) failed"
#     if [ $_tmux_version -gt 260 ]; then
#       tmux set -gu '@tpm-install' \; set -gu '@tpm-update' \; set -gu '@tpm-clean' \; set -gu '@plugin'
#     fi
#   fi
#
#   if [ -z "$window_active" ] && [ $_tmux_version -lt 240 ]; then
#     tmux run -b "sleep $(expr $(tmux display -p '#{display-time}') / 500) && tmux set display-time 3000 \; display 'This configuration will soon require tmux 2.4+' \; set -u display-time"
#   fi
# }
#
# _apply_plugins() {
#   tmux_conf_update_plugins_on_launch=${tmux_conf_update_plugins_on_launch:-true}
#   tmux_conf_update_plugins_on_reload=${tmux_conf_update_plugins_on_reload:-true}
#   tmux_conf_uninstall_plugins_on_reload=${tmux_conf_uninstall_plugins_on_reload:-true}
#   tmux run -b "cut -c3- ~/.tmux.conf | sh -s __apply_plugins \"$window_active\" \"$tmux_conf_update_plugins_on_launch\" \"$tmux_conf_update_plugins_on_reload\" \"$tmux_conf_uninstall_plugins_on_reload\""
# }
#
# _apply_configuration() {
#
#   window_active="$(tmux display -p '#{window_active}' 2>/dev/null || true)"
#   if [ -z "$window_active" ]; then
#     if ! command -v perl > /dev/null 2>&1; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires perl" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#     if ! command -v sed > /dev/null 2>&1; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires sed" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#     if ! command -v awk > /dev/null 2>&1; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires awk" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#     if [ $_tmux_version -lt 230 ]; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires tmux 2.3+" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#   fi
#
#   # see https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
#   if command -v reattach-to-user-namespace > /dev/null 2>&1; then
#     default_shell="$(tmux show -gv default-shell)"
#     case "$default_shell" in
#       *fish)
#         tmux set -g default-command "reattach-to-user-namespace -l $default_shell"
#         ;;
#       *sh)
#         tmux set -g default-command "exec $default_shell... 2> /dev/null & reattach-to-user-namespace -l $default_shell"
#         ;;
#     esac
#   fi
#
#   case "$_uname_s" in
#     *CYGWIN*|*MSYS*)
#       # prevent Cygwin and MSYS2 from cd-ing into home directory when evaluating /etc/profile
#       tmux setenv -g CHERE_INVOKING 1
#       ;;
#   esac
#
#   _apply_overrides
#   _apply_theme&
#   _apply_bindings&
#
#   # shellcheck disable=SC2046
#   tmux setenv -gu tmux_conf_dummy $(printenv | grep -E -o '^tmux_conf_[^=]+' | awk '{printf "; setenv -gu %s", $0}')
#   wait
#
#   _apply_plugins
# }
#
# _urlview() {
#   tmux capture-pane -J -S - -E - -b "urlview-$1" -t "$1"
#   tmux split-window "tmux show-buffer -b urlview-$1 | urlview || true; tmux delete-buffer -b urlview-$1"
# }
#
# _fpp() {
#   tmux capture-pane -J -S - -E - -b "fpp-$1" -t "$1"
#   tmux split-window "tmux show-buffer -b fpp-$1 | fpp || true; tmux delete-buffer -b fpp-$1"
# }
#
# "$@"



================================================
FILE: dot_tmux.conf.settings
================================================
# : << EOF
# https://github.com/gpakosz/.tmux
# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license,
#         without any warranty.
#         Copyright 2012— Gregory Pakosz (@gpakosz).


# -- navigation ----------------------------------------------------------------

# if you're running tmux within iTerm2
#   - and tmux is 1.9 or 1.9a
#   - and iTerm2 is configured to let option key act as +Esc
#   - and iTerm2 is configured to send [1;9A -> [1;9D for option + arrow keys
# then uncomment the following line to make Meta + arrow keys mapping work
#set -ga terminal-overrides "*:kUP3=\e[1;9A,*:kDN3=\e[1;9B,*:kRIT3=\e[1;9C,*:kLFT3=\e[1;9D"


# -- windows & pane creation ---------------------------------------------------

# new window retains current path, possible values are:
#   - true
#   - false (default)
tmux_conf_new_window_retain_current_path=false

# new pane retains current path, possible values are:
#   - true (default)
#   - false
tmux_conf_new_pane_retain_current_path=true

# new pane tries to reconnect ssh sessions (experimental), possible values are:
#   - true
#   - false (default)
tmux_conf_new_pane_reconnect_ssh=false

# prompt for session name when creating a new session, possible values are:
#   - true
#   - false (default)
tmux_conf_new_session_prompt=true


# -- display -------------------------------------------------------------------

# RGB 24-bit colour support (tmux >= 2.2), possible values are:
#  - true
#  - false (default)
tmux_conf_24b_colour=true

# onedark
# custom_black="#1e2127"
# custom_white="#abb2bf"
# custom_red="#be5046"
# custom_green="#98c379"
# custom_yellow="#e5c07b"
# custom_orange="#d19a66"
# custom_blue="#61afef"
# custom_cyan="#56b6c2"
# custom_purple="#c678dd"
# custom_visual_grey="#3e4452"
# custom_comment_grey="#5c6370"

# gruvbox -- mapping onedark's normal colors
custom_black="#1d2021" #
custom_white="#ebdbb2" #
custom_red="#fb4934" #
custom_green="#fabd2f" #
custom_yellow="#d79921" #
custom_orange="#b8bb26" #
custom_blue="#fe8019" #
custom_cyan="#8ec07c" #
custom_purple="#d3869b" #
custom_visual_grey="#282828" #
custom_comment_grey="#928374"


# material
# custom_black="#2A3236"
# custom_red="#FF5252"
# custom_green="#5CF19E"
# custom_yellow="#FFD740"
# custom_blue="#A7DAF8"
# custom_orange="#F2CD86"
# custom_cyan="#64FCDA"
# custom_white="#EDEFF1"
# custom_visual_grey="#4B5962"
# custom_comment_grey="#546E7A"

# window style
tmux_conf_theme_window_fg="default"
tmux_conf_theme_window_bg="default"

# highlight focused pane (tmux >= 2.1), possible values are:
#   - true
#   - false (default)
tmux_conf_theme_highlight_focused_pane=false

# focused pane colours:
tmux_conf_theme_focused_pane_bg="$custom_visual_grey"

# pane border style, possible values are:
#   - thin (default)
#   - fat
tmux_conf_theme_pane_border_style=thin

# pane borders colours:
tmux_conf_theme_pane_border=$custom_visual_grey
tmux_conf_theme_pane_active_border=$custom_blue


# pane indicator colours (when you hit <prefix> + q)
tmux_conf_theme_pane_indicator=$custom_orange
tmux_conf_theme_pane_active_indicator=$custom_orange

# status line style
tmux_conf_theme_message_fg=$custom_black
tmux_conf_theme_message_bg=$custom_orange
tmux_conf_theme_message_attr="bold"

# status line command style (<prefix> : Escape)
tmux_conf_theme_message_command_fg=$custom_orange
tmux_conf_theme_message_command_bg=$custom_visual_grey
tmux_conf_theme_message_command_attr="bold"

# window modes style
tmux_conf_theme_mode_fg=$custom_black
tmux_conf_theme_mode_bg=$custom_blue
tmux_conf_theme_mode_attr="bold"

# status line style
tmux_conf_theme_status_fg=$custom_comment_grey
tmux_conf_theme_status_bg=$custom_black
tmux_conf_theme_status_attr="none"

# terminal title
#   - built-in variables are:
#     - #{circled_window_index}
#     - #{circled_session_name}
#     - #{hostname}
#     - #{hostname_ssh}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{username}
#     - #{username_ssh}
tmux_conf_theme_terminal_title="#h ❐ #S ● #I #W"

# window status style
#   - built-in variables are:
#     - #{circled_window_index}
#     - #{circled_session_name}
#     - #{hostname}
#     - #{hostname_ssh}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{username}
#     - #{username_ssh}
tmux_conf_theme_window_status_fg=$custom_comment_grey
tmux_conf_theme_window_status_bg=$custom_black
tmux_conf_theme_window_status_attr="none"
#tmux_conf_theme_window_status_format="#I #W"
#tmux_conf_theme_window_status_format="#{circled_window_index} #W"
tmux_conf_theme_window_status_format="#I #W#{?window_bell_flag, 󰂚 ,}#{?window_zoomed_flag, 󰍉 ,}"

# window current status style
#   - built-in variables are:
#     - #{circled_window_index}
#     - #{circled_session_name}
#     - #{hostname}
#     - #{hostname_ssh}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{username}
#     - #{username_ssh}
tmux_conf_theme_window_status_current_fg=$custom_black
tmux_conf_theme_window_status_current_bg=$custom_blue
tmux_conf_theme_window_status_current_attr="bold"
#tmux_conf_theme_window_status_current_format="#I #W"
#tmux_conf_theme_window_status_current_format="#{circled_window_index} #W"
tmux_conf_theme_window_status_current_format="#I #W#{?window_zoomed_flag, 󰍉 ,}"

# window activity status style
tmux_conf_theme_window_status_activity_fg="default"
tmux_conf_theme_window_status_activity_bg="default"
tmux_conf_theme_window_status_activity_attr="underscore"

# window bell status style
tmux_conf_theme_window_status_bell_fg=$custom_blue
tmux_conf_theme_window_status_bell_bg="default"
tmux_conf_theme_window_status_bell_attr="blink,bold"

# window last status style
tmux_conf_theme_window_status_last_fg=$custom_blue
tmux_conf_theme_window_status_last_bg='default'
tmux_conf_theme_window_status_last_attr="none"

# status left/right sections separators
tmux_conf_theme_left_separator_main=""
tmux_conf_theme_left_separator_sub="|"
tmux_conf_theme_right_separator_main=""
tmux_conf_theme_right_separator_sub="|"
#tmux_conf_theme_left_separator_main='\uE0B0'  # /!\ you don't need to install Powerline
#tmux_conf_theme_left_separator_sub='\uE0B1'   #   you only need fonts patched with
#tmux_conf_theme_right_separator_main='\uE0B2' #   Powerline symbols or the standalone
#tmux_conf_theme_right_separator_sub='\uE0B3'  #   PowerlineSymbols.otf font, see README.md

# status left/right content:
#   - separate main sections with "|"
#   - separate subsections with ","
#   - built-in variables are:
#     - #{battery_bar}
#     - #{battery_hbar}
#     - #{battery_percentage}
#     - #{battery_status}
#     - #{battery_vbar}
#     - #{circled_session_name}
#     - #{hostname_ssh}
#     - #{hostname}
#     - #{hostname_full}
#     - #{hostname_full_ssh}
#     - #{loadavg}
#     - #{mouse}
#     - #{pairing}
#     - #{prefix}
#     - #{root}
#     - #{synchronized}
#     - #{uptime_y}
#     - #{uptime_d} (modulo 365 when #{uptime_y} is used)
#     - #{uptime_h}
#     - #{uptime_m}
#     - #{uptime_s}
#     - #{username}
#     - #{username_ssh}
tmux_conf_theme_status_left=" ❐ #S | ⏻#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} "
#tmux_conf_theme_status_right=" #{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_status,#{battery_status},}#{?battery_bar, #{battery_bar},}#{?battery_percentage, #{battery_percentage},} , %R , %d %b | #{username}#{root} | #{hostname} "
tmux_conf_theme_status_right=" #{prefix}#{mouse}#{pairing}#{synchronized}|#[fg=$custom_green]#{tmux_cpu_mem} #{?battery_status,#{battery_status},}#{?battery_bar, #{battery_bar},}#{?battery_percentage, #{battery_percentage},} | #{username}#{root} | #{hostname} #{online} |#{pomodoro_status}#{tmux_mode_indicator}"

# status left style
tmux_conf_theme_status_left_fg=$custom_black','$custom_green','$custom_white
tmux_conf_theme_status_left_bg=$custom_green','$custom_visual_grey','$custom_blue
tmux_conf_theme_status_left_attr="bold,none,none"

# status right style
tmux_conf_theme_status_right_fg=$custom_comment_grey','$custom_white','$custom_black
tmux_conf_theme_status_right_bg=$custom_black','$custom_visual_grey','$custom_white
tmux_conf_theme_status_right_attr="none,none,bold"

# pairing indicator
tmux_conf_theme_pairing="⚇"                 # U+2687
tmux_conf_theme_pairing_fg="none"
tmux_conf_theme_pairing_bg="none"
tmux_conf_theme_pairing_attr="none"

# prefix indicator
tmux_conf_theme_prefix="⌨"                  # U+2328
tmux_conf_theme_prefix_fg="none"
tmux_conf_theme_prefix_bg="none"
tmux_conf_theme_prefix_attr="none"

# mouse indicator
tmux_conf_theme_mouse=""
tmux_conf_theme_mouse_fg="none"
tmux_conf_theme_mouse_bg="none"
tmux_conf_theme_mouse_attr="none"

# root indicator
tmux_conf_theme_root="!"
tmux_conf_theme_root_fg="none"
tmux_conf_theme_root_bg="none"
tmux_conf_theme_root_attr="bold,blink"

# synchronized indicator
tmux_conf_theme_synchronized="⚏"            # U+268F
tmux_conf_theme_synchronized_fg="none"
tmux_conf_theme_synchronized_bg="none"
tmux_conf_theme_synchronized_attr="none"

# battery bar symbols
tmux_conf_battery_bar_symbol_full="◼"
tmux_conf_battery_bar_symbol_empty="◻"

# battery bar length (in number of symbols), possible values are:
#   - auto
#   - a number, e.g. 5
tmux_conf_battery_bar_length="auto"

# battery bar palette, possible values are:
#   - gradient (default)
#   - heat
#   - "colour_full_fg,colour_empty_fg,colour_bg"
tmux_conf_battery_bar_palette="heat"
#tmux_conf_battery_bar_palette="#d70000,#e4e4e4,#000000"   # red, white, black

# battery hbar palette, possible values are:
#   - gradient (default)
#   - heat
#   - "colour_low,colour_half,colour_full"
tmux_conf_battery_hbar_palette="gradient"
#tmux_conf_battery_hbar_palette="#d70000,#ff5f00,#5fff00"  # red, orange, green

# battery vbar palette, possible values are:
#   - gradient (default)
#   - heat
#   - "colour_low,colour_half,colour_full"
tmux_conf_battery_vbar_palette="gradient"
#tmux_conf_battery_vbar_palette="#d70000,#ff5f00,#5fff00"  # red, orange, green

# symbols used to indicate whether battery is charging or discharging
tmux_conf_battery_status_charging="󰂄"
tmux_conf_battery_status_discharging="󰁹"

# clock style (when you hit <prefix> + t)
# you may want to use %I:%M %p in place of %R in tmux_conf_theme_status_right
tmux_conf_theme_clock_colour=$custom_blue
tmux_conf_theme_clock_style="24"


# -- clipboard -----------------------------------------------------------------

# in copy mode, copying selection also copies to the OS clipboard
#   - true
#   - false (default)
# on macOS, this requires installing reattach-to-user-namespace, see README.md
# on Linux, this requires xsel or xclip
tmux_conf_copy_to_os_clipboard=true


# -- user customizations -------------------------------------------------------
# this is the place to override or undo settings

# increase history size
set -g history-limit 100000

# start with mouse mode enabled
set -g mouse on

# force Vi mode
#   really you should export VISUAL or EDITOR environment variable, see manual
set -g status-keys vi
set -g mode-keys vi

# replace C-b by C-a instead of using both prefixes
# set -gu prefix2
# unbind C-a
# unbind C-b
# set -g prefix C-a
# bind C-a send-prefix

# move status line to top
#set -g status-position top

# bind C-w to choose a window from the list (in addition to binding w)
bind C-w choose-session

set -g pane-border-status top
set -g pane-border-format "#{pane_index} #{?pane_title, | #{pane_title},}"

set-hook -g 'client-attached[0]' 'run "tmux setenv -u tmux_cpu_status_init"'
set-hook -g 'client-detached[0]' 'run "tmux setenv -u tmux_cpu_status_init"'

set-hook -g 'client-attached[1]' 'display-message "CodeRabbit tmux: Welcome back ${USER}."'
set-hook -g 'session-created[0]' 'display-message "CodeRabbit tmux: Welcome ${USER}."'

# Use run-shell to run uuidgen command and store result in uuid variable
run-shell "tmux setenv -g TMUX_UUID $(uuidgen)"

set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERMINAL SET_TERMINAL_COLORS ITERM_SESSION_ID TERM_SESSION_ID"

# -- tpm -----------------------------------------------------------------------

# while I don't use tpm myself, many people requested official support so here
# is a seamless integration that automatically installs plugins in parallel

# whenever a plugin introduces a variable to be used in 'status-left' or
# 'status-right', you can use it in 'tmux_conf_theme_status_left' and
# 'tmux_conf_theme_status_right' variables.

# by default, launching tmux will update tpm and all plugins
#   - true (default)
#   - false
tmux_conf_update_plugins_on_launch=true

# by default, reloading the configuration will update tpm and all plugins
#   - true (default)
#   - false
tmux_conf_update_plugins_on_reload=true

# by default, reloading the configuration will uninstall tpm and plugins when no
# plugins are enabled
#   - true (default)
#   - false
tmux_conf_uninstall_plugins_on_reload=true

# /!\ the tpm bindings differ slightly from upstream:
#   - installing plugins: <prefix> + I
#   - uninstalling plugins: <prefix> + Alt + u
#   - updating plugins: <prefix> + u

# /!\ do not add set -g @plugin 'tmux-plugins/tpm'
# /!\ do not add run '~/.tmux/plugins/tpm/tpm'

# to enable a plugin, use the 'set -g @plugin' syntax:
# visit https://github.com/tmux-plugins for available plugins

# this is not working
# set -g @plugin 'ofirgall/tmux-window-name'
# set -g @tmux_window_name_shells "['zsh', 'bash', 'sh']"
# set -g @tmux_window_dir_programs "['nvim', 'vim', 'vi', 'git']"
# set -g @tmux_window_max_name_len "20"

set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'


# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'
# set -g @continuum-save-interval '5'
# set -g @continuum-boot 'on'
# if-shell "uname | grep -q Darwin" "set -g @continuum-boot-options 'iterm'"

set -g @plugin 'jaclu/tmux-menus'
set -g @menus_trigger 'F12'
set -g @menus_without_prefix 1

set -g @plugin 'MunifTanjim/tmux-suspend'
set -g @suspend_key 'F1'

set -g @plugin 'MunifTanjim/tmux-mode-indicator'
# style values for prefix prompt
set -g @mode_indicator_prefix_mode_style "bg=$custom_blue,fg=$custom_black"
# style values for copy prompt
set -g @mode_indicator_copy_mode_style "bg=$custom_yellow,fg=$custom_black"
# style values for sync prompt
set -g @mode_indicator_sync_mode_style "bg=$custom_red,fg=$custom_black"
# style values for empty prompt
set -g @mode_indicator_empty_mode_style "bg=$custom_cyan,fg=$custom_black"

set -g @plugin 'sainnhe/tmux-fzf'
TMUX_FZF_LAUNCH_KEY="C-Space"
TMUX_FZF_OPTIONS="-p 66%,66%"
TMUX_FZF_ORDER="menu|session|window|pane|command|keybinding|clipboard|process"

set -g @plugin 'roosta/tmux-fuzzback'
set -g @fuzzback-bind C-_
set -g @fuzzback-popup 1
set -g @fuzzback-popup-size '90%'

set -g @plugin 'olimorris/tmux-pomodoro-plus'
# Options
set -g @pomodoro_start 't'                          # Start a Pomodoro with tmux-prefix + t
set -g @pomodoro_cancel 'T'                         # Cancel a Pomodoro with tmux-prefix key + T
set -g @pomodoro_mins 25                            # The duration of the pomodoro
set -g @pomodoro_break_mins 5                       # The duration of the break after the pomodoro
set -g @pomodoro_on "#[fg=$custom_red,bg=$custom_black] "           # The formatted output when the pomodoro is running
set -g @pomodoro_complete "#[fg=$custom_cyan,bg=$custom_black,blink] "   # The formatted output when the break is running
set -g @pomodoro_notifications 'on'                 # Turn on/off desktop notifications
set -g @pomodoro_sound 'Pop'                        # Sound for desktop notifications (Run `ls /System/Library/Sounds` for a list of sounds to use)

set -g @plugin 'wfxr/tmux-fzf-url'
set -g @fzf-url-history-limit '20000'
# open tmux-fzf-url in a tmux v3.2+ popup
set -g @fzf-url-fzf-options '-w 80% -h 80% --multi -0 --no-preview --no-border'

# -- tmux-menu -----------------------------------------------------------------

TMUX_FZF_MENU=\
" Pomodoro Timer\n~/.tmux/plugins/tmux-pomodoro-plus/scripts/pomodoro.sh toggle\n"\
" Git Add\nwin_split 'forgit::add'\n"\
" Git Reset Head\nwin_split 'forgit::reset::head'\n"\
" Git Log\nwin_split 'forgit::log'\n"\
" Git Diff\nwin_split 'forgit::diff'\n"\
" Git Checkout File\nwin_split 'forgit::checkout::file'\n"\
" Git Checkout Branch\nwin_split 'forgit::checkout::branch'\n"\
" Git Checkout Commit\nwin_split 'forgit::checkout::commit'\n"\
" Git Branch Delete\nwin_split 'forgit::branch::delete'\n"\
" Git Revert Commit\nwin_split 'forgit::revert::commit'\n"\
" Git Checkout Tag\nwin_split 'forgit::checkout::tag'\n"\
" Git Clean\nwin_split 'forgit::clean'\n"\
" Git Stash Show\nwin_split 'forgit::stash::show'\n"\
" Git Cherry Pick\nwin_split 'forgit::cherry::pick::from::branch'\n"\
" Git Rebase\nwin_split 'forgit::rebase'\n"\
" Git Fixup\nwin_split 'forgit::fixup'\n"\
" Git Repo Statistics & Summary (onefetch)\n\"win_split -a -h 'spinner -c onefetch --no-bots --number-of-authors=10'\"\n"\
"󱓞 Git Ship: Add -> Commit(retry) -> Pull -> Push\n\"win_split -a -h 'git_ship'\"\n"\
" Sync CodeRabbit Repos\n\"win_split -a 'sync_coderabbitai.sh'\"\n"\
" Sync FluxNinja Repos\n\"win_split -a 'sync_fluxninja.sh'\"\n"\
"󰊤 GitHub Status\n\"win_split -a 'gh status --org coderabbitai'\"\n"\
"󰊤 GitHub Dashboard\n\"win_split -a 'gh dash'\"\n"\
" Docker TUI (lazydocker)\nwin_split 'lazydocker'\n"\
" Kubernetes TUI (k9s)\nwin_split 'k9s'\n"\
" Directory Navigator (broot)\nwin_split -b -h 'br'\n"\
"󰋖 Cheatsheets Browser (navi)\nwin_split 'navi'\n"\
"󰋖 Man Pages Browser (batman)\nwin_split 'batman'\n"\
"ﮮ Autoupdate Dotfiles Environment\nwin_split -a 'autoupdate.zsh --force'\n"\
"󱂬 Start Personal Dotfiles Editing Session (join in a new terminal)\nsmug start dotfiles-personal\n"\
"󱂬 Start CodeRabbit Dotfiles Editing Session (join in a new terminal)\nsmug start dotfiles\n"\
"󰖙 Weather\nwin_split 'spinner -w 600 -c wttr.sh'\n"\
" San Francisco (SF) Clock\n\"win_split -t 'San Francisco' 'TZ=America/Los_Angeles tty-clock -s -t'\"\n"\
" India Clock\n\"win_split -t 'India' 'TZ=Asia/Calcutta tty-clock -s -t'\"\n"\
" What is my IP address? (ifconfig.es)\n\"win_split 'curlie -sL ifconfig.es/all | bat --paging=always --color=always --language=yaml'\"\n"\
"󰓅 Internet Speedtest\n\"win_split -a 'speedtest'\"\n"\
" Activity Monitor\nwin_split 'btm'\n"\
"󰋊 Disk Free\nwin_split -a 'spinner -c dust'\n"\
"󰋊 Disk Usage\nwin_split -a 'spinner -c duf'\n"\
" Show Color Palette\nwin_split -h -a 'msgcat --color=test'\n"\
" Zsh History Stats\nwin_split -h -a 'zsh_stats'\n"\
" Explain Prompt\nwin_split -h -a 'explain_prompt'\n"\
" tmux Useful Bindings\nwin_split -h -a 'tmux_bindings'\n"\
" Zsh Completions List\nwin_split -a 'zinit completions'\n"\
" System Information (neofetch)\nwin_split -h -a 'neofetch'\n"

# user defined overrides
source -q ~/.tmux.conf_local

# -- custom variables ----------------------------------------------------------

# to define a custom #{foo} variable, define a POSIX shell function between the
# '# EOF' and the '# "$@"' lines. Please note that the opening brace { character
# must be on the same line as the function name otherwise the parse won't detect
# it.
#
# then, use #{foo} in e.g. the 'tmux_conf_theme_status_left' or the
# 'tmux_conf_theme_status_right' variables.

# # /!\ do not remove the following line
# EOF
#
# # /!\ do not "uncomment" the functions: the leading "# " characters are needed
#
# weather() {
#   curl -m 1 wttr.in?format=3 2>/dev/null
#   sleep 900 # sleep for 15 minutes, throttle network requests whatever the value of status-interval
# }
#
# online() {
#   ping -c 1 1.1.1.1 >/dev/null 2>&1 && printf '' || printf ''
# }
# 
# tmux_cpu_mem() {
#   # check the output of the command "tmux showenv -s tmux_cpu_status_init"
#   # if it is empty then set first_run to false otherwise set it to true and run "tmux setenv tmux_cpu_status_init 1"
#   out=$(tmux showenv -s tmux_cpu_status_init 2>/dev/null)
#   if [ -z "$out" ]; then
#     tmux setenv tmux_cpu_status_init 1
#     first_run=true
#   else
#     first_run=false
#   fi
#   cmd="tmux-mem-cpu-load -a 0 -v -m 2 --interval 5"
#   if [ "$first_run" = true ]; then
#     spinner -s -q $cmd
#   else
#     $cmd
#   fi
# }
#
# "$@"
# # /!\ do not remove the previous line



================================================
FILE: dot_urlview
================================================
COMMAND xdg-open



================================================
FILE: dot_vimrc
================================================
syntax on
filetype plugin indent on

" add a new filetype to map zshXXXXXX files to zsh
au BufNewFile,BufRead *.zsh* set filetype=zsh


"Use 24-bit (true-color) mode in Vim/Neovim
if (has('nvim'))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has('termguicolors'))
  set termguicolors
endif

" allow to scroll in the preview and other actions
set mouse=a

" enable mousemoveevent
set mousemoveevent

set number

set tabstop=2       " The width of a TAB is set to 4.
" Still it is a \t. It is just that
" Vim will interpret it to be having
" a width of 4.

set shiftwidth=2    " Indents will have a width of 4

set softtabstop=2   " Sets the number of columns for a TAB

set expandtab       " Expand TABs to spaces

set ignorecase

set smartcase

" use system clipboard
if has('nvim')
  set clipboard+=unnamedplus
else
  set clipboard^=unnamed,unnamedplus
endif
    
vmap <C-c> "+y

let mapleader='\\'
map <Leader> <Plug>(easymotion-prefix)

if exists('$TMUX')
  let g:last_tmux_uuid=system('tmux show-environment -g TMUX_UUID  2> /dev/null')
  " autocmd to check of uuid changes and prompt user if they want
  autocmd FocusGained * let tmux_uuid=system('tmux show-environment -g TMUX_UUID  2> /dev/null') | if g:last_tmux_uuid != tmux_uuid  | let g:last_tmux_uuid=tmux_uuid | let cfm=confirm("Autoupdate detected, reload .vimrc?", "&Yes\n&No", 1) | if cfm == 1 | source $MYVIMRC | endif | endif
endif

" For Git plugin
set diffopt+=vertical

let g:fuzzymenu_vim_config = '~/.vimrc_local'

" use vim-plug
augroup vimplug
  let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
  if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
augroup end

call plug#begin('~/.vim/plugged')

" source user provided plugins from ~/.vimrc_plugins
if filereadable(expand('~/.vimrc_plugins'))
  source ~/.vimrc_plugins
endif

Plug 'tpope/vim-sensible'
Plug 'tveskag/nvim-blame-line'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'github/copilot.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-rhubarb'
Plug 'mhinz/vim-startify'
Plug 'harjotgill/fuzzy-menu.vim'
Plug 'prabirshrestha/async.vim'
Plug 'laher/gothx.vim', {'for': 'go'}
Plug 'maralla/gomod.vim', {'for': 'gomod'}
Plug 'antoinemadec/coc-fzf'
Plug 'voldikss/vim-floaterm'
Plug 'voldikss/fzf-floaterm'
Plug 'voldikss/coc-floaterm'
Plug 'tpope/vim-commentary'
Plug 'samoshkin/vim-mergetool'
Plug 'chrisbra/Recover.vim'
Plug 'Yggdroot/indentLine'
Plug 'simnalamburt/vim-mundo'
Plug 'tyru/open-browser.vim'
Plug 'tjdevries/coc-zsh'
Plug 'aacunningham/vim-fuzzy-stash'
Plug 'easymotion/vim-easymotion'
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'chrisbra/unicode.vim'
Plug 'mracos/mermaid.vim'
Plug 'google/vim-jsonnet'
Plug 'gelguy/wilder.nvim'
Plug 'prisma/vim-prisma'

" colors
Plug 'sainnhe/gruvbox-material'
Plug 'sainnhe/everforest'
Plug 'sainnhe/edge'
Plug 'sainnhe/sonokai'
Plug 'EdenEast/nightfox.nvim'
Plug 'joshdick/onedark.vim'
Plug 'cocopon/iceberg.vim'
Plug 'mhartington/oceanic-next'
Plug 'folke/tokyonight.nvim'
Plug 'arcticicestudio/nord-vim'
Plug 'jacoborus/tender.vim'
Plug 'whatyouhide/vim-gotham'
Plug 'Everblush/everblush.vim'

" add nvim specific plugins below
Plug 'equalsraf/neovim-gui-shim', has('nvim') && !has('gui_vimr') ? {} : { 'on': [] }
Plug 'pwntester/octo.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'nvim-lua/plenary.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'MunifTanjim/nui.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'nvim-telescope/telescope.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'nvim-telescope/telescope-fzf-native.nvim', has('nvim') ? { 'do': 'make' } : { 'on': [] }
Plug 'nvim-telescope/telescope-symbols.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'rcarriga/nvim-notify', has('nvim') ? {} : { 'on': [] }
Plug 'nvim-treesitter/nvim-treesitter', has('nvim') ? {'do': ':TSUpdate'} : { 'on': [] }
Plug 'SirVer/ultisnips', has('nvim') ? {} : { 'on': [] }
Plug 'honza/vim-snippets', has('nvim') ? {} : { 'on': [] }
Plug 'nvim-tree/nvim-web-devicons', has('nvim') ? {} : { 'on': [] }
Plug 'akinsho/bufferline.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'stevearc/dressing.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'lewis6991/gitsigns.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'kevinhwang91/nvim-hlslens', has('nvim') ? {} : { 'on': [] }
Plug 'petertriho/nvim-scrollbar', has('nvim') ? {} : { 'on': [] }
Plug 'otavioschwanck/tmux-awesome-manager.nvim', has('nvim') ? {} : { 'on': [] }
Plug 'chrisgrieser/nvim-early-retirement', has('nvim') ? {} : { 'on': [] }

if exists('$OPENAI_API_KEY')
  Plug 'harjotgill/CodeGPT.nvim', has('nvim') ? {} : { 'on': [] }
endif

if !has('nvim')
  " Wilder
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'ryanoasis/vim-devicons'

" Initialize plugin system
call plug#end()

" Run PlugInstall if there are missing plugins
if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  PlugInstall --sync
endif

" unset wildmenu
set nowildmenu

" Wilder
" Default keys
call wilder#setup({
      \ 'modes': [':', '/', '?'],
      \ 'next_key': '<Tab>',
      \ 'previous_key': '<S-Tab>',
      \ 'accept_key': '<Down>',
      \ 'reject_key': '<Up>',
      \ })

call wilder#set_option('renderer', wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
      \ 'border': 'single',
      \ 'highlighter': wilder#basic_highlighter(),
      \ 'highlights': {
      \   'border': 'Normal',
      \   'accent': wilder#make_hl('WilderAccent', 'Pmenu', [{}, {}, {'foreground': '#F06929'}]),  
      \ },
      \ 'left': [
      \   ' ', wilder#popupmenu_devicons(),
      \ ],
      \ 'right': [
      \   ' ', wilder#popupmenu_scrollbar(),
      \ ],
      \ })))

call wilder#set_option('pipeline', [
      \   wilder#branch(
      \     wilder#cmdline_pipeline({
      \       'language': 'python',
      \       'fuzzy': 1,
      \     }),
      \     wilder#python_search_pipeline({
      \       'pattern': wilder#python_fuzzy_pattern(),
      \       'sorter': wilder#python_difflib_sorter(),
      \       'engine': 're',
      \     }),
      \   ),
      \ ])

" copilot enable for markdown files
let g:copilot_filetypes = {
    \ 'markdown': v:true,
    \ }

" disable coc status in airline as it is shown with nvim-notify
if has("nvim")
  let g:airline#extensions#coc#show_coc_status = 0
else
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#show_buffers = 0
  let g:airline#extensions#tabline#show_tab_count = 1
  let g:airline#extensions#tabline#tab_nr_type = 1
  let g:airline_powerline_fonts = 1
endif

let airline#extensions#coc#error_symbol = ''
let airline#extensions#coc#warning_symbol = ''

let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1

let g:gothx_command_prefix = 'Go'

let g:indentLine_fileTypeExclude = ['startify', 'floaterm', 'coc-explorer', 'coctree', 'json']

" avoid for markdown as it sets the conceallevel to 2
autocmd FileType markdown let g:indentLine_enabled=0

" turn on gitblame by default
autocmd BufEnter * EnableBlameLine

" install coc extensions
let g:coc_global_extensions = [
      \ 'coc-highlight', 
      \ 'coc-go', 
      \ 'coc-explorer', 
      \ 'coc-pairs', 
      \ 'coc-yank', 
      \ 'coc-vale',
      \ 'coc-html',
      \ 'coc-yaml',
      \ 'coc-sql',
      \ 'coc-pyright',
      \ 'coc-json',
      \ 'coc-clangd',
      \ 'coc-webview',
      \ 'coc-markdown-preview-enhanced',
      \ 'coc-markdownlint',
      \ 'coc-reveal',
      \ 'coc-swagger',
      \ 'coc-toml',
      \ 'coc-markmap', 
      \ 'coc-diagnostic',
      \ 'coc-prettier',
      \ 'coc-biome',
      \ 'coc-marketplace',
      \ 'coc-vimlsp',
      \ 'coc-protobuf',
      \ 'coc-postfix',
      \ 'coc-tsserver',
      \ 'coc-eslint',
      \ 'coc-lua',
      \ 'coc-snippets',
      \ 'coc-ltex',
      \ 'coc-symbol-line',
      \ 'coc-java',
      \ 'coc-spell-checker',
      \ 'coc-prisma'
      \ ]

augroup buffer_keymaps
  autocmd FileType gitcommit inoremap<buffer><silent> @ @<C-x><C-o>
  autocmd FileType gitcommit inoremap<buffer><silent> # #<C-x><C-o>
augroup end

" some utility functions
" Like windo but restore the current window.
function! WinDo(command)
  let currwin=winnr()
  let curaltwin=winnr('#')
  execute 'windo ' . a:command
  " restore previous/alt window
  execute curaltwin . 'wincmd w'
  " restore current window
  execute currwin . 'wincmd w'
endfunction
com! -nargs=+ -complete=command Windo call WinDo(<q-args>)

" Like bufdo but restore the current buffer.
function! BufDo(command)
  let currBuff=bufnr('%')
  execute 'bufdo ' . a:command
  execute 'buffer ' . currBuff
endfunction
com! -nargs=+ -complete=command Bufdo call BufDo(<q-args>)

" Like tabdo but restore the current tab.
function! TabDo(command)
  let currTab=tabpagenr()
  execute 'tabdo ' . a:command
  execute 'tabn ' . currTab
endfunction
com! -nargs=+ -complete=command Tabdo call TabDo(<q-args>)

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

" Use ctrl-[hjkl] to select the active split window.
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

"" Coc.vim config follows

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=UTF-8

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1):
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `g[` and `g]` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)

nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)

nmap <silent> ga <Plug>(UnicodeGA)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup coc_actions
  autocmd!
  " add missing go imports on save
  autocmd BufWritePre *.ts,*.js,*.go silent! call CocAction('organizeImport')
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Symbol renaming.
nmap <space>r :CocRename<cr>

" init.vim has CocRename defined for nvim
if !has('nvim')
  " make a CocRename command that calls CocActionAsync('rename')
  command CocRename call CocActionAsync('rename')
endif

" Formatting selected code.
xmap <space>f  <Plug>(coc-format-selected)
nmap <space>f  <Plug>(coc-format-selected)

nnoremap <silent> <space>y  :<C-u>CocFzfList yank<cr>

" Applying codeAction to the cursor
xmap <space>a  <Plug>(coc-codeaction-cursor)
nmap <space>a  <Plug>(coc-codeaction-cursor)

" Codelens
xmap <space>l  <Plug>(coc-codelens-action)
nmap <space>l  <Plug>(coc-codelens-action)

" Apply AutoFix to problem on the current line.
nmap <space>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>

function! OutlineToggle() 
  if get(b:,'coc_outline_visible',0) == 0
    call CocActionAsync('showOutline', 1)
    let b:coc_outline_visible = 1
  else
    call CocAction('hideOutline')
    let b:coc_outline_visible = 0
  endif
endfunction

nnoremap <silent> <space>o :call OutlineToggle()<CR>

nmap <space>e <Cmd>CocCommand explorer<CR>

let g:diagnostic_window_size = 3

" open diagnostics
xmap <silent> <space>d :call ToggleDiagnostics()<CR>
nmap <silent> <space>d :call ToggleDiagnostics()<CR>

function! ToggleDiagnostics() abort
  execute 'CocList --height=5 diagnostics --buffer'
endfunction

augroup coc_nvim
  " shutdown coc on exit
  autocmd VimLeavePre * :call coc#rpc#kill() 
  " auto close outline if it's the last window
  autocmd BufEnter * call s:CheckDanglingWindows()
  function! s:CheckDanglingWindows() abort
    if ((&filetype ==# 'coctree' 
          \ || &filetype ==# 'coc-explorer'
          \ || &filetype ==# 'Mundo'
          \ || &filetype ==# 'MundoDiff'
          \ || &filetype ==# 'qf'
          \) && winnr('$') == 1)
      if tabpagenr('$') != 1
        close
      else
        bdelete
      endif
    endif
  endfunction
augroup end

" Remove plugins not explicitly defined in g:coc_global_extensions
function! CocExtClean() abort
  let g:extensions_to_clean = CocAction("loadedExtensions")
      \ ->filter({idx, extension -> extension !~ 'coc-vim-source-zsh'})
      \ ->filter({idx, extension -> index(g:coc_global_extensions, extension) == -1})
  if len(g:extensions_to_clean)
    exe 'CocUninstall' join(map(g:extensions_to_clean, {_, line -> split(line)[0]}))
  endif
endfunction
command! -nargs=0 CocExtClean :call CocExtClean()

autocmd User CocNvimInit call timer_start(250, {-> CocExtClean()})

" it uses the <tab> which copilot uses
let g:UltiSnipsExpandTrigger="<C-l>"

" FZF 
" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
      \ 'ctrl-q': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }

" - Popup window (center of the current window)
let g:fzf_layout = exists('$TMUX') ? {'tmux': '-p90%,80%'} : {'window': { 'width': 0.9, 'height': 0.9, 'relative': v:true }}

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Enable per-command history
" - History files will be stored in the specified directory
" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and
"   'previous-history' instead of 'down' and 'up'.
let g:fzf_history_dir = '~/.local/share/fzf-history'

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

let g:fzf_preview_window = ['right:50%', 'ctrl-\']

nmap <space>w <Cmd>Windows<CR>

" startify
let g:startify_session_number = 5
let g:startify_session_sort = 1
let g:startify_files_number = 5
let g:startify_change_to_dir = 0
let g:startify_session_delete_buffers = 0
let g:startify_change_to_vcs_root = 1

" returns all modified files of the current git repo
" `2>/dev/null` makes the command fail quietly, so that when we are not
" in a git repo, the list will be empty
function! s:gitModified()
  let files = systemlist('git ls-files -m 2>/dev/null')
  return map(files, "{'line': v:val, 'path': v:val}")
endfunction

" same as above, but show untracked files, honouring .gitignore
function! s:gitUntracked()
  let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
  return map(files, "{'line': v:val, 'path': v:val}")
endfunction

" open list of sessions in FZF window
function! OpenSessions()
  let session_path = g:startify#get_session_path()
  try 
    let prev_action = g:fzf_action
    let g:fzf_action = {
          \ 'enter': 'source' }
    call fzf#vim#files(session_path)
  finally
    let g:fzf_action = prev_action
  endtry
endfunction

let g:startify_lists = [
      \ { 'type': 'commands',  'header': ['    Commands']       },
      \ { 'type': 'sessions',  'header': ['   󰋊 Sessions']       },
      \ { 'type': 'dir',       'header': ['   󰋚 MRU '. getcwd()] },
      \ { 'type': 'files',     'header': ['   󰋚 MRU']            },
      \ { 'type': 'bookmarks', 'header': ['    Bookmarks']      },
      \ { 'type': function('s:gitModified'),  'header': ['   󰊢 Git Modified']},
      \ ]

let figlet_message = 'CodeRabbit Neovim'
if !has('nvim')
  let figlet_message = 'CodeRabbit Vim'
endif

let g:startify_custom_header =
      \ startify#pad(split(system('figlet -w 100 '. figlet_message), "\n") + startify#fortune#boxed())

let g:startify_commands = [
      \ {'f': [' Find Files', ':Files']},
      \ {'fe': ['󰉋 Explore Files', ':CocCommand explorer --position floating']},
      \ {'s': ['󰋚 Sessions', 'call OpenSessions()']},
      \ {'b': ['󰌨 Buffers', ':Buffers']},
      \ {'w': [' Tabs & Windows', ':Windows']},
      \ {'m': [' Marks', ':Marks']},
      \ {'p': ['󰈞 Pattern', ':RG']},
      \ {'pr': [' PR List', ':Octo pr list']},
      \ {'gs': [' Git Status', ':GFiles?']},
      \ {'sa': [' Save Session', ':SSave']},
      \ {'?': ['󰋖 Cheat Sheet', ':OpenBrowser https://vim.rtorr.com']},
      \ ]

nmap <space>s <Cmd>Startify<CR>

nmap <space>f <Cmd>Files<CR>
nmap <space>p <Cmd>RG<CR>
nmap <space>b <Cmd>Buffers<CR>


" auto session management
function! GetUniqueSessionName()
  " get session name if it already exists
  let session = fnamemodify(v:this_session, ':t')
  if session ==# '__LAST__'
    let session = ''
  endif
  if !empty(session)
    return session
  endif

  let git_root = trim(system('git rev-parse --show-toplevel 2>/dev/null'))
  let path = fnamemodify(git_root, ':t')
  if empty(path)
    let path = fnamemodify(getcwd(), ':t')
  endif
  let path = empty(path) ? 'unknown' : path
  let branch = trim(system('git branch --show-current 2>/dev/null'))
  let branch = empty(branch) ? 'no-branch' : '-' . branch
  " get timestamp
  let timestamp = trim(system('date +-%Y.%m.%d.%H:%M:%S'))


  return substitute(path . branch . timestamp . '.autosave', '/', '-', 'g')
endfunction

set sessionoptions=buffers,curdir,folds,help,slash,tabpages,winsize

augroup auto_session
  autocmd VimLeavePre *             execute 'SSave! ' . GetUniqueSessionName()
augroup end

" Remove all but recent 20 files by timestamp from a directory pointed to by return value of function g:startify#get_session_path()
function! CleanupSessionFiles()
  let path = g:startify#get_session_path()
  silent call system('cd ' . path . '; ls -tp *.autosave | grep -v "/$" | tail -n +20 | tr "\n" "\0" | xargs -0 rm --')
endfunction

execute CleanupSessionFiles()

" Load startify on each new tab. Disable this if it causes any issues with
" other plugins.
augroup startify
  if has('nvim')
    autocmd TabNewEntered * 
          \ if empty(expand('%')) && empty(&l:buftype) |
          \   Startify |
          \ endif
  else
    autocmd bufwinenter *
          \ if !exists('t:startify_new_tab')
          \     && empty(expand('%'))
          \     && empty(&l:buftype)
          \     && &l:modifiable |
          \   let t:startify_new_tab = 1 |
          \   Startify |
          \ endif
  endif
augroup end

" auto close outline, diagnostics if it's open on session save
let g:startify_session_before_save = [ 
      \ 'silent! execute "lclose" | execute "cclose"',
      \ 'silent! call CocAction("hideOutline")', 
      \ 'silent! MundoHide"' 
      \ ]

function! VisualExecWithArgs(cmd, args) range
  call ExecInputValues(a:cmd, a:args, 'VisualExecInputValues')
endfunction

function! NormalExecWithArgs(cmd, args)
  call ExecInputValues(a:cmd, a:args, 'NormalExecInputValues')
endfunction

" Function that prompts the user for input values and executes a command with those values.
"
" Parameters:
"   - cmd: The command to execute with the input values.
"   - args: A list of tuples representing the input arguments. Each tuple contains the name of the argument and a boolean indicating whether it is required.
"   - exec_func: The function to execute the command with the input values.
"
" Returns: Nothing.
"
" Exceptions: If a required parameter is empty, an error message is printed and the function returns without executing the command.
function! ExecInputValues(cmd, args, exec_func)
  let arg_values = []
  if has('nvim')
    call luaeval('input_args(_A.args, _A.arg_values, _A.callback, _A.cmd)', {'args': a:args, 'arg_values': arg_values, 'callback': a:exec_func, 'cmd': a:cmd})
  else
    " Loop through each argument, prompting the user for input and adding the value to arg_values.
    for arg in a:args
      let [arg_name, required] = arg
      let value = input(arg_name . ": ")
      if required && value == ''
        echom 'Required parameter ' . arg_name . ' is empty.'
        return
      endif
      call add(arg_values, value)
    endfor
    call a:exec_func(a:cmd, arg_values)
  endif
endfunction

function! VisualExecInputValues(cmd, arg_values)
  let final_cmd = a:cmd
  for value in a:arg_values
    let final_cmd .= " " . value
  endfor
  call VisualExec(final_cmd)
endfunction

function! NormalExecInputValues(cmd, arg_values)
  let final_cmd = a:cmd
  for value in a:arg_values
    let final_cmd .= " " . value
  endfor
  execute final_cmd
endfunction

function! VisualExec(cmd) range
  if visualmode() != 'V' && visualmode() != ''
    if has('nvim')
      " select_buffer_or_cancel_nvim now accepts callback, cmd and args. 
      call luaeval('select_buffer_or_cancel(_A.callback, _A.cmd)', {'callback': 'VisualExec', 'cmd': a:cmd})
      return
    else
      let choice = inputlist(['Select entire buffer', 'Cancel'])
      if choice == 1
        normal! ggVG
        normal! \<Esc>
      else
        return
      endif
    endif
  endif

  execute a:cmd
endfunction

" FZF Menu
nmap <silent> <space><space> <Plug>(Fzm)
vmap <silent> <space><space> <Plug>(FzmVisual)
" map mouse shift+left click to Fzm
nmap <silent> <S-LeftMouse> <Plug>(Fzm)
vmap <silent> <S-LeftMouse> <Plug>(FzmVisual)

call fuzzymenu#Reset()

let g:fuzzymenu_auto_add = 0

" fzf mappings
call fuzzymenu#AddAll({
      \ '󰋜 Main Menu': {'exec': 'Startify'},
      \ ' Find Files': {'exec': 'Files'},
      \ ' Git Files': {'exec': 'GFiles'},
      \ 'ﮦ Sessions': {'exec': 'call OpenSessions()'},
      \ ' Save Session': {'exec': 'SSave'},
      \ ' Colors': {'exec': 'Colors'},
      \ ' Lines': {'exec': 'BLines'},
      \ '󰌨 Buffers': {'exec': 'Buffers'},
      \ ' Tabs & Windows': {'exec': 'Windows'},
      \ ' Marks': {'exec': 'Marks'},
      \ '󰈞 Pattern': {'exec': 'RG'},
      \ ' Filetypes': {'exec': 'Filetypes'},
      \ ' Commands': {'exec': 'Commands'},
      \ ' Key Maps': {'exec': 'Maps'},
      \ ' Snippets': {'exec': 'Snippets'},
      \ ' Help Tags': {'exec': 'Helptags'},
      \ ' Command History': {'exec': 'History:'},
      \ ' Search History': {'exec': 'History/'},
      \ ' Terminals': {'exec': 'Floaterms'},
      \ ' Undotree': {'exec': 'MundoToggle'},
      \ ' IndentLines': {'exec': 'IndentLinesToggle'},
      \ ' ANSI Escape': {'exec': 'AnsiEsc'},
      \ ' Update Plugins': {'exec': 'PlugUpdate'},
      \ ' Update Coc Extensions': {'exec': 'CocUpdate'},
      \ ' Unicode Symbols': {'exec': 'call unicode#Fuzzy()'},
    \ },
    \ {'after': 'call fuzzymenu#InsertModeIfNvim()', 'tags': ['tools']})

" Coc menu
call fuzzymenu#AddAll({
      \ ' Diagnostics (Workspace)': {'exec': 'CocFzfList diagnostics'},
      \ ' Diagnostics (Buffer)': {'exec': 'call ToggleDiagnostics()'},
      \ ' Coc Actions': {'exec': 'call CocActionAsync("codeAction")'},
      \ ' Coc Commands': {'exec': 'CocCommand'},
      \ '󰌵 CodeLens Actions': {'exec': 'call CocActionAsync("codeLensAction")'},
      \ '󰉼 Format': {'exec': 'CocCommand editor.action.formatDocument'},
      \ '󰉋 File Explorer': {'exec': 'CocCommand explorer'},
      \ '󰈈 Outline Sidebar': {'exec': 'call OutlineToggle()'},
      \ '󰅴 Goto Definition': {'exec': 'call CocActionAsync("jumpDefinition")'},
      \ '󰅴 Goto Implementation': {'exec': 'call CocActionAsync("jumpImplementation")'},
      \ '󰅴 Goto References': {'exec': 'call CocActionAsync("jumpReferences")'},
      \ '󱖖 Incoming Calls': {'exec': 'CocCommand document.showIncomingCalls'},
      \ '󱖔 Outgoing Calls': {'exec': 'CocCommand document.showOutgoingCalls'},
      \ ' Documentation': {'exec': 'call ShowDocumentation()'},
      \ ' Coc Lists': {'exec': 'CocFzfList'},
      \ '󰐱 Coc Extensions': {'exec': 'CocFzfList extensions'},
      \ '󰣖 Coc Services': {'exec': 'CocFzfList services'},
      \ ' Coc Config': {'exec': 'CocConfig'},
      \ '󰜉 Coc Restart': {'exec': 'CocRestart'},
      \ '󰣖 Coc Completion Sources': {'exec': 'CocFzfList sources'},
      \ ' Coc LSP Logs': {'exec': 'CocCommand workspace.showOutput'},
      \ ' Coc Logs': {'exec': 'CocInfo'},
      \ '󰈈 Outline Navigator': {'exec': 'CocFzfList outline'},
      \ '󰑕 Rename': {'exec': 'CocRename'},
      \ ' Organize Imports': {'exec': 'CocCommand editor.action.organizeImport'},
      \ '󰆒 Yank History (Clipboard)': {'exec': 'CocFzfList yank'},
      \ '󰈙 Render Swagger/OpenAPI spec': {'exec': 'CocCommand swagger.render'},
      \ '󰊤 GitHub Browser': {'exec': 'GBrowse'},
    \ },
    \ {'tags': ['coc'],
    \ 'for': {'exists': 'g:coc_enabled'}})

call fuzzymenu#AddAll({
      \ ' Markdown Preview': {'exec': 'CocCommand markdown-preview-enhanced.openPreview'}, 
      \ ' Markdown Map': {'exec': 'CocCommand markmap.watch'}, 
      \ ' Markdown Generate Slides': {'exec': 'CocCommand reveal.it'}, 
      \ },
      \ {'for': {'ft': 'md', 'exists': 'g:coc_enabled'}, 'tags': ['markdown', 'coc']})

call fuzzymenu#AddAll({
        \ '󰟓 AddTags Struct': {'exec': 'CocCommand go.tags.add.prompt'},
        \ '󰟓 AddTags Line': {'exec': 'CocCommand go.tags.add.line'},
        \ '󰟓 ClearTags Struct': {'exec': 'CocCommand go.tags.clear'},
        \ '󰟓 ClearTags Line': {'exec': 'CocCommand go.tags.clear.line'},
        \ '󰟓 RemoveTags Struct': {'exec': 'CocCommand go.tags.remove.prompt'},
        \ '󰟓 RemoveTags Line': {'exec': 'CocCommand go.tags.remove.line'},
        \ '󰟓 Generate Tests Exported': {'exec': 'CocCommand go.tests.generate.exported'},
        \ '󰟓 Generate Tests File': {'exec': 'CocCommand go.tests.generate.file'},
        \ '󰟓 Generate Tests Function': {'exec': 'CocCommand go.tests.generate.function'},
        \ '󰟓 Mod Tidy': {'exec': 'CocCommand go.gopls.tidy'},
        \ '󰟓 Generate Interface': {'exec': 'CocCommand go.impl.cursor'},
        \ '󰟓 Play (launch in browser)': {'exec': 'CocCommand go.playground'},
        \ '󰟓 Toggle Test/Code': {'exec': 'CocCommand go.test.toggle'},
      \ },
      \ {'for': {'ft': 'go', 'exists': 'g:coc_enabled'}, 'tags':['go', 'coc']})

call fuzzymenu#Add(' Setup GitHub Copilot', {'normal': ':Copilot setup'}, {'tags': ['github']})
call fuzzymenu#Add(' GitHub Copilot Solutions', {'exec': 'Copilot panel'}, {'tags': ['github']})

call fuzzymenu#AddAll({
  \ ' Diff (git diff)': {'exec': 'Gdiffsplit'},
  \ ' Blame (git blame)': {'exec': 'Git blame'},
  \ '󱓍 Read (git checkout)': {'exec': 'Gread'},
  \ '󱣪 Write (git add)': {'exec': 'Gwrite'},
  \ '󰆴 Delete (git rm)': {'exec': 'GDelete'},
  \ '󰜘 Commit (git commit)': {'exec': 'Git commit'},
  \ '󰓂 Pull (git pull)': {'exec': 'Git pull'},
  \ '󰘭 Push (git push)': {'exec': 'Git push'},
  \ '󰳐 Commits (git log)': {'exec': 'BCommits'},
  \ ' Status (git status)': {'exec': 'GFiles?'},
  \ ' Stash (git stash)': {'exec': 'GStashList'},
  \ },
  \ {'for': {'exists': 'g:loaded_fugitive'}, 'tags': ['git']})

call fuzzymenu#Add('󰳐 Commits for range (git log)', {'visual': ':BCommits' }, {'for': {'exists': 'g:loaded_fugitive'}, 'tags': ['visual', 'git']})

call fuzzymenu#Add(' Mergetool', {'exec': 'MergetoolToggle'}, {'tags': ['mergetool']})
call fuzzymenu#AddAll({
  \ ' Mergetool Layout Merge, Remote': {'exec': 'MergetoolToggleLayout mr'},
  \ ' Mergetool Layout Base, Merge, Remote': {'exec': 'MergetoolToggleLayout mr,b'},
  \ ' Mergetool Exchange Left': {'exec': 'MergetoolDiffExchangeLeft'},
  \ ' Mergetool Exchange Right': {'exec': 'MergetoolDiffExchangeRight'},
  \ ' Mergetool Exchange Down': {'exec': 'MergetoolDiffExchangeDown'},
  \ ' Mergetool Exchange Up': {'exec': 'MergetoolDiffExchangeUp'},
  \ ' Mergetool Prefer Local': {'exec': 'MergetoolPreferLocal'},
  \ ' Mergetool Prefer Remote': {'exec': 'MergetoolPreferRemote'},
  \ },
  \ {'for': {'exists': 'g:merging'}, 'tags': ['mergetool']})

" Octo
if has('nvim')
  call fuzzymenu#AddAll({
    \ ' PR List': {'exec': 'Octo pr list'},
    \ ' PR Search': {'exec': 'Octo pr search'},
    \ ' Gist List': {'exec': 'Octo gist list'},
    \ '󰊤 GitHub Search': {'exec': 'Octo search'},
    \ '󰊤 Issues List': {'exec': 'Octo issue list'},
    \ '󰊤 Issues Search': {'exec': 'Octo issue search'},
    \ '󰊤 Octo': {'exec': 'Octo actions'},
    \ },
    \ {'tags': ['octo', 'github']})
endif

" vim cheat-sheet link
call fuzzymenu#Add(' Vim Cheat-sheet (Browser)', {'exec': 'OpenBrowser https://vim.rtorr.com'}, {'tags': ['vim']})

" basic options
call fuzzymenu#Add(' Case-sensitive searches', {'exec': 'set noignorecase'}, {'tags': ['vim']})
call fuzzymenu#Add(' Case-insensitive searches', {'exec': 'set ignorecase'}, {'tags': ['vim']})
call fuzzymenu#Add(' Hide line numbers', {'exec': 'set nonumber'}, {'tags': ['vim']})
call fuzzymenu#Add(' Show line numbers', {'exec': 'set number'}, {'tags': ['vim']})
call fuzzymenu#Add(' Hide whitespace characters', {'exec': 'set nolist'}, {'tags': ['vim']})
call fuzzymenu#Add(' Show whitespace characters', {'exec': 'set list'}, {'tags': ['vim']})
call fuzzymenu#Add(' Undo', {'normal': 'u'}, {'tags': ['vim']})
call fuzzymenu#Add(' Redo', {'normal': "\<c-r>"}, {'tags': ['vim']})
call fuzzymenu#Add(' Quit (exit) all', {'exec': 'qa'}, {'tags': ['vim']})
call fuzzymenu#Add(' Quit (exit) all without saving', {'exec': 'qa!'}, {'tags': ['vim']})
call fuzzymenu#Add(' Write (save) and quit (exit) all', {'exec': 'wqa'}, {'tags': ['vim']})
call fuzzymenu#Add(' Write (save) current buffer', {'exec': 'w'}, {'tags': ['vim']})
call fuzzymenu#Add(' Write (save) all', {'exec': 'wa'}, {'tags': ['vim']})

" common editor features
call fuzzymenu#Add(' New Tab', {'exec': 'tabnew'}, {'tags': ['vim']})
call fuzzymenu#Add(' Close Window', {'exec': 'close'}, {'tags': ['vim']})
call fuzzymenu#Add(' New buffer', {'exec': 'new'}, {'tags': ['vim']})
call fuzzymenu#Add(' Delete buffer (close file)', {'exec': 'bd'}, {'tags': ['vim']})
call fuzzymenu#Add(' Delete buffer (close file) WITHOUT saving', {'exec': 'bd!'}, {'tags': ['vim']})
call fuzzymenu#Add(' Vertical split', {'exec': 'vs'}, {'tags': ['vim']})
call fuzzymenu#Add(' Horizontal split', {'exec': 'sp'}, {'tags': ['vim']})
call fuzzymenu#Add(' Select all', {'normal': 'ggVG'}, {'tags': ['vim']})
call fuzzymenu#Add(' Find word under cursor', {'normal': '*'}, {'tags': ['vim']})
call fuzzymenu#Add(' Next match', {'normal': 'n'}, {'tags': ['vim']})
call fuzzymenu#Add(' Previous match', {'normal': 'N'}, {'tags': ['vim']})
call fuzzymenu#Add(' Repeat (last normal mode operation)', {'normal': '.'}, {'tags': ['vim']})
call fuzzymenu#Add(' Repeat (last :command)', {'normal': '@:'}, {'tags': ['vim']})
call fuzzymenu#Add(' Open file under cursor', {'normal': 'gf'}, {'tags': ['vim']})
call fuzzymenu#Add(' Browse to link under cursor', {'normal': 'gx'}, {'tags': ['vim']})
call fuzzymenu#Add(' Jumps', {'exec': 'jumps'}, {'tags': ['vim']})
call fuzzymenu#Add(' Jump Next', {'normal': "\<c-i>"}, {'tags': ['vim']})
call fuzzymenu#Add(' Jump Back', {'normal': "\<c-o>"}, {'tags': ['vim']})

" normal mode for incomplete functions
call fuzzymenu#Add(' Find', {'normal': '/'}, {'tags': ['vim']})

call fuzzymenu#Add(' Next match', {'normal': 'n'}, {'tags': ['vim']})
call fuzzymenu#Add(' Previous match', {'normal': 'N'}, {'tags': ['vim']})
call fuzzymenu#Add(' Replace next match', {'normal': ':s//'}, {'tags': ['vim']})
call fuzzymenu#Add(' Replace in file', {'normal': ':%s//'}, {'tags': ['vim']})
call fuzzymenu#Add(' Replace in open buffers', {'normal': ':bufdo :%s//'}, {'tags': ['vim']})

call fuzzymenu#Add(' Put (paste)', {'normal': 'p'}, {'tags': ['vim']})

" Telescope enabled options
if has("nvim")
  call fuzzymenu#Add(' Tag Stack', {'exec': 'Telescope tagstack'}, {'tags': ['vim']})
  call fuzzymenu#Add(' Old Files', {'exec': 'Telescope oldfiles'}, {'tags': ['tools']})
  call fuzzymenu#Add(' Vim Options', {'exec': 'Telescope vim_options'}, {'tags': ['tools']})
  call fuzzymenu#Add(' Man Pages', {'exec': 'Telescope man_pages'}, {'tags': ['tools']})
  call fuzzymenu#Add(' Symbols/Emojis', {'exec': 'Telescope symbols'}, {'tags': ['tools']})
  call fuzzymenu#Add('󰎟 Notification Center', {'exec': 'Telescope notify'}, {'tags': ['tools']})
  call fuzzymenu#Add(' AutoSave Toggle', {'exec': 'ASToggle'}, {'tags': ['tools']})
  call fuzzymenu#Add(' Run Shell Command', {'exec': ':call NormalExecWithArgs("Sh", [["Command", 1]])'}, {'tags': ['tools']})
  call fuzzymenu#Add(' Make Target', {'exec': ':call SelectMakeTarget()'}, {'tags': ['tools']})
  call fuzzymenu#Add(' Send Text to Terminal', {'exec': ':lua tmux.send_text_to()'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' Switch tmux Orientation', {'exec': ':lua tmux.switch_orientation()'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' Switch tmux Open As', {'exec': ':lua tmux.switch_open_as()'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' Kill All tmux Terms', {'exec': ':lua tmux.kill_all_terms()'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' Run Project tmux Terms', {'exec': ':lua tmux.run_project_terms()'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' List All tmux Terms', {'exec': 'Telescope tmux-awesome-manager list_terms'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' List Open tmux Terms', {'exec': 'Telescope tmux-awesome-manager list_open_terms'}, {'tags': ['tmux']})
  call fuzzymenu#Add(' Git Ship', {'exec': ':lua tmux.execute_command( { cmd = "git_ship; echo; echo; echo Done", name = "Git Ship" })'}, {'tags': ['tools']})
else
  call fuzzymenu#Add(' Tag Stack', {'exec': 'tags'}, {'tags': ['tools']})
endif
  if exists('$OPENAI_API_KEY') && has("nvim")
    call fuzzymenu#Add('󰚩 ChatGPT Chat', {'exec': ':call NormalExecWithArgs("Chat", [["Instructions", 1]])'}, {'tags': ['chatgpt']})
    " ChatGPT visual selection
    call fuzzymenu#AddAll({
      \ '󰚩 ChatGPT Completion': {'visual': ':call VisualExec("Chat completion")' },
      \ '󰚩 ChatGPT Explain': {'visual': ':call VisualExec("Chat explain")' },
      \ '󰚩 ChatGPT Debug': {'visual': ':call VisualExec("Chat debug")' },
      \ '󰚩 ChatGPT Document': {'visual': ':call VisualExec("Chat doc")' },
      \ '󰚩 ChatGPT Optimize': {'visual': ':call VisualExec("Chat opt")' },
      \ '󰚩 ChatGPT Add Tests': {'visual': ':call VisualExec("Chat tests")' },
      \ '󰚩 ChatGPT Refactor': {'visual': ':call VisualExec("Chat refactor")' },
      \ '󰚩 ChatGPT Simplify': {'visual': ':call VisualExec("Chat simplify")' },
      \ '󰚩 ChatGPT Fix': {'visual': ':call VisualExec("Chat fix")' },
      \ '󰚩 ChatGPT Summarize': {'visual': ':call VisualExec("Chat summarize")' },
      \ '󰚩 ChatGPT Grammar': {'visual': ':call VisualExec("Chat grammar")' },
      \ '󰚩 ChatGPT Question': {'visual': ':call VisualExecWithArgs("Chat question", [["Question", 1]])' },
      \ '󰚩 ChatGPT Edit With Instructions': {'visual': ':call VisualExecWithArgs("Chat code_edit", [["Instructions", 1]])' },
      \ },
      \ {'tags': ['visual','chatgpt']})
  endif

" normal mode operators (For text objects) 

" Comment/Uncomment (gc)
" override gcgc to do single line comment/uncomment to make it consistent with
" other vim commands
nmap gcgc <Plug>CommentaryLine

let ops = {}
let ops[' Comment/Uncomment'] = { 'exec': 'FzmOp gc' }

for i in items(fuzzymenu#operators#Get())
    let name = ' ' . i[1]
    let op = i[0]
    let ops[name] = { 'exec': 'FzmOp '.op }
endfor
call fuzzymenu#AddAll(ops,
    \ {'after': 'call fuzzymenu#InsertModeIfNvim()', 'tags': ['normal','vim']})

let ops = {}
let ops[' Comment/Uncomment'] = { 'visual': 'gc' }
for i in items(fuzzymenu#operators#Get())
    let name = ' ' . i[1]
    let op = i[0]
    "" remove 'g' prefix from uppercase/lowercase/format/...
    let op = substitute(op, '^g', '', '')
    let ops[name] = { 'visual': op }
endfor

call fuzzymenu#AddAll(ops,
    \ {'tags': ['visual','vim']})

call fuzzymenu#Add(' Operators (text objects and motions)', {
      \ 'exec': 'FzmOps'}, {
      \ 'after': 'call fuzzymenu#InsertModeIfNvim()', 
      \ 'tags': ['normal','vim']
      \})

call fuzzymenu#AddAll({
      \' Apply setting (persist)': { 'exec': 'call fuzzymenu#vimconfig#ApplySetting(1)'}, 
      \' Apply setting (temporary)': { 'exec': 'call fuzzymenu#vimconfig#ApplySetting(0)'}, 
      \' Create a key mapping (persist)': { 'exec': 'call fuzzymenu#vimconfig#MapKey({})' },
      \ },
      \ { 'after': 'call fuzzymenu#InsertModeIfNvim()', 'tags': ['misc']})

" Maintain undo history between sessions
if has("nvim")
  set undodir=~/.local/share/nvim/undodir
else 
  set undodir=~/.vim/undodir
endif

" mkdir undodir if it doesn't exist
if !isdirectory(expand($undodir))
  silent call system('mkdir ' . $undodir)
endif

set undofile
set undolevels=1000
set undoreload=10000

nmap <space>u <Cmd>MundoToggle<CR>

" Floaterms
let g:ft_float_width = 0.9
let g:ft_float_height = 0.9
let g:ft_window_height = 0.25
let g:ft_window_width = 0.25

let g:fzf_floaterm_newentries = {
  \ '+root' : {
    \ 'title': 'Root Shell (floating)',
    \ 'width': g:ft_float_width,
    \ 'height': g:ft_float_height,
    \ 'cmd': 'sudo sh' },
  \ '+zsh' : {
    \ 'title': 'Zsh Shell (floating)',
    \ 'width': g:ft_float_width,
    \ 'height': g:ft_float_height,
    \ 'cmd': 'zsh' },
  \ '+root-tab' : {
    \ 'title': 'Root Shell (bottom window)',
    \ 'height': g:ft_window_height,
    \ 'wintype': 'split',
    \ 'cmd': 'sudo sh' },
  \ '+zsh-tab' : {
    \ 'title': 'Zsh Shell (bottom window)',
    \ 'height': g:ft_window_height,
    \ 'wintype': 'split',
    \ 'cmd': 'zsh' },
  \ }

let g:floaterm_autohide = 2

nmap <space>t <Cmd>Floaterms<CR>

let g:floaterm_title = ' Floaterm'
autocmd FileType floaterm tnoremap <expr> <ESC> (&filetype == "floaterm") ? "<C-\><C-n>:FloatermHide<CR>" : "<ESC>"

" openbrowser
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)


" Mergetool
let g:mergetool_layout = 'mr'
let g:mergetool_prefer_revision = 'local'

function s:QuitMergetool()

  " If we're in merge mode, exit
  if get(g:, 'mergetool_in_merge_mode', 0)
    call mergetool#stop()
    return
  endif

endfunction

autocmd VimLeavePre * call s:QuitMergetool()

function s:MergeToolBufEnter()
  if get(g:, 'mergetool_in_merge_mode', 0)
    let g:merging = 1
  endif
endfunction

function s:MergeToolBufLeave()
  if exists('g:merging')
    unlet g:merging
  endif
endfunction

autocmd BufEnter * call s:MergeToolBufEnter()
autocmd BufLeave * call s:MergeToolBufLeave()

" colorschemes
let colorscheme = 'gruvbox_dark'

" some defaults
let g:gruvbox_material_better_performance = 1
let g:gruvbox_material_diagnostic_text_highlight = 1
let g:gruvbox_material_diagnostic_virtual_text = 'colored'
let g:gruvbox_material_foreground = 'mix'

let g:everforest_better_performance = 1
let g:edge_better_performance = 1
let g:sonokai_better_performance = 1

" source ~/.vimrc_local for local overrides
if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
endif

function! s:SetHighlights()
  " set codelens color
  hi CocCodeLens guifg=Orange gui=Italic
endfunction

autocmd ColorScheme * call s:SetHighlights()

" set colorscheme based on colorscheme variable
if colorscheme == 'gruvbox_dark'
  set background=dark
  colorscheme gruvbox-material
elseif colorscheme == 'gruvbox_light'
  set background=light
  colorscheme gruvbox-material
elseif colorscheme == 'iceberg_dark'
  set background=dark
  colorscheme iceberg
elseif colorscheme == 'iceberg_light'
  set background=light
  colorscheme iceberg
elseif colorscheme == 'everforest_dark'
  set background=dark
  colorscheme everforest
elseif colorscheme == 'everforest_light'
  set background=light
  colorscheme everforest
elseif colorscheme == 'edge_dark'
  set background=dark
  colorscheme edge
elseif colorscheme == 'edge_light'
  set background=light
  colorscheme edge
elseif colorscheme == 'sonokai_dark'
  set background=dark
  colorscheme sonokai
elseif colorscheme == 'sonokai_light'
  set background=light
  colorscheme sonokai
elseif colorscheme != ''
  try
    execute 'colorscheme '.colorscheme
  catch
    echohl WarningMsg | echom 'Unable to find colorscheme: ' . colorscheme . ' defaulting to gruvbox-material' | echohl None
    set background=dark
    colorscheme gruvbox-material
  endtry
endif

" check whether &guifont is empty
if &guifont == ''
  if has('macunix')
    silent! set guifont=Hack_Regular_Nerd_Font_Complete_Mono:h15
  else
    if has("nvim")
      silent! set guifont=Hack\ Nerd\ Font\ Mono:h15
    else
      silent! set guifont=Hack\ Nerd\ Font\ Mono\ 15
    endif
  endif
endif



================================================
FILE: dot_zprofile
================================================
# check if $HOME/homebrew exists, if it does then export environment
if [ -d "$HOME/homebrew" ]; then
	eval "$($HOME/homebrew/bin/brew shellenv)"
else
  if [[ $OSTYPE == 'darwin'* ]]; then
    test -d /opt/homebrew && eval "$(/opt/homebrew/bin/brew shellenv)"
    test -f /usr/local/bin/brew && eval "$(/usr/local/bin/brew shellenv)"
  else
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi
fi

# add python symlinks
export PATH=$HOME/sw/bin:$HOME/go/bin:$HOME/.cargo/bin:$(brew --prefix)/opt/python/libexec/bin:$HOME/.local/bin:$PATH:$HOME/.docker/bin:$HOME/.orbstack/bin
export JDK_HOME=$HOMEBREW_PREFIX/opt/openjdk@17
export JAVA_HOME=$HOMEBREW_PREFIX/opt/openjdk@17

# export a variable marking zprofile as sourced
export ZPROFILE_SOURCED=1



================================================
FILE: dot_zshrc
================================================
# source ~/.zprofile if ZPROFILE_SOURCED is not set
if [[ -z "$ZPROFILE_SOURCED" ]]; then
  source ~/.zprofile
fi

export LS_COLORS="$(vivid generate gruvbox-dark)"

export BAT_THEME="gruvbox-dark"

# FZF theme -- See https://github.com/fnune/base16-fzf
source $HOME/sw/assets/base16-gruvbox-dark-medium.config

export LESSOPEN="|$(brew --prefix)/bin/lesspipe.sh %s"
export LESSCOLORIZER="bat --color=always"
export LESS="-R"

export MANPAGER="sh -c 'col -bx | bat -l man -p'"

export EDITOR=nvim
export SET_TERMINAL_COLORS=true

function set_terminal {
	if [[ -z "${TERMINAL:-}" ]]; then

		# |
		# | Check for the terminal name (depening on os)
		# | ===========================================
		OS="$(uname)"
		if [[ "$OS" = "Darwin" ]]; then
			export TERMINAL=$TERM_PROGRAM
			# test whether ~/.iterm2_profile_check_v2 doesn't exist
			if [[ ! -e "${HOME}/.iterm2_profile_check_v2" ]]; then
        rm -f "${HOME}/.iterm2_profile_check"
        if gum confirm "Do you want to use CodeRabbit's bundled iTerm2 colors/font profile?"; then
					# install iterm2 profile
					cp ~/sw/assets/iterm2_gruvbox.json ~/Library/Application\ Support/iTerm2/DynamicProfiles/
					# execute the script
					pip3 install iterm2 && python3 ~/sw/assets/iterm2_default.py && touch "${HOME}/.iterm2_profile_check_v2" || (echo; echo; echo "Failed to install iTerm2 profile. You might need to enable Python API within iTerm2 preferences (under Magic tab). Press Enter to continue." && read)
          # ask about wallpaper
          if gum confirm "Do you want to use matching wallpaper?"; then
  					# set the wallpaper to ~/sw/assets/apple_gruvbox.heic
	  				osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"$HOME/sw/assets/apple_gruvbox.heic\""
          fi
        else
					echo "no" > "${HOME}/.iterm2_profile_check_v2"
				fi
			fi
      return
    fi

    # Other OS'es
		if [[ "${OS#CYGWIN}" != "${OS}" ]]; then
			export TERMINAL="mintty"
		elif [[ "$TERM" = "xterm-kitty" ]]; then
			export TERMINAL="kitty"
		else
			# |
			# | Depending on how the script was invoked, we need
			# | to loop until pid is no longer a subshell
			# | ===========================================
			pid="$$"
			export TERMINAL="$(ps -h -o comm -p $pid)"
			while [[ "${TERMINAL:(-2)}" == "sh" ]]; do
				pid="$(ps -h -o ppid -p $pid)"
				export TERMINAL="$(ps -h -o comm -p $pid)"
			done
		fi
	fi
}


if [[ -z "$START_TMUX" ]]; then
  export START_TMUX=true
fi

# check whether tmux command exists
if [[ -x "$(command -v tmux)" ]]; then
  if $START_TMUX; then
    export START_TMUX=false
    set_terminal
    DETACHED_SESSIONS=$(tmux ls 2&>/dev/null | grep -v attached)
    # check whether tmux has sessions that are in detached state
    if [[ -n "$DETACHED_SESSIONS" ]]; then
      # get the list of detached sessions
      DETACHED_SESSIONS=$(tmux ls | grep -v attached)
      # Add "New Session" to the list of detached sessions
      DETACHED_SESSIONS="New Session\n$DETACHED_SESSIONS"
      #local PREVIEW="TOKEN={} && echo 'token: $TOKEN'"
      # use fzf to select a session
      SESSION_NAME=$(echo "$DETACHED_SESSIONS" | \
        fzf --header="== Attach to a detached session ==" \
        --ansi --color="dark" \
        --preview="$HOME/sw/assets/.session_preview {}")
      # if the user selected a session, attach to it
      # otherwise, create a new session
      if [[ $SESSION_NAME == "New Session" ]]; then
        tmux -u new-session
      else
        # extract session name
        SESSION_NAME=$(echo "$SESSION_NAME" |  cut -d':' -f1)
        tmux -u attach -t $SESSION_NAME
      fi
    else
      tmux -u new-session
    fi
    exit
  fi
fi

# Check for Homebrew to be present, install if it's missing
if ! command -v brew &> /dev/null; then
  echo "Installing homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  # source ~/.zprofile to update PATH
  source ~/.zprofile
  ~/sw/bin/autoupdate.zsh --force
fi

figlet -w 80 CodeRabbit Zsh && echo "" 2&>/dev/null

source ~/sw/assets/utils.zsh

# See https://unix.stackexchange.com/q/150649/126543
function expand-command-aliases() {
	cmd="$1"
	functions[expandaliasestmp]="${cmd}"
	print -rn -- "${functions[expandaliasestmp]#$'\t'}"
	unset 'functions[expandaliasestmp]'
}

_brew_completion_update=false

func preexec() {
  export LAST_COMMAND="$(expand-command-aliases "$1")"
  # Do nothing at all if we are not in tmux, second test is needed in
  # case of an ssh session being run from within tmux, which could result
  # in $TMUX from the parent session being set without tmux being
  # connected.
  if [ -n "$TMUX" ] && tmux ls >/dev/null 2>/dev/null; then
    eval "$(tmux show-environment -s | grep -v "^unset")"
    local uuid="$(tmux show-environment -g TMUX_UUID 2>/dev/null)"
    # check whether $LAST_TMUX_UUID is set
    if [[ -z "$LAST_TMUX_UUID" ]]; then
      export LAST_TMUX_UUID="$uuid"
    else
      # check whether $LAST_TMUX_UUID is the same as $uuid
      if [ "$LAST_TMUX_UUID" != "$uuid" ]; then
        export LAST_TMUX_UUID="$uuid"
        echo -e "${BLUE_BRIGHT} == Autoupdate detected | Zsh reloading == ${RESET}"
        # tmux respawn pane and new login shell to reload zsh
        # cd to the current directory
        # run the LAST_COMMAND
        tmux respawn-pane -k -t "$TMUX_PANE" "cd \"$PWD\" && $LAST_COMMAND && zsh --login"
        echo
        echo -e "${BLUE_BRIGHT} == Zsh reloaded == ${RESET}"
        echo
      fi
    fi
  fi

  # if last command contained "brew install" or "brew upgrade" or "brew uninstall" or "brew reinstall" the set _brew_completion_update=1
  if [[ "$LAST_COMMAND" =~ "brew install" ]] || [[ "$LAST_COMMAND" =~ "brew upgrade" ]] || [[ "$LAST_COMMAND" =~ "brew uninstall" ]] || [[ "$LAST_COMMAND" =~ "brew reinstall" ]]; then
    
    _brew_completion_update=true
  fi
}

function precmd() {
  # if _brew_completion_update is set to true, run "zinit update brew-completions"
  if $_brew_completion_update; then
    zinit update brew-completions
    _brew_completion_update=false
  fi
}

func zshexit() {
#remove gh status
rm /tmp/gh_$$ &>/dev/null
# remove watch on home directory
watchman watch-del $HOME >/dev/null 
figlet -w 80 CodeRabbit zsh
cowsay -d "zsh exiting... see you later..."
sleep 0.5
}

# configure zsh to show hidden files in auto-completion
setopt globdots
setopt interactivecomments

eval $(thefuck --alias)

if [[ $OSTYPE == 'darwin'* ]]; then
  source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
  source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
fi

PS1="$(pwd) > "
PROMPT_LAYOUT='<excuse><cheers><vcs><nl>[<cwd><? ><exit>] <char> '

if [[ -z "$ITERM2_INTEGRATION_DETECTED" ]]; then
  ITERM2_INTEGRATION_DETECTED=false
fi

if [[ $OSTYPE == 'darwin'* ]]; then
  # check whether $TERMINAL is iTerm.app
  if [[ $TERMINAL == "iTerm.app" ]]; then
    export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=true
    # iterm2 prompt mark doesn't work under tmux for some reason
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" && \
      ITERM2_INTEGRATION_DETECTED=true && PROMPT_LAYOUT="%{$(iterm2_prompt_mark)%} $PROMPT_LAYOUT%{$(iterm2_prompt_end)%}"
    # read $HOME/.iterm2_profile_check_v2 file and check if it contains "no"
    if [[ $(cat "${HOME}/.iterm2_profile_check_v2") == "no" ]]; then
      SET_TERMINAL_COLORS=true
    else
      SET_TERMINAL_COLORS=false
    fi
  ## if the terminal is ghostty don't set terminal colors
  elif [[ $TERMINAL == "ghostty" ]]; then
    SET_TERMINAL_COLORS=false
  fi
fi

periodic() { silent_background timeout 2 $HOME/sw/bin/gh_checks_status.sh > /tmp/gh_$$ }
PERIOD=10

function @yazpt_segment_nl() {
# check whether $last_yazpt_vcs is not equal to $yazpt_state[vcs]
#if [[ "$last_yazpt_vcs" != "$yazpt_state[vcs]" ]]; then
#  spinner -q -s "timeout 2 $HOME/sw/bin/gh_checks_status.sh > /tmp/gh_$$"
#fi
last_yazpt_vcs="$yazpt_state[vcs]"
yazpt_state[nl]=""
# read from /tmp/gh_"$$" if it exists
if [[ -e "/tmp/gh_$$" ]]; then
  local check="$(cat /tmp/gh_$$)"
  # check whether check is empty
  if [ -n "$check" ]; then
    if [ -n "$yazpt_state[vcs]" ]; then
      yazpt_state[nl]+=" | "
    fi
    yazpt_state[nl]+=" GitHub checks $check"
  fi
fi

local hour=$(date +%H)
if (( 23 <= $hour || $hour <= 6 )); then
  if [ -n "$yazpt_state[nl]" ] ||  [ -n "$yazpt_state[vcs]" ]; then
    yazpt_state[nl]+=" | "
  fi
  yazpt_state[nl]+="%F{$YAZPT_CWD_COLOR}it's late, yo - get some sleep!%f"
fi
# check whether $yazpt_state[nl] or $yazpt_state[vcs] is not empty and add a new line if it is not empty
if [ -n "$yazpt_state[nl]" ] || [ -n "$yazpt_state[vcs]" ]; then
  yazpt_state[nl]+=$'\n'
fi
}

function @yazpt_segment_excuse() {
# check whether exit code of last command was not 0 or 127 or 130
local code="$yazpt_state[exit_code]"
local excuse_msg=''
if [[ $code -ne 0 && $code -ne 127 && "$yazpt_state[exit_code]" -ne 130 ]] && $INSULTS_ENABLED; then
  local excuse_msg='💥uh-ho💥 '
  excuse_msg+="$(excuse)"
  excuse_msg+=$'\n'
fi
yazpt_state[excuse]=$excuse_msg
}

APP_CHEERS_PATTERNS=(
  "git push"
  "git_ship"
)

function @yazpt_segment_cheers() {
local do_cheers=false
local cheers_msg=''
# check whether exit code of last command was 0
if $CHEERS_ENABLED && [ "$yazpt_state[exit_code]" -eq 0 ] ; then
  # check whether $LAST_COMMAND contained any of the APP_CHEERS_PATTERNS
  for pattern in "${APP_CHEERS_PATTERNS[@]}"; do
    if [[ "$LAST_COMMAND" == *"$pattern"* ]]; then
      do_cheers=true
      break
    fi
  done
fi
if $do_cheers; then
  cheers_msg=' 🍻🎉🍻 '
  cheers_msg+="$(compliment)"
  cheers_msg+=$'\n'
  if [[ $OSTYPE == 'darwin'* ]]; then
    # call fireworks if $ITERM2_INTEGRATION_DETECTED is true
    if $ITERM2_INTEGRATION_DETECTED; then
      $HOME/.iterm2/it2attention fireworks
    fi
  fi
fi
yazpt_state[cheers]=$cheers_msg
}

function configure_yazpt {
  YAZPT_LAYOUT=$PROMPT_LAYOUT
  YAZPT_CWD_COLOR=6 # cyan
  YAZPT_EXECTIME_MIN_SECONDS=1
}

zinit ice wait'!0' atload'source "$yazpt_default_preset_file"; \
  configure_yazpt;yazpt_precmd' nocd lucid
zinit light jakshin/yazpt

# install git-extras via zinit instead of brew
zinit lucid wait'0a' for \
as"program" pick"$ZPFX/bin/git-*" src"etc/git-extras-completion.zsh" make"PREFIX=$ZPFX" tj/git-extras


# install direnv via zinit instead of brew
zinit from"gh-r" as"program" mv"direnv* -> direnv" \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    pick"direnv" src="zhook.zsh" for \
        direnv/direnv

# zinit light zdharma-continuum/zui
# zinit light zdharma-continuum/zbrowse # use '^B' to open zbrowse
# zinit wait lucid for zdharma-continuum/zinit-console

zinit snippet OMZ::lib/key-bindings.zsh

zinit light MichaelAquilina/zsh-you-should-use

# install brew's completions except for git
zinit id-as='brew-completions' wait as='completion' lucid \
  atclone='print Installing Brew completions...; \
    rm -rf $ZPFX/brew_comps_others 2>/dev/null; \
    mkdir -p $ZPFX/brew_comps_others; \
    rm -rf $ZPFX/brew_comps_zsh 2>/dev/null; \
    mkdir -p $ZPFX/brew_comps_zsh; \
    command cp -f $(brew --prefix)/share/zsh/site-functions/^_* $ZPFX/brew_comps_others; \
    command cp -f $(brew --prefix)/share/zsh/site-functions/_* $ZPFX/brew_comps_zsh; \
    command rm $ZPFX/brew_comps_zsh/_git; \
    zinit creinstall -q $ZPFX/brew_comps_zsh; \
    zinit cclear; \
    enable-fzf-tab' \
  atload='fpath=( ${(u)fpath[@]:#$(brew --prefix)/share/zsh/site-functions/*} ); \
      fpath+=( $ZPFX/brew_comps_others )' \
  atpull='%atclone' nocompile run-atpull for \
          zdharma-continuum/null

zinit id-as='system-completions' wait as='completion' lucid \
  atclone='print Installing system completions...; \
    mkdir -p $ZPFX/zsh_comps; \
    command cp -f $(brew --prefix)/share/zsh/functions/^_* $ZPFX/zsh_comps; \
    zinit creinstall -q $(brew --prefix)/share/zsh/functions; \
    zinit cclear; \
    enable-fzf-tab' \
  atload='fpath=( ${(u)fpath[@]:#$(brew --prefix)/share/zsh/functions/*} ); \
    fpath+=( $ZPFX/zsh_comps )' \
  atpull="%atclone" nocompile run-atpull for \
       zdharma-continuum/null

zinit id-as='fn-completions' wait as='completion' lucid \
  atclone='print Installing FN completions...; \
    zinit creinstall -q $HOME/.completions; \
    zinit cclear; \
    enable-fzf-tab' \
  atload='fpath=( ${(u)fpath[@]:#$HOME/.completions/*} )' \
  atpull="%atclone" nocompile run-atpull for \
       zdharma-continuum/null


zinit ice wait as'completion' lucid
zinit snippet https://github.com/sainnhe/zsh-completions/blob/master/src/custom/_fzf

#zinit ice wait'0' lucid
#zinit light sainnhe/zsh-completions

zinit ice wait blockf atpull'zinit creinstall -q .' lucid
zinit light zsh-users/zsh-completions

zvm_config() {
  # always identify as xterm-256color to zsh-vi-mode plugin
  ZVM_TERM=xterm-256color
  ZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_BLINKING_BEAM
  ZVM_NORMAL_MODE_CURSOR=$ZVM_CURSOR_BLOCK
  ZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE
}

# See - https://github.com/jeffreytse/zsh-vi-mode#execute-extra-commands
zvm_after_init() {
  zicompinit

  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

  # zoxide
  zinit wait lucid atinit'eval "$(zoxide init zsh --cmd cd)"' nocd for /dev/null

  zicdreplay

  # fzf-tab needs to be loaded after compinit, but before fast-syntax-highlighting
  zinit light Aloxaf/fzf-tab
  # use tmux popups in case we are in tmux
  if [ -n "$TMUX" ]; then
    zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
  fi

  ### NOTE: In order to generate previews, context is needed. The trick to find the context is to type the commmand to the point where completion is needed and press "C-x h". You will need to call "enable-fzf-tab" after this to reenable fzf-tab.

  # preview git -- these don't work with homebrew completions so we make a copy of zsh's version at ~/.completions/_git
  # zsh version - https://github.com/zsh-users/zsh/blob/master/Completion/Unix/Command/_git
  zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
    'git diff $word | delta'
  zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:git-(add|diff|restore):*' popup-pad 50 50

  zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
    'git log --color=always $word'
  zstyle ':fzf-tab:complete:git-log:*' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:git-log:*' popup-pad 50 50

  zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
    'git help $word | bat -plman --color=always'
  zstyle ':fzf-tab:complete::*' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete::*' popup-pad 50 50

  zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
    'case "$group" in
    "commit tag") git show --color=always $word ;;
    *) git show --color=always $word | delta ;;
  esac'
  zstyle ':fzf-tab:complete:git-show:*' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:git-show:*' popup-pad 50 50

  zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
    'case "$group" in
    "modified file") git diff $word | delta ;;
    "recent commit object name") git show --color=always $word | delta ;;
    *) git log --color=always $word ;;
  esac'
  zstyle ':fzf-tab:complete:git-checkout:*' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:git-checkout:*' popup-pad 50 50

  # ignore some patterns
  zstyle ':completion::complete:*:*:files' ignored-patterns '.DS_Store' 'Icon?'
  zstyle ':completion::complete:*:*:globbed-files' ignored-patterns '.DS_Store' 'Icon?'
  zstyle ':completion::complete:rm:*:globbed-files' ignored-patterns

  # disable sort when completing `git checkout`
  zstyle ':completion:*:git-checkout:*' sort false
  # set descriptions format to enable group support
  zstyle ':completion:*:descriptions' format '[%d]'
  # set list-colors to enable filename colorizing
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
  # switch group using `,` and `.`
  zstyle ':fzf-tab:*' switch-group 'F1' 'F2'
  # give a preview of commandline arguments when completing `kill`
  zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
  zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview \
    '[[ $group == "[process ID]" ]] && ps --pid=$word -o cmd --no-headers -w -w'
  zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:wrap
  zstyle ':fzf-tab:complete:(kill|ps):*' popup-pad 0 3

  # preview environment variables
  zstyle ':fzf-tab:complete:(-parameter-|-brace-parameter-|export|unset|expand):*' \
    fzf-preview 'echo ${(P)word}'
  zstyle ':fzf-tab:complete:(-parameter-|-brace-parameter-|export|unset|expand):*' popup-pad 0 1
  zstyle ':fzf-tab:complete:(-parameter-|-brace-parameter-|export|unset|expand):*' fzf-flags --preview-window=down:1:wrap

  # use eza for previewing commands that work at directory/path level
  zstyle ':fzf-tab:complete:(cd|eza|ls|fd|find|cp|mv|rm):argument-rest' fzf-preview 'eza --git -a -1 --color=always --icons $realpath'
  zstyle ':fzf-tab:complete:(cd|eza|ls|fd|find|cp|mv|rm):argument-rest' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:(cd|eza|ls|fd|find|cp|mv|rm):argument-rest' popup-pad 50 50

  # use lessfilter to preview content files, directories etc.
  zstyle ':fzf-tab:complete:(cat|bat|vim|nvim|vimr|nvim-qt):argument-rest' fzf-preview 'LESSOPEN="|~/sw/assets/lessfilter %s" less ${(Q)realpath}'
  zstyle ':fzf-tab:complete:(cat|bat|vim|nvim|vimr|nvim-qt):argument-rest' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:(cat|bat|vim|nvim|vimr|nvim-qt):argument-rest' popup-pad 50 50

  if [[ $OSTYPE == 'linux'* ]]; then
    zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'
    zstyle ':fzf-tab:complete:systemctl-*:*' popup-pad 50 50
  fi

  zstyle ':fzf-tab:complete:tldr:argument-1' fzf-preview 'tldr --color always $word'
  zstyle ':fzf-tab:complete:tldr:argument-1' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:tldr:argument-1' popup-pad 50 50

  zstyle ':fzf-tab:complete:man:' fzf-preview 'batman --color=always $word'
  zstyle ':fzf-tab:complete:man:' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:man:' popup-pad 50 50

  zstyle ':fzf-tab:complete:-command-:*' fzf-preview \
    '(out=$(tldr --color always "$word") 2>/dev/null && echo $out) || (out=$(batman --color=always "$word") 2>/dev/null && echo $out) || (out=$(source ~/.zprofile && which "$word") && echo $out) || echo "${(P)word}"'
  zstyle ':fzf-tab:complete:-command-:*' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:-command-:*' popup-pad 50 50


  zstyle ':fzf-tab:complete:brew-(install|uninstall|search|info):*-argument-rest' fzf-preview 'brew info $word'
  zstyle ':fzf-tab:complete:brew-(install|uninstall|search|info):*-argument-rest' fzf-flags --preview-window=right:70%:wrap
  zstyle ':fzf-tab:complete:brew-(install|uninstall|search|info):*-argument-rest' popup-pad 50 50

  # these should be the last zinit plugins
  FAST_WORK_DIR=~/.config/fsh
  zinit wait lucid light-mode for \
      zdharma-continuum/fast-syntax-highlighting \
    atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions
} # end zvm_after_init

zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode

# Set LANGTOOL env to empty values
export LANGTOOL_USERNAME=""
export LANGTOOL_API_KEY=""
export LANGTOOL_HTTP_URI=""

# FluxNinja Aperture Tilt Env Vars
export TILT_APERTURE_SSH_KEY_PUB=$HOME/.ssh/id_ed25519.pub
export TILT_GRAFANA_REPO=$HOME/Work/fluxninja/grafana

if [[ $OSTYPE == 'linux'* ]]; then
  export QT_QPA_FONTDIR=~/.local/share/fonts
fi

# source .zshrc_local if it exists
if [ -f ~/.zshrc_local ]; then
  source ~/.zshrc_local
fi

if [ -z "$CHEERS_ENABLED" ]; then
  CHEERS_ENABLED=true
fi

if [ -z "$INSULTS_ENABLED" ]; then
  INSULTS_ENABLED=true
fi

if [ -z "$INSULTS_OFFENSIVE_ENABLED" ]; then
  INSULTS_OFFENSIVE_ENABLED=false
fi

if $INSULTS_ENABLED; then
  source $HOME/sw/assets/insults.zsh
fi

if [ -z "$CNF_TF_ENABLED" ]; then
  CNF_TF_ENABLED=true
fi

if $CNF_TF_ENABLED; then
  source $HOME/sw/assets/zsh_cnf.zsh
fi

if [ -z "$ASCII_WELCOME_ENABLED" ]; then
  ASCII_WELCOME_ENABLED=true
fi

if [ -z "$ASCII_WELCOME_SNOOZE" ]; then
  ASCII_WELCOME_SNOOZE=43200
fi

if [ -z "$AUTO_CLEAR_CACHES" ]; then
  AUTO_CLEAR_CACHES=true
fi

if [ -z "$AUTO_CLEAR_CACHES_SECONDS" ]; then
  AUTO_CLEAR_CACHES_SECONDS=7890000
fi

if $AUTO_CLEAR_CACHES; then
  if [ -f "$HOME/.auto_clear_caches" ]; then
    if [ "$(($(date +%s) - $(cat $HOME/.auto_clear_caches)))" -lt "$AUTO_CLEAR_CACHES_SECONDS" ]; then
      AUTO_CLEAR_CACHES=false
    else
      echo $(date +%s) > $HOME/.auto_clear_caches
    fi
  else
    echo $(date +%s) > $HOME/.auto_clear_caches
  fi
fi

if $AUTO_CLEAR_CACHES; then
  # ask the user if they want to clear go installation as it bloats over time
  printf "Go installation grows over time and it's recommended to clear it periodically.\n"
  if gum confirm "Do you want to clear the go installation?"; then
    echo "Clearing go installation..."
    sudo rm -rf $HOME/go
    echo "Go installation cleared."
    echo "Sync FluxNinja repos..."
    $HOME/sw/bin/sync_fluxninja.sh
  fi
  if gum confirm "Do you want to prune docker builder cache?"; then
    echo "Pruning docker builder cache..."
    docker builder prune -f -a
    echo "Docker builder cache pruned."
    echo "Pruning docker system..."
    docker system prune -f -a
    echo "Docker system pruned."
  fi
fi

# check timestamp when welcome was last displayed and if it's less than ASCII_WELCOME_SNOOZE then disable ascii art. Also update the timestamp if ascii art is going to be displayed.
if $ASCII_WELCOME_ENABLED; then
  if [ -f "$HOME/.ascii_welcome_last_displayed" ]; then
    if [ "$(($(date +%s) - $(cat $HOME/.ascii_welcome_last_displayed)))" -lt "$ASCII_WELCOME_SNOOZE" ]; then
      ASCII_WELCOME_ENABLED=false
    else
      echo $(date +%s) > $HOME/.ascii_welcome_last_displayed
    fi
  else
    echo $(date +%s) > $HOME/.ascii_welcome_last_displayed
  fi
fi

# check whether ascii art is enabled
if $ASCII_WELCOME_ENABLED; then
  # print a random cowsay using fortune using only *.cow files located at $(brew --prefix)/share/cows
  fortune | cowsay -f $(find $(brew --prefix)/share/cowsay/cows/ -name "*.cow" | shuf -n 1)
  (timeout 2 WTTR_PARAMS="1" ~/sw/bin/wttr.sh ;\
    echo; echo -e "${CYAN_BRIGHT}  ==================================  GitHub Status ================================== ${RESET}"; echo;
    timeout 2 gh status --org coderabbitai) 2&>/dev/null
fi

unset ASCII_WELCOME_ENABLED
unset ASCII_WELCOME_SNOOZE
unset CNF_TF_ENABLED

# run $HOME/sw/bin/autoupdate.zsh by eval it's content
eval "$(cat $HOME/sw/bin/autoupdate.zsh)"

source $HOME/.aliases

if [[ $TERM == *"tmux"* || $TERM == *"screen"* || -n $TMUX ]]; then
  echo -e "${YELLOW_BRIGHT} Welcome to ${CYAN_BRIGHT}tmux${RESET}"
  echo -e "${YELLOW_BRIGHT} Press ${CYAN_BRIGHT}<C-a C-Space>${YELLOW_BRIGHT} for fuzzy menu - look for additional commands under ${CYAN_BRIGHT}menu${YELLOW_BRIGHT} selection${RESET}"
  echo -e "${YELLOW_BRIGHT} Press ${CYAN_BRIGHT}F12${YELLOW_BRIGHT} for tmux menu${RESET}"
else 
  sessions=$(tmux list-sessions 2&> /dev/null | cut -d ":" -f1)
  # check whether $sessions is not empty
  if [ -n "$sessions" ]; then
    echo -e "\n${BOLD}${CYAN_BRIGHT}  == Active tmux Sessions ==${RESET}";
    for i in $sessions ; do
        echo -e "${BOLD}${YELLOW_BRIGHT}     [*] $i"
    done;
  fi
  echo -e "${CYAN_BRIGHT}  == Run tms to create and select tmux sessions == ${RESET}"
  echo -e "${RESET}"
fi

echo -e "${YELLOW_BRIGHT} Press ${CYAN_BRIGHT}<TAB>${YELLOW_BRIGHT} to invoke auto-complete menu for commands, arguments and options${RESET}"
echo

# override terminal profile colors using escape codes
if $SET_TERMINAL_COLORS; then
  $HOME/sw/assets/set_colors.zsh
fi



================================================
FILE: dot_completions/_circleci
================================================
#compdef circleci

# zsh completion for circleci                             -*- shell-script -*-

__circleci_debug()
{
    local file="$BASH_COMP_DEBUG_FILE"
    if [[ -n ${file} ]]; then
        echo "$*" >> "${file}"
    fi
}

_circleci()
{
    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local lastParam lastChar flagPrefix requestComp out directive comp lastComp noSpace
    local -a completions

    __circleci_debug "\n========= starting completion logic =========="
    __circleci_debug "CURRENT: ${CURRENT}, words[*]: ${words[*]}"

    # The user could have moved the cursor backwards on the command-line.
    # We need to trigger completion from the $CURRENT location, so we need
    # to truncate the command-line ($words) up to the $CURRENT location.
    # (We cannot use $CURSOR as its value does not work when a command is an alias.)
    words=("${=words[1,CURRENT]}")
    __circleci_debug "Truncated words[*]: ${words[*]},"

    lastParam=${words[-1]}
    lastChar=${lastParam[-1]}
    __circleci_debug "lastParam: ${lastParam}, lastChar: ${lastChar}"

    # For zsh, when completing a flag with an = (e.g., circleci -n=<TAB>)
    # completions must be prefixed with the flag
    setopt local_options BASH_REMATCH
    if [[ "${lastParam}" =~ '-.*=' ]]; then
        # We are dealing with a flag with an =
        flagPrefix="-P ${BASH_REMATCH}"
    fi

    # Prepare the command to obtain completions
    requestComp="${words[1]} __complete ${words[2,-1]}"
    if [ "${lastChar}" = "" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go completion code.
        __circleci_debug "Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __circleci_debug "About to call: eval ${requestComp}"

    # Use eval to handle any environment variables and such
    out=$(eval ${requestComp} 2>/dev/null)
    __circleci_debug "completion output: ${out}"

    # Extract the directive integer following a : from the last line
    local lastLine
    while IFS='\n' read -r line; do
        lastLine=${line}
    done < <(printf "%s\n" "${out[@]}")
    __circleci_debug "last line: ${lastLine}"

    if [ "${lastLine[1]}" = : ]; then
        directive=${lastLine[2,-1]}
        # Remove the directive including the : and the newline
        local suffix
        (( suffix=${#lastLine}+2))
        out=${out[1,-$suffix]}
    else
        # There is no directive specified.  Leave $out as is.
        __circleci_debug "No directive found.  Setting do default"
        directive=0
    fi

    __circleci_debug "directive: ${directive}"
    __circleci_debug "completions: ${out}"
    __circleci_debug "flagPrefix: ${flagPrefix}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        __circleci_debug "Completion received error. Ignoring completions."
        return
    fi

    local activeHelpMarker="_activeHelp_ "
    local endIndex=${#activeHelpMarker}
    local startIndex=$((${#activeHelpMarker}+1))
    local hasActiveHelp=0
    while IFS='\n' read -r comp; do
        # Check if this is an activeHelp statement (i.e., prefixed with $activeHelpMarker)
        if [ "${comp[1,$endIndex]}" = "$activeHelpMarker" ];then
            __circleci_debug "ActiveHelp found: $comp"
            comp="${comp[$startIndex,-1]}"
            if [ -n "$comp" ]; then
                compadd -x "${comp}"
                __circleci_debug "ActiveHelp will need delimiter"
                hasActiveHelp=1
            fi

            continue
        fi

        if [ -n "$comp" ]; then
            # If requested, completions are returned with a description.
            # The description is preceded by a TAB character.
            # For zsh's _describe, we need to use a : instead of a TAB.
            # We first need to escape any : as part of the completion itself.
            comp=${comp//:/\\:}

            local tab="$(printf '\t')"
            comp=${comp//$tab/:}

            __circleci_debug "Adding completion: ${comp}"
            completions+=${comp}
            lastComp=$comp
        fi
    done < <(printf "%s\n" "${out[@]}")

    # Add a delimiter after the activeHelp statements, but only if:
    # - there are completions following the activeHelp statements, or
    # - file completion will be performed (so there will be choices after the activeHelp)
    if [ $hasActiveHelp -eq 1 ]; then
        if [ ${#completions} -ne 0 ] || [ $((directive & shellCompDirectiveNoFileComp)) -eq 0 ]; then
            __circleci_debug "Adding activeHelp delimiter"
            compadd -x "--"
            hasActiveHelp=0
        fi
    fi

    if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
        __circleci_debug "Activating nospace."
        noSpace="-S ''"
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local filteringCmd
        filteringCmd='_files'
        for filter in ${completions[@]}; do
            if [ ${filter[1]} != '*' ]; then
                # zsh requires a glob pattern to do file filtering
                filter="\*.$filter"
            fi
            filteringCmd+=" -g $filter"
        done
        filteringCmd+=" ${flagPrefix}"

        __circleci_debug "File filtering command: $filteringCmd"
        _arguments '*:filename:'"$filteringCmd"
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subdir
        subdir="${completions[1]}"
        if [ -n "$subdir" ]; then
            __circleci_debug "Listing directories in $subdir"
            pushd "${subdir}" >/dev/null 2>&1
        else
            __circleci_debug "Listing directories in ."
        fi

        local result
        _arguments '*:dirname:_files -/'" ${flagPrefix}"
        result=$?
        if [ -n "$subdir" ]; then
            popd >/dev/null 2>&1
        fi
        return $result
    else
        __circleci_debug "Calling _describe"
        if eval _describe "completions" completions $flagPrefix $noSpace; then
            __circleci_debug "_describe found some completions"

            # Return the success of having called _describe
            return 0
        else
            __circleci_debug "_describe did not find completions."
            __circleci_debug "Checking if we should do file completion."
            if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
                __circleci_debug "deactivating file completion"

                # We must return an error code here to let zsh know that there were no
                # completions found by _describe; this is what will trigger other
                # matching algorithms to attempt to find completions.
                # For example zsh can match letters in the middle of words.
                return 1
            else
                # Perform file completion
                __circleci_debug "Activating file completion"

                # We must return the result of this command, so it must be the
                # last command, or else we must store its result to return it.
                _arguments '*:filename:_files'" ${flagPrefix}"
            fi
        fi
    fi
}

# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_circleci" ]; then
    _circleci
fi



================================================
FILE: dot_completions/_gt
================================================
#compdef gt
###-begin-gt-completions-###
#
# yargs command completion script
#
# Installation: /opt/homebrew/bin/gt completion >> ~/.zshrc
#    or /opt/homebrew/bin/gt completion >> ~/.zprofile on OSX.
#
_gt_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
  ' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" $(brew --prefix)/bin/gt --get-yargs-completions "${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _gt_yargs_completions gt
###-end-gt-completions-###




================================================
FILE: dot_completions/_parallel
================================================
 #compdef parallel

(( $+functions[_comp_parallel] )) ||
 eval "$(parallel --shell-completion auto)" &&
 _comp_parallel




================================================
FILE: dot_config/broot/conf.hjson
================================================
###############################################################
# This configuration file lets you
# - define new commands
# - change the shortcut or triggering keys of built-in verbs
# - change the colors
# - set default values for flags
# - set special behaviors on specific paths
# - and more...
#
# Configuration documentation is available at
#     https://dystroy.org/broot
#
# This file's format is Hjson ( https://hjson.github.io/ ). Some
# properties are commented out. To enable them, remove the `#`.
#
###############################################################
{

    ###############################################################
    # Default flags
    # You can set up flags you want broot to start with by
    # default, for example `default_flags="ihp"` if you usually want
    # to see hidden and gitignored files and the permissions (then
    # if you don't want the hidden files you can launch `br -H`)
    # A popular flag is the `g` one which displays git related info.
    #
    # default_flags:

    ###############################################################
    # Date/Time format
    # If you want to change the format for date/time, uncomment the
    # following line and change it according to
    # https://docs.rs/chrono/0.4.11/chrono/format/strftime/index.html
    #
    # date_time_format: %Y/%m/%d %R

    ###############################################################
    # uncomment to activate modal mode
    #
    # (you really should read https://dystroy.org/broot/modal/
    # before as it may not suit everybody even among vim users)
    #
    # modal: true

    ###############################################################
    # Whether to mark the selected line with a triangle
    #
    show_selection_mark: true

    ###############################################################
    # Column order
    # cols_order, if specified, must be a permutation of the following
    # array. You should keep the name at the end as it has a variable
    # length.
    #
    # cols_order: [
    #     mark
    #     git
    #     size
    #     permission
    #     date
    #     count
    #     branch
    #     name
    # ]

    ###############################################################
    # True Colors
    # If this parameter isn't set, broot tries to automatically
    # determine whether true colors (24 bits) are available.
    # As this process is unreliable, you may uncomment this setting
    # and set it to false or true if you notice the colors in
    # previewed images are too off.
    #
    # true_colors: false

    ###############################################################
    # Icons
    # If you want to display icons in broot, uncomment this line
    # (see https://dystroy.org/broot/icons for installation and
    # troubleshooting)
    #
    # icon_theme: vscode

    ###############################################################
    # Special paths
    # If some paths must be handled specially, uncomment (and change
    # this section as per the examples)
    #
    # special_paths: {
    #     "/media/slow-backup-disk"    : no-enter
    #     "/home/dys/useless"    : hide
    #     "/home/dys/my-link-I-want-to-explore"    : enter
    # }

    ###############################################################
    # Quit on last cancel
    # You can usually cancel the last state change on escape.
    # If you want the escape key to quit broot when there's nothing
    # to cancel (for example when you just opened broot), uncomment
    # this parameter
    # 
    # quit_on_last_cancel: true

    ###############################################################
    # Search modes
    #
    # broot allows many search modes.
    # A search mode is defined by
    # - the way to search: 'fuzzy', 'exact', 'regex', or 'tokens'.
    # - where to search: file 'name', 'path', or file 'content'
    # A search pattern may for example be "fuzzy path" (default),
    # "regex content" or "exact path".
    #
    # The search mode is selected from its prefix. For example, if
    # you type "abc", the default mode is "fuzzy path". If you type
    # "/abc", the mode is "regex path". If you type "rn/abc", the mode
    # is "regex name".
    #
    # This mapping may be modified. You may want to dedicate the
    # empty prefix (the one which doesn't need a '/') to the
    # search mode you use most often. The example below makes it
    # easy to search on name rather than on the subpath.
    #
    # More information on
    #  https://dystroy.org/broot/input/#the-filtering-pattern
    #
    # search_modes: {
    #     <empty>: fuzzy name
    #     /: regex name
    # }

    ###############################################################
    # Verbs and shortcuts
    # You can define your own commands which would be applied to
    # the selection.
    # You'll also find below verbs that you can customize or enable.
    verbs: [

      {
          name: open-code
          key: enter
          extensions: [
              go
              mod
              work
              gitignore
              c
              cc
              cpp
              cs
              css
              java
              js
              sass
              scss
              less
              vue
              cfg
              json
              jsx
              log
              lua
              md
              php
              pl
              py
              rb
              ts
              tsx
              txt
              cfg
              conf
              yaml
              yml
              toml
              xml
              xsl
              xsd
              vim
              vimrc
              gitconfig
              gitignore
              sh
              zsh
              bash
          ]
          execution: "$EDITOR +{line} {file}"
          working_dir: "{root}"
          leave_broot: false
      }
    # Example 1: launching `tail -n` on the selected file (leaving broot)
    # {
    #     name: tail_lines
    #     invocation: tl {lines_count}
    #     execution: "tail -f -n {lines_count} {file}"
    # }

    # Example 2: creating a new file without leaving broot
    # {
    #     name: touch
    #     invocation: touch {new_file}
    #     execution: "touch {directory}/{new_file}"
    #     leave_broot: false
    # }

    # A standard recommended command for editing files, that you
    # can customize.
    # If $EDITOR isn't set on your computer, you should either set it using
    #  something similar to
    #   export EDITOR=nvim
    #  or just replace it with your editor of choice in the 'execution'
    #  pattern.
    #  If your editor is able to open a file on a specific line, use {line}
    #   so that you may jump directly at the right line from a preview.
    # Example:
    #  execution: nvim +{line} {file}
    {
        invocation: edit
        shortcut: e
        execution: "$EDITOR +{line} {file}"
        leave_broot: false
    }

    # A convenient shortcut to create new text files in
    # the current directory or below
    {
        invocation: create {subpath}
        execution: "$EDITOR {directory}/{subpath}"
        leave_broot: false
    }

    {
        invocation: git_diff
        shortcut: gd
        leave_broot: false
        execution: "git difftool -y {file}"
    }

    # On ctrl-b, propose the creation of a copy of the selection.
    # While this might occasionally be useful, this verb is mostly here
    # as an example to demonstrate rare standard groups like {file-stem}
    # and {file-dot-extension} and the auto_exec verb property which
    # allows verbs not executed until you hit enter
    {
        invocation: "backup {version}"
        key: ctrl-b
        leave_broot: false
        auto_exec: false
        execution: "cp -r {file} {parent}/{file-stem}-{version}{file-dot-extension}"
    }

    # This verb lets you launch a terminal on ctrl-T
    # (on exit you'll be back in broot)
    {
        invocation: terminal
        key: ctrl-t
        execution: "$SHELL"
        set_working_dir: true
        leave_broot: false
    }

    # Here's an example of a shortcut bringing you to your home directory
    # {
    #     invocation: home
    #     key: ctrl-home
    #     execution: ":focus ~"
    # }

    # A popular set of shortcuts for going up and down:
    #
    # {
    #     key: ctrl-k
    #     execution: ":line_up"
    # }
    # {
    #     key: ctrl-j
    #     execution: ":line_down"
    # }
    # {
    #     key: ctrl-u
    #     execution: ":page_up"
    # }
    # {
    #     key: ctrl-d
    #     execution: ":page_down"
    # }

    # If you develop using git, you might like to often switch
    # to the git status filter:
    # {
    #     key: ctrl-g
    #     execution: ":toggle_git_status"
    # }

    # You can reproduce the bindings of Norton Commander
    # on copying or moving to the other panel:
    # {
    #     key: F5
    #     external: "cp -r {file} {other-panel-directory}"
    #     leave_broot: false
    # }
    # {
    #     key: F6
    #     external: "mv {file} {other-panel-directory}"
    #     leave_broot: false
    # }
    ]

    ###############################################################
    # Skin
    # If you want to change the colors of broot,
    # uncomment the following bloc and start messing
    # with the various values.
    # A skin entry value is made of two parts separated with a '/':
    # The first one is the skin for the active panel.
    # The second one, optional, is the skin for non active panels.
    # You may find explanations and other skins on
    #  https://dystroy.org/broot/skins
    ###############################################################
    # If you only want to set the default color and a transparent
    # background, uncomment this simplified skin:
    # skin: {
    #     default: none none / gray(20) none
    # }
    #
    # To experiment with a whole skin, uncomment this one:
    # skin: {
    #     default: gray(23) none / gray(20) none
    #     tree: ansi(94) None / gray(3) None
    #     parent: gray(18) None / gray(13) None
    #     file: gray(20) None / gray(15) None
    #     directory: ansi(208) None Bold / ansi(172) None bold
    #     exe: Cyan None
    #     link: Magenta None
    #     pruning: gray(12) None Italic
    #     perm__: gray(5) None
    #     perm_r: ansi(94) None
    #     perm_w: ansi(132) None
    #     perm_x: ansi(65) None
    #     owner: ansi(138) None
    #     group: ansi(131) None
    #     count: ansi(136) gray(3)
    #     dates: ansi(66) None
    #     sparse: ansi(214) None
    #     content_extract: ansi(29) None
    #     content_match: ansi(34) None
    #     git_branch: ansi(229) None
    #     git_insertions: ansi(28) None
    #     git_deletions: ansi(160) None
    #     git_status_current: gray(5) None
    #     git_status_modified: ansi(28) None
    #     git_status_new: ansi(94) None Bold
    #     git_status_ignored: gray(17) None
    #     git_status_conflicted: ansi(88) None
    #     git_status_other: ansi(88) None
    #     selected_line: None gray(5) / None gray(4)
    #     char_match: Yellow None
    #     file_error: Red None
    #     flag_label: gray(15) None
    #     flag_value: ansi(208) None Bold
    #     input: White None / gray(15) gray(2)
    #     status_error: gray(22) ansi(124)
    #     status_job: ansi(220) gray(5)
    #     status_normal: gray(20) gray(3) / gray(2) gray(2)
    #     status_italic: ansi(208) gray(3) / gray(2) gray(2)
    #     status_bold: ansi(208) gray(3) Bold / gray(2) gray(2)
    #     status_code: ansi(229) gray(3) / gray(2) gray(2)
    #     status_ellipsis: gray(19) gray(1) / gray(2) gray(2)
    #     purpose_normal: gray(20) gray(2)
    #     purpose_italic: ansi(178) gray(2)
    #     purpose_bold: ansi(178) gray(2) Bold
    #     purpose_ellipsis: gray(20) gray(2)
    #     scrollbar_track: gray(7) None / gray(4) None
    #     scrollbar_thumb: gray(22) None / gray(14) None
    #     help_paragraph: gray(20) None
    #     help_bold: ansi(208) None Bold
    #     help_italic: ansi(166) None
    #     help_code: gray(21) gray(3)
    #     help_headers: ansi(208) None
    #     help_table_border: ansi(239) None
    #     preview: gray(20) gray(1) / gray(18) gray(2)
    #     preview_line_number: gray(12) gray(3)
    #     preview_match: None ansi(29)
    #     hex_null: gray(11) None
    #     hex_ascii_graphic: gray(18) None
    #     hex_ascii_whitespace: ansi(143) None
    #     hex_ascii_other: ansi(215) None
    #     hex_non_ascii: ansi(167) None
    # }
skin: {
	default: rgb(235, 219, 178) none / rgb(189, 174, 147) none
	tree: rgb(168, 153, 132) None / rgb(102, 92, 84) None
	parent: rgb(235, 219, 178) none / rgb(189, 174, 147) none Italic
	file: None None / None  None Italic
	directory: rgb(131, 165, 152) None Bold / rgb(131, 165, 152) None
	exe: rgb(184, 187, 38) None
	link: rgb(104, 157, 106) None
	pruning: rgb(124, 111, 100) None Italic
	perm__: None None
	perm_r: rgb(215, 153, 33) None
	perm_w: rgb(204, 36, 29) None
	perm_x: rgb(152, 151, 26) None
	owner: rgb(215, 153, 33) None Bold
	group: rgb(215, 153, 33) None
	count: rgb(69, 133, 136) rgb(50, 48, 47)
	dates: rgb(168, 153, 132) None
	sparse: rgb(250, 189,47) None
	content_extract: ansi(29) None Italic
	content_match: ansi(34) None Bold
	git_branch: rgb(251, 241, 199) None
	git_insertions: rgb(152, 151, 26) None
	git_deletions: rgb(190, 15, 23) None
	git_status_current: rgb(60, 56, 54) None
	git_status_modified: rgb(152, 151, 26) None
	git_status_new: rgb(104, 187, 38) None Bold
	git_status_ignored: rgb(213, 196, 161) None
	git_status_conflicted: rgb(204, 36, 29) None
	git_status_other: rgb(204, 36, 29) None
	selected_line: None rgb(60, 56, 54) / None rgb(50, 48, 47)
	char_match: rgb(250, 189, 47) None
	file_error: rgb(251, 73, 52) None
	flag_label: rgb(189, 174, 147) None
	flag_value: rgb(211, 134, 155) None Bold
	input: rgb(251, 241, 199) None / rgb(189, 174, 147) None Italic
	status_error: rgb(213, 196, 161) rgb(204, 36, 29)
	status_job: rgb(250, 189, 47) rgb(60, 56, 54)
	status_normal: None rgb(40, 38, 37) / None None
	status_italic: rgb(211, 134, 155) rgb(40, 38, 37) Italic / None None
	status_bold: rgb(211, 134, 155) rgb(40, 38, 37) Bold / None None
	status_code: rgb(251, 241, 199) rgb(40, 38, 37) / None None
	status_ellipsis: rgb(251, 241, 199) rgb(40, 38, 37)  Bold / None None
	purpose_normal: None None
	purpose_italic: rgb(177, 98, 134) None Italic
	purpose_bold: rgb(177, 98, 134) None Bold
	purpose_ellipsis: None None
	scrollbar_track: rgb(80, 73, 69) None / rgb(50, 48, 47) None
	scrollbar_thumb: rgb(213, 196, 161) None / rgb(102, 92, 84) None
	help_paragraph: None None
	help_bold: rgb(214, 93, 14) None Bold
	help_italic: rgb(211, 134, 155) None Italic
	help_code: rgb(142, 192, 124) rgb(50, 48, 47)
	help_headers: rgb(254, 128, 25) None Bold
	help_table_border: rgb(80, 73, 69) None
	preview_title: rgb(235, 219, 178) rgb(40, 40, 40) / rgb(189, 174, 147) rgb(40, 40, 40)
	preview: rgb(235, 219, 178) rgb(40, 40, 40) / rgb(235, 219, 178) rgb(40, 40, 40)
	preview_line_number: rgb(124, 111, 100) None / rgb(124, 111, 100) rgb(40, 40, 40)
	preview_match: None ansi(29) Bold
	hex_null: rgb(189, 174, 147) None
	hex_ascii_graphic: rgb(213, 196, 161) None
	hex_ascii_whitespace: rgb(152, 151, 26) None
	hex_ascii_other: rgb(254, 128, 25) None
	hex_non_ascii: rgb(214, 93, 14) None
	staging_area_title: rgb(235, 219, 178) rgb(40, 40, 40) / rgb(189, 174, 147) rgb(40, 40, 40)
	mode_command_mark: gray(5) ansi(204) Bold
}

    ###############################################################
    # File Extension Colors
    #
    # uncomment and modify the next section if you want to color
    # file name depending on their extension
    #
    # ext_colors: {
    #     png: rgb(255, 128, 75)
    #     rs: yellow
    # }


    ###############################################################
    # Max Panels Count
    #
    # Change this if you sometimes want to have more than 2 panels
    # open
    # max_panels_count: 2
}



================================================
FILE: dot_config/fsh/current_theme.zsh
================================================
zstyle :plugin:fast-syntax-highlighting theme "default"
typeset -g FAST_THEME_NAME="default"
: ${FAST_HIGHLIGHT_STYLES[defaultdefault]:=none}
: ${FAST_HIGHLIGHT_STYLES[defaultunknown-token]:=fg=red,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultreserved-word]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultalias]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultsuffix-alias]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultbuiltin]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultfunction]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultcommand]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultprecommand]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultcommandseparator]:=none}
: ${FAST_HIGHLIGHT_STYLES[defaulthashed-command]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultpath]:=fg=magenta}
: ${FAST_HIGHLIGHT_STYLES[defaultpath_pathseparator]:=}
: ${FAST_HIGHLIGHT_STYLES[defaultglobbing]:=fg=blue,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultglobbing-ext]:=fg=13}
: ${FAST_HIGHLIGHT_STYLES[defaulthistory-expansion]:=fg=blue,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultsingle-hyphen-option]:=fg=cyan}
: ${FAST_HIGHLIGHT_STYLES[defaultdouble-hyphen-option]:=fg=cyan}
: ${FAST_HIGHLIGHT_STYLES[defaultback-quoted-argument]:=none}
: ${FAST_HIGHLIGHT_STYLES[defaultsingle-quoted-argument]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultdouble-quoted-argument]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultdollar-quoted-argument]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultback-or-dollar-double-quoted-argument]:=fg=cyan}
: ${FAST_HIGHLIGHT_STYLES[defaultback-dollar-quoted-argument]:=fg=cyan}
: ${FAST_HIGHLIGHT_STYLES[defaultassign]:=none}
: ${FAST_HIGHLIGHT_STYLES[defaultredirection]:=none}
: ${FAST_HIGHLIGHT_STYLES[defaultcomment]:=fg=black,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultvariable]:=fg=113}
: ${FAST_HIGHLIGHT_STYLES[defaultmathvar]:=fg=blue,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultmathnum]:=fg=magenta}
: ${FAST_HIGHLIGHT_STYLES[defaultmatherr]:=fg=red}
: ${FAST_HIGHLIGHT_STYLES[defaultassign-array-bracket]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultfor-loop-variable]:=none}
: ${FAST_HIGHLIGHT_STYLES[defaultfor-loop-number]:=fg=magenta}
: ${FAST_HIGHLIGHT_STYLES[defaultfor-loop-operator]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultfor-loop-separator]:=fg=yellow,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultexec-descriptor]:=fg=yellow,bold}
: ${FAST_HIGHLIGHT_STYLES[defaulthere-string-tri]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaulthere-string-text]:=fg=18}
: ${FAST_HIGHLIGHT_STYLES[defaulthere-string-var]:=fg=cyan,bg=18}
: ${FAST_HIGHLIGHT_STYLES[defaultsecondary]:=free}
: ${FAST_HIGHLIGHT_STYLES[defaultcase-input]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultcase-parentheses]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultcase-condition]:=bg=blue}
: ${FAST_HIGHLIGHT_STYLES[defaultcorrect-subtle]:=fg=12}
: ${FAST_HIGHLIGHT_STYLES[defaultincorrect-subtle]:=fg=red}
: ${FAST_HIGHLIGHT_STYLES[defaultsubtle-separator]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultsubtle-bg]:=bg=18}
: ${FAST_HIGHLIGHT_STYLES[defaultpath-to-dir]:=fg=magenta,underline}
: ${FAST_HIGHLIGHT_STYLES[defaultpaired-bracket]:=bg=blue}
: ${FAST_HIGHLIGHT_STYLES[defaultbracket-level-1]:=fg=green,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultbracket-level-2]:=fg=yellow,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultbracket-level-3]:=fg=cyan,bold}
: ${FAST_HIGHLIGHT_STYLES[defaultglobal-alias]:=bg=blue}
: ${FAST_HIGHLIGHT_STYLES[defaultsubcommand]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultsingle-sq-bracket]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultdouble-sq-bracket]:=fg=green}
: ${FAST_HIGHLIGHT_STYLES[defaultdouble-paren]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultoptarg-string]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[defaultoptarg-number]:=fg=magenta}
: ${FAST_HIGHLIGHT_STYLES[defaultrecursive-base]:=none}



================================================
FILE: dot_config/fsh/secondary_theme.zsh
================================================
: ${FAST_HIGHLIGHT_STYLES[freedefault]:=none}
: ${FAST_HIGHLIGHT_STYLES[freeunknown-token]:=fg=red,bold}
: ${FAST_HIGHLIGHT_STYLES[freereserved-word]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freealias]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freesuffix-alias]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freebuiltin]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freefunction]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freecommand]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freeprecommand]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freecommandseparator]:=none}
: ${FAST_HIGHLIGHT_STYLES[freehashed-command]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freepath]:=fg=166}
: ${FAST_HIGHLIGHT_STYLES[freepath_pathseparator]:=}
: ${FAST_HIGHLIGHT_STYLES[freeglobbing]:=fg=112}
: ${FAST_HIGHLIGHT_STYLES[freeglobbing-ext]:=fg=118}
: ${FAST_HIGHLIGHT_STYLES[freehistory-expansion]:=fg=blue,bold}
: ${FAST_HIGHLIGHT_STYLES[freesingle-hyphen-option]:=fg=110}
: ${FAST_HIGHLIGHT_STYLES[freedouble-hyphen-option]:=fg=110}
: ${FAST_HIGHLIGHT_STYLES[freeback-quoted-argument]:=none}
: ${FAST_HIGHLIGHT_STYLES[freesingle-quoted-argument]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freedouble-quoted-argument]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freedollar-quoted-argument]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freeback-or-dollar-double-quoted-argument]:=fg=110}
: ${FAST_HIGHLIGHT_STYLES[freeback-dollar-quoted-argument]:=fg=110}
: ${FAST_HIGHLIGHT_STYLES[freeassign]:=none}
: ${FAST_HIGHLIGHT_STYLES[freeredirection]:=none}
: ${FAST_HIGHLIGHT_STYLES[freecomment]:=fg=black,bold}
: ${FAST_HIGHLIGHT_STYLES[freevariable]:=none}
: ${FAST_HIGHLIGHT_STYLES[freemathvar]:=fg=blue,bold}
: ${FAST_HIGHLIGHT_STYLES[freemathnum]:=fg=166}
: ${FAST_HIGHLIGHT_STYLES[freematherr]:=fg=red}
: ${FAST_HIGHLIGHT_STYLES[freeassign-array-bracket]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freefor-loop-variable]:=none}
: ${FAST_HIGHLIGHT_STYLES[freefor-loop-number]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freefor-loop-operator]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freefor-loop-separator]:=fg=109}
: ${FAST_HIGHLIGHT_STYLES[freeexec-descriptor]:=fg=yellow,bold}
: ${FAST_HIGHLIGHT_STYLES[freehere-string-tri]:=fg=yellow}
: ${FAST_HIGHLIGHT_STYLES[freehere-string-text]:=bg=19}
: ${FAST_HIGHLIGHT_STYLES[freehere-string-var]:=fg=110,bg=19}
: ${FAST_HIGHLIGHT_STYLES[freesecondary]:=zdharma}
: ${FAST_HIGHLIGHT_STYLES[freecase-input]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freecase-parentheses]:=fg=116}
: ${FAST_HIGHLIGHT_STYLES[freecase-condition]:=bg=19}
: ${FAST_HIGHLIGHT_STYLES[freecorrect-subtle]:=bg=55}
: ${FAST_HIGHLIGHT_STYLES[freeincorrect-subtle]:=bg=52}
: ${FAST_HIGHLIGHT_STYLES[freesubtle-separator]:=none}
: ${FAST_HIGHLIGHT_STYLES[freesubtle-bg]:=bg=18}
: ${FAST_HIGHLIGHT_STYLES[freepath-to-dir]:=fg=166,underline}
: ${FAST_HIGHLIGHT_STYLES[freepaired-bracket]:=bg=blue}
: ${FAST_HIGHLIGHT_STYLES[freebracket-level-1]:=fg=130}
: ${FAST_HIGHLIGHT_STYLES[freebracket-level-2]:=fg=70}
: ${FAST_HIGHLIGHT_STYLES[freebracket-level-3]:=fg=69}
: ${FAST_HIGHLIGHT_STYLES[freeglobal-alias]:=bg=19}
: ${FAST_HIGHLIGHT_STYLES[freesubcommand]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freesingle-sq-bracket]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freedouble-sq-bracket]:=fg=180}
: ${FAST_HIGHLIGHT_STYLES[freedouble-paren]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freeoptarg-string]:=fg=150}
: ${FAST_HIGHLIGHT_STYLES[freeoptarg-number]:=fg=166}
: ${FAST_HIGHLIGHT_STYLES[freerecursive-base]:=fg=183}



================================================
FILE: dot_config/ghostty/config
================================================
theme = Gruvbox Dark
font-family = "Hack Nerd Font Mono Regular"
font-size = 16



================================================
FILE: dot_config/nvim/coc-settings.json
================================================
{
  "notification.statusLineProgress": false,
  "coc.preferences.messageDialogKind": "notification",
  "coc.preferences.enableLinkedEditing": true,
  "extensions.updateCheck": "daily",
  "extensions.silentAutoupdate": true,
  "coc.preferences.formatOnSave": true,
  "semanticTokens.enable": true,
  "colors.enable": true,
  "codeLens.enable": true,
  "codeLens.position": "top",
  "codeLens.separator": "󰌵 CodeLens Actions:",
  "codeLens.subseparator": " 󰝨 ",
  "explorer.icon.enableNerdfont": true,
  "explorer.icon.source": "vim-devicons",
  "explorer.floating.border.title": "Explorer: Press ? to show help",
  "diagnostic.locationlistLevel": "warning",
  "diagnostic.locationlistUpdate": true,
  "diagnostic.autoRefresh": true,
  "diagnostic.hintSign": "",
  "diagnostic.infoSign": "",
  "diagnostic.warningSign": "",
  "diagnostic.errorSign": "",
  "suggest.removeDuplicateItems": true,
  "suggest.completionItemKindLabels": {
    "keyword": "",
    "variable": "",
    "value": "",
    "operator": "",
    "constructor": "",
    "function": "󰊕",
    "reference": "",
    "constant": "",
    "method": "",
    "struct": "",
    "class": "",
    "interface": "",
    "text": "",
    "enum": "",
    "enumMember": "",
    "module": "",
    "color": "",
    "property": "",
    "field": "",
    "unit": "",
    "event": "",
    "file": "",
    "folder": "",
    "snippet": "",
    "typeParameter": "",
    "default": ""
  },
  "snippets.priority": 89,
  "coc.source.zsh.priority": 99,
  "tsserver.maxTsServerMemory": 8192,
  "go.checkForUpdates": "install",
  "go.goplsOptions": {
    "local": "fluxninja.com",
    "gofumpt": true,
    "staticcheck": true,
    "semanticTokens": true,
    "analyses": {
      "nilness": true,
      "unusedparams": true,
      "unusedwrite": true,
      "shadow": true,
      "useany": true
    },
    "codelenses": {
      "gc_details": true,
      "generate": true,
      "regenerate_cgo": true,
      "tidy": true,
      "upgrade_dependency": true,
      "vendor": true
    }
  },
  "languageserver": {
    "graphql": {
      "command": "graphql-lsp",
      "args": [
        "server",
        "-m",
        "stream"
      ],
      "filetypes": [
        "typescript",
        "typescriptreact",
        "graphql"
      ]
    },
    "terraform": {
      "command": "terraform-ls",
      "args": [
        "serve"
      ],
      "filetypes": [
        "terraform",
        "tf"
      ],
      "initializationOptions": {}
    },
    "lua": {
      "command": "lua-lsp",
      "filetypes": [
        "lua"
      ]
    },
    "bash": {
      "command": "bash-language-server",
      "args": [
        "start"
      ],
      "filetypes": [
        "sh",
        "bash"
      ]
    },
    "dockerfile": {
      "command": "docker-langserver",
      "filetypes": [
        "dockerfile"
      ],
      "args": [
        "--stdio"
      ]
    },
    "buf": {
      "command": "bufls",
      "args": [
        "serve"
      ],
      "filetypes": [
        "proto"
      ]
    },
    "jsonnet": {
      "command": "jsonnet-language-server",
      "args": [
        "-t"
      ],
      "rootPatterns": [
        ".git/",
        "jsonnetfile.json"
      ],
      "filetypes": [
        "jsonnet",
        "libsonnet"
      ]
    }
  },
  "diagnostic-languageserver.mergeConfig": true,
  "diagnostic-languageserver.debug": true,
  "diagnostic-languageserver.linters": {
    "golangci-lint2": {
      "command": "golangci-lint",
      "rootPatterns": [
        "go.mod"
      ],
      "debounce": 100,
      "args": [
        "--out-format",
        "json",
        "--deadline",
        "5s",
        "run",
        "%dirname"
      ],
      "sourceName": "golangci-lint",
      "parseJson": {
        "sourceName": "Pos.Filename",
        "sourceNameFilter": true,
        "errorsRoot": "Issues",
        "line": "Pos.Line",
        "column": "Pos.Column",
        "message": "${Text} [${FromLinter}]"
      }
    },
    "zsh": {
      "command": "zsh",
      "args": [
        "-n",
        "%file"
      ],
      "isStdout": false,
      "isStderr": true,
      "sourceName": "zsh",
      "formatLines": 1,
      "formatPattern": [
        "^[^:]+:(\\d+):\\s+(.*)$",
        {
          "line": 1,
          "message": 2
        }
      ]
    }
  },
  "diagnostic-languageserver.filetypes": {
    "go": "golangci-lint2",
    "zsh": "zsh"
  },
  "diagnostic-languageserver.formatFiletypes": {
    "sh": "shfmt",
    "bash": "shfmt",
    "terraform": "tffmt"
  },
  "ltex.configurationTarget": {
    "dictionary": "userExternalFile",
    "disabledRules": "workspaceFolderExternalFile",
    "hiddenFalsePositives": "workspaceFolderExternalFile"
  },
  "ltex.diagnosticSeverity": "warning",
  "ltex.dictionary": {
    "en-US": [
      ":~/Work/fluxninja/aperture/.github/styles/Vocab/FluxNinja/accept.txt"
    ]
  },
  "ltex.completionEnabled": true,
  /*  "ltex.enabled": [
    "bibtex",
    "context",
    "context.tex",
    "html",
    "latex",
    "markdown",
    "org",
    "restructuredtext",
    "rsweave",
    "go",
    "typescript",
    "python",
    "shellscript",
    "java",
    "javascript",
    "javascriptreact",
    "lua"
  ],*/
  "ltex.languageToolHttpServerUri": "${env:LANGTOOL_HTTP_URI}",
  "ltex.languageToolOrg.username": "${env:LANGTOOL_USERNAME}",
  "ltex.languageToolOrg.apiKey": "${env:LANGTOOL_API_KEY}",
  "eslint.packageManager": "pnpm",
  "eslint.experimental.useFlatConfig": true,
  "python.formatting.provider": "black",
  "cSpell.showStatus": false,
  "cSpell.allowCompoundWords": true,
  "cSpell.userWords": [
    "Agentic"
  ],
  "cSpell.dictionaryDefinitions": [
    {
      "name": "FluxNinja",
      "path": "${userHome}/Work/fluxninja/aperture/.github/styles/Vocab/FluxNinja/accept.txt"
    }
  ],
  "cSpell.dictionaries": [
    "FluxNinja",
    "wordsEn",
    "en_US",
    "softwareTerms",
    "misc",
    "go",
    "typescript",
    "bash",
    "node"
  ],
  "cSpell.languageSettings": [
    {
      "languageId": "python",
      "includeRegExpList": [
        "/#.*/",
        "/('''|\"\"\")[^\\1]+?\\1/g",
        "strings"
      ]
    },
    {
      "languageId": "javascript,typescript",
      "includeRegExpList": [
        "CStyleComment",
        "strings"
      ]
    },
    {
      "languageId": "cpp,c",
      // Only check comments and strings
      "includeRegExpList": [
        "CStyleComment",
        "string"
      ],
      // Exclude includes, because they are also strings.
      "ignoreRegExpList": [
        "/#include.*/"
      ]
    },
    {
      "languageId": "go",
      // Only check comments and strings
      "includeRegExpList": [
        "CStyleComment",
        "string"
      ],
      // Exclude imports, because they are also strings.
      "ignoreRegExpList": [
        // ignore multiline imports
        "import\\s*\\((.|[\r\n])*?\\)",
        // ignore single line imports
        "import\\s*.*\".*?\""
      ]
    },
    {
      "languageId": "vim",
      "includeRegExpList": [
        "^\\s*\".*",
        "strings"
      ]
    },
    {
      "languageId": "proto",
      "includeRegExpList": [
        "CStyleComment",
        "string"
      ],
      "ignoreRegExpList": [
        "/package.*/",
        "/import.*/",
        "/option.*/",
        "/@gotags.*/"
      ]
    }
  ],
  "cSpell.enabledLanguageIds": [
    "asciidoc",
    "c",
    "cpp",
    "csharp",
    "css",
    "git-commit",
    "gitcommit",
    "go",
    "handlebars",
    "haskell",
    "html",
    "jade",
    "java",
    "javascript",
    "javascriptreact",
    "json",
    "jsonc",
    "latex",
    "less",
    "markdown",
    "php",
    "plaintext",
    "proto",
    "pug",
    "python",
    "restructuredtext",
    "rust",
    "scala",
    "scss",
    "text",
    "typescript",
    "typescriptreact",
    "vim",
    "yaml",
    "yml"
  ]
}



================================================
FILE: dot_config/nvim/ginit.vim
================================================
if has("linux")
  if exists(':GuiTabline')
      GuiTabline 0
  endif

  if exists(':GuiAdaptiveColor')
      GuiAdaptiveColor 1
  endif

  if exists(':GuiPopupmenu')
      GuiPopupmenu 0
  endif

  if exists(':GuiScrollBar')
      GuiScrollBar 1
  endif

  if exists(':GuiRenderLigatures')
      GuiRenderLigatures 1
  endif

  if exists(':GuiAdaptiveStyle')
      GuiAdaptiveStyle Fusion
  endif

  " Right Click Context Menu (Copy-Cut-Paste)
  nnoremap <silent><RightMouse> :call GuiShowContextMenu()<CR>
  inoremap <silent><RightMouse> <Esc>:call GuiShowContextMenu()<CR>
  xnoremap <silent><RightMouse> :call GuiShowContextMenu()<CR>gv
  snoremap <silent><RightMouse> <C-G>:call GuiShowContextMenu()<CR>gv
endif



================================================
FILE: dot_config/nvim/init.vim
================================================
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath

" Note: Plugins are listed in ~/.vimrc
source ~/.vimrc

lua << EOF

-- update remote plugins to make wilder work
local UpdatePlugs = vim.api.nvim_create_augroup("UpdateRemotePlugs", {})
vim.api.nvim_create_autocmd({ "VimEnter", "VimLeave" }, {
  pattern = "*",
  group = UpdatePlugs,
  command = "runtime! plugin/rplugin.vim",
})
vim.api.nvim_create_autocmd({ "VimEnter", "VimLeave" }, {
  pattern = "*",
  group = UpdatePlugs,
  command = "silent! UpdateRemotePlugins",
})

require'nvim-web-devicons'.setup {
 color_icons = true;
 default = true;
 strict = true;
}

require'nvim-treesitter.configs'.setup {
  ensure_installed = { "go", "rust", "c", "python", "lua", "javascript", "bash", "cpp", "css", "dockerfile", "gomod", "gowork", "graphql", "hcl", "http", "html", "java", "json", "proto", "regex", "rego", "toml", "tsx", "typescript", "vim", "yaml", "make"},
  sync_install = false,
  highlight = {
    enable = true,
    disable = {"yaml"},
  },
  indent = {
    enable = true,
  }
}

require('telescope').load_extension('fzf')

require('bufferline').setup {
    options = {
        mode = "tabs",
        diagnostics = "coc",
        buffer_close_icon = "󰅙",
        modified_icon = "",
        close_icon = "󰅙",
        left_trunc_marker = "",
        right_trunc_marker = "",
        offsets = {
          {filetype = "coc-explorer", text = "File Explorer", text_align = "center"},
          {filetype = "coctree", text = "Tree", text_align = "center"},
          {filetype = "Mundo", text = "Mundo", text_align = "center"},
          {filetype = "MundoDiff", text = "Mundo", text_align = "center"}
        },
        color_icons = true,
        separator_style = "slant",
        hover = {
              enabled = true,
              delay = 100,
              reveal = {'close'}
            },
    }
}


vim.notify = require("notify")
require("telescope").load_extension("notify")
local config = {
        background_colour = "NotifyBackground",
        fps = 30,
        icons = {
          DEBUG = "",
          ERROR = "",
          INFO = "",
          TRACE = "✎",
          WARN = ""
        },
        level = "info",
        minimum_width = 25,
        render = "minimal",
        stages = "fade_in_slide_out",
        timeout = 1000,
        top_down = true
      }
vim.notify.setup(config)

local coc_status_record = {}

function coc_status_notify(msg, level)
  -- if message contains cSpell then return
  if string.find(msg, "cSpell") then
    return
  end
  local notify_opts = { title = "LSP Status", timeout = 500, hide_from_history = true, on_close = reset_coc_status_record, icon = "" }
  -- if coc_status_record is not {} then add it to notify_opts to key called "replace"
  if coc_status_record ~= {} then
    notify_opts["replace"] = coc_status_record.id
    notify_opts["hide_from_history"] = true
  end
  coc_status_record = vim.notify(msg, level, notify_opts)
end

function reset_coc_status_record(window)
  coc_status_record = {}
end

local coc_diag_record = {}

function coc_diag_notify(msg, level)
  local notify_opts = { title = "LSP Diagnostics", timeout = 500, on_close = reset_coc_diag_record, icon = "" }
  -- if coc_diag_record is not {} then add it to notify_opts to key called "replace"
  if coc_diag_record ~= {} then
    notify_opts["replace"] = coc_diag_record.id
    notify_opts["hide_from_history"] = true
  end
  coc_diag_record = vim.notify(msg, level, notify_opts)
end

function reset_coc_diag_record(window)
  coc_diag_record = {}
end

function notify(title, msg, level)
  local notify_opts = { title = title, timeout = 500, icon = "!" }
  vim.notify(msg, level, notify_opts)
end

function notify_job(command, opts)
  local output = ""
  local notification
  local notify = function(msg, level, time)
    local notify_opts = vim.tbl_extend(
      "keep",
      opts or {},
      { title = table.concat(command, " "),
        icon = "",
        timeout = time, 
        replace = notification,
        hide_from_history = true,
      }
    )
    notification = vim.notify(msg, level, notify_opts)
  end
  local on_data = function(_, data)
    output = output .. table.concat(data, "\n")
    -- remove all lines from output except the last 30 and save those to output
    local lines = vim.split(output, "\n")
    local num_lines = vim.fn.len(lines)
    if num_lines > 30 then
      local start_idx = num_lines - 30 + 1
      local end_idx = num_lines
      output = table.concat(lines, "\n", start_idx, end_idx)
    end
    notify(output, "info", false)
  end

    -- Prepare the command to run with Bash
  local command_str = table.concat(command, " ")
  local bash_command = {"bash", "--norc", "--noprofile", "-c", command_str}

  vim.fn.jobstart(bash_command, {
    on_stdout = on_data,
    on_stderr = on_data,
    on_exit = function(_, code)
      if #output == 0 then
        notify("No output of command, exit code: " .. code, "warn", 1000)
      elseif code ~= 0 then
        notify(output, "error", 5000)
      else
        notify(output, "info", 2000)
      end
    end,
  })
end

require"octo".setup()

require("early-retirement").setup({
  retirementAgeMins = 120,
  notificationOnAutoClose = true,
})

function input_args(args, arg_values, callback, cmd)
  if #args == 0 then
    vim.call(callback, cmd, arg_values)
    return
  end
  local arg_name, required = unpack(args[1])
  vim.ui.input({prompt = arg_name .. ': '}, function(input_value)
    -- cancel on escape
    if input_value == nil then
      notify("󰌌 Input", "Command cancelled.", "warn")
      return
    elseif input_value ~= '' then
      table.insert(arg_values, input_value)
      input_args({unpack(args, 2)}, arg_values, callback, cmd)
    elseif required then
      notify("󰌌 Input", "Required argument " .. arg_name .. " is missing.", "error")
    else
      input_args({unpack(args, 2)}, arg_values, callback, cmd)
    end
  end)
end

function select_choice(choices, callback)
  vim.ui.select(choices, {}, function(selected_choice, choice_idx)
    if selected_choice == nil then
      notify("󰄴 Selection", "Command cancelled.", "warn")
      return
    else
      vim.call(callback, selected_choice)
    end
  end)
end

function select_buffer_or_cancel(callback, cmd)
  local visual_mode = vim.fn.visualmode()
  if visual_mode ~= 'V' and visual_mode ~= '' then 
    vim.ui.select({"Yes", "No"}, {
      prompt = "No visual selection, run on whole buffer?"
    }, function(choice, choice_idx)
      if choice == "Yes" then
        vim.cmd("normal! ggVG")
        vim.cmd("normal! <esc>")
        vim.call(callback, cmd)
      end
    end)
  else
    vim.call(callback, cmd)
  end
end

if vim.env.OPENAI_API_KEY ~= nil then
  local CodeGPTModule = require("codegpt")
  require("codegpt.config")

  -- until the plugin integrates with tiktoken
  -- assume 1 token = 4 characters of text
  -- as a rule of thumb
  local heavy_llm_config = {
    model = "gpt-4o",
    max_tokens = 111616,
    max_output_tokens = 16384,
    temperature = 0.1,
  }

  local heavy_llm_commands = {
    "completion",
    "code_edit",
    "debug",
    "opt",
    "tests",
    "chat",
  }

  local light_llm_config = {
    model = "gpt-4o-mini",
    max_tokens = 111614,
    max_output_tokens = 16384,
    temperature = 0.1,
  }

  local light_llm_commands = {
    "explain",
    "question",
    "doc",
  }
  
  local override_config = vim.g["codegpt_commands_defaults"]

  for _, command in ipairs(heavy_llm_commands) do
    -- and merge it with gpt-4-config
    override_config[command] = vim.tbl_extend("force", vim.g.codegpt_commands_defaults[command], heavy_llm_config)
  end

  for _, command in ipairs(light_llm_commands) do
    -- and merge it with gpt-3.5-config
    override_config[command] = vim.tbl_extend("force", vim.g.codegpt_commands_defaults[command], light_llm_config)
  end

  vim.g["codegpt_commands_defaults"] = override_config

  vim.g["codegpt_commands"] = {
    ["refactor"] = {
      user_message_template = "I have the following {{language}} code: ```{{filetype}}\n{{text_selection}}```\nRefactor the above code to reduce it's complexity and improve maintainability and code reuse. Add new methods if needed to improve modularity. Only return the code snippet. {{language_instructions}}",
      callback_type = "replace_lines",
      model = heavy_llm_config.model,
      max_tokens = heavy_llm_config.max_tokens,
      max_output_tokens = heavy_llm_config.max_output_tokens,
      temperature = heavy_llm_config.temperature,
    },
    ["simplify"] = {
      user_message_template = "I have the following {{language}} code: ```{{filetype}}\n{{text_selection}}```\nSimplify the above code to reduce it's complexity by reducing repetition, excessive branching, logic etc. Only return the code snippet. {{language_instructions}}",
      callback_type = "replace_lines",
      model = heavy_llm_config.model,
      max_tokens = heavy_llm_config.max_tokens,
      max_output_tokens = heavy_llm_config.max_output_tokens,
      temperature = heavy_llm_config.temperature,
    },
    ["grammar"] = {
      user_message_template = "I have the following {{language}} text: ```{{filetype}}\n{{text_selection}}```\nFix typos, grammatical errors and improve prose. Only return the text snippet. {{language_instructions}}",
      callback_type = "replace_lines",
    },
    ["fix"] = {
      user_message_template = "I have the following {{language}} code: ```{{filetype}}\n{{text_selection}}```\nAutomatically check for potential issues in the code and fix them. Only return the code snippet. {{language_instructions}}",
      callback_type = "replace_lines",
      model = heavy_llm_config.model,
      max_tokens = heavy_llm_config.max_tokens,
      max_output_tokens = heavy_llm_config.max_output_tokens,
      temperature = heavy_llm_config.temperature,
    }
  }

  local chatgpt_diag_record = {}
  local timer = vim.loop.new_timer()
  local timer_counter = 0

  vim.g["codegpt_hooks"] = {
    request_started = function()
      local notify_opts = { title = "ChatGPT", timeout = 2000, on_close = reset_chatgpt_diag_record, icon = "ﮧ" }
      if chatgpt_diag_record ~= {} then
        notify_opts["replace"] = chatgpt_diag_record.id
        notify_opts["hide_from_history"] = true
      end
      local msg = "Requesting"
      chatgpt_diag_record = vim.notify(msg, "info", notify_opts)
      if not timer:is_active() then
        -- start a timer to update the notification every 100ms
        timer:start(100, 100, vim.schedule_wrap(function()
          if chatgpt_diag_record ~= {} then
            notify_opts["replace"] = chatgpt_diag_record.id
            notify_opts["hide_from_history"] = true
          end
          local msg = "Please wait"
          local time_elapsed = timer_counter * 0.1
          msg = msg .. " | " .. time_elapsed .. "s"
          local status = CodeGPTModule.get_status()
          if status ~= "" then
            msg = msg .. " | " .. status
          end
          chatgpt_diag_record = vim.notify(msg, "info", notify_opts)
          if timer_counter == 3600 then
            reset_chatgpt_diag_record()
          end
          timer_counter = timer_counter + 1
        end))
      end
    end,
    request_finished = vim.schedule_wrap(function()
      local notify_opts = { title = "ChatGPT", timeout = 1000, icon = "ﮧ" }
      vim.notify("Request finished", "info", notify_opts)
      reset_chatgpt_diag_record()
    end)
  }

  function reset_chatgpt_diag_record(window)
    timer:stop()
    timer_counter = 0
    chatgpt_diag_record = {}
  end

  vim.g["codegpt_popup_type"] = "horizontal"
else
   notify("🤖 ChatGPT", "OPENAI_API_KEY is not set", "warn")
end

require('gitsigns').setup()

require('hlslens').setup({
  calm_down = true,
})
local kopts = {noremap = true, silent = true}

vim.api.nvim_set_keymap('n', 'n',
    [[<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>]],
    kopts)
vim.api.nvim_set_keymap('n', 'N',
    [[<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>]],
    kopts)
vim.api.nvim_set_keymap('n', '*', [[*<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', '#', [[#<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', 'g*', [[g*<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', 'g#', [[g#<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', '<Leader>l', '<Cmd>noh<CR>', kopts)

function _G.symbol_line()
  local curwin = vim.g.statusline_winid or 0
  local curbuf = vim.api.nvim_win_get_buf(curwin)
  local ok, line = pcall(vim.api.nvim_buf_get_var, curbuf, 'coc_symbol_line')
  return ok and line or ''
end

vim.o.winbar = '%!v:lua.symbol_line()'

require("scrollbar").setup({
    handle = {
        text = " ",
        blend = 0, -- Integer between 0 and 100. 0 for fully opaque and 100 to full transparent. Defaults to 30.
        color = nil,
        color_nr = nil, -- cterm
        highlight = "Visual",
        hide_if_all_visible = true, -- Hides handle if all lines are visible
    },
    excluded_filetypes = {
        "prompt",
        "TelescopePrompt",
        "noice",
        "coc-explorer",
    },
    handlers = {
        cursor = true,
        diagnostic = true,
        gitsigns = false,
        handle = true,
        search = true,
    },
})

require('tmux-awesome-manager').setup({
  per_project_commands = { -- Configure your per project servers with
      aperture = { { cmd = 'make generate-config-markdown', name = 'Make' } },
  },
  session_name = 'Neovim Terminals',
  use_icon = true, -- use prefix icon
  icon = ' ', -- Prefix icon to use
  project_open_as = 'separated_session', -- Open per_project_commands as.  Default: separated_session
  default_size = '30%', -- on panes, the default size
  open_new_as = 'pane' -- open new command as.  options: pane, window, separated_session.
})

tmux = require('tmux-awesome-manager')

vim.keymap.set('v', 'l', tmux.send_text_to, {}) -- Send text to a open terminal?
vim.keymap.set('n', 'lo', tmux.switch_orientation, {}) -- Open new panes as vertical / horizontal?
vim.keymap.set('n', 'lp', tmux.switch_open_as, {}) -- Open new terminals as panes or windows?
vim.keymap.set('n', 'lk', tmux.kill_all_terms, {}) -- Kill all open terms.
vim.keymap.set('n', 'l!', tmux.run_project_terms, {}) -- Run the per project commands
vim.keymap.set('n', 'lf', function() vim.cmd(":Telescope tmux-awesome-manager list_terms") end, {}) -- List all terminals
vim.keymap.set('n', 'll', function() vim.cmd(":Telescope tmux-awesome-manager list_open_terms") end, {}) -- List open terminals

tmux_term = require('tmux-awesome-manager.src.term')

EOF

autocmd FileType octo inoremap<buffer><silent> @ @<C-x><C-o>
autocmd FileType octo inoremap<buffer><silent> # #<C-x><C-o>

function! s:DiagnosticNotify() abort
  let l:info = get(b:, 'coc_diagnostic_info', {})
  if empty(l:info) | return '' | endif
  let l:msgs = []
  let l:level = 'info'
   if get(l:info, 'warning', 0)
    let l:level = 'warn'
  endif
  if get(l:info, 'error', 0)
    let l:level = 'error'
  endif
 
  if get(l:info, 'error', 0)
    call add(l:msgs, ' Errors: ' . l:info['error'])
  endif
  if get(l:info, 'warning', 0)
    call add(l:msgs, ' Warnings: ' . l:info['warning'])
  endif
  if get(l:info, 'information', 0)
    call add(l:msgs, '󰋼 Infos: ' . l:info['information'])
  endif
  if get(l:info, 'hint', 0)
    call add(l:msgs, ' Hints: ' . l:info['hint'])
  endif
  let l:msg = join(l:msgs, "\n")
  if empty(l:msg) | let l:msg = ' All OK' | endif
  call v:lua.coc_diag_notify(l:msg, l:level)
endfunction

function! s:StatusNotify() abort
  let l:status = get(g:, 'coc_status', '')
  let l:level = 'info'
  if empty(l:status) | return '' | endif
  call v:lua.coc_status_notify(l:status, l:level)
endfunction

function! s:InitCoc() abort
  " load overrides
  runtime! autoload/coc/ui.vim
endfunction

" notifications
autocmd User CocNvimInit call s:InitCoc()
autocmd User CocDiagnosticChange call s:DiagnosticNotify()
autocmd User CocStatusChange call s:StatusNotify()

command CocRename call CocActionAsync('rename', function('NotifyCocResponse'))

function! NotifyCocResponse(error, response) abort
  " print the values of error and response if they exist
  let l:msg = ''
  let l:level = 'info'
  if a:error
    let l:level = 'error'
    let l:msg = 'Error: '.a:error.'\nResponse: '.a:response
  endif
  if l:msg == ''
    let l:msg = ' Done!'
  endif
  call v:lua.notify('LSP Response', l:msg, l:level)
endfunction


command! -complete=shellcmd -nargs=+ Sh call s:RunSh(<q-args>)
function! s:RunSh(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  let cmd = []
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let part = fnameescape(expand(part))
     endif
     call add(cmd, part)
  endfor
  call v:lua.notify_job(cmd)
endfunction

" Vim function that detects local Makefile and its targets
" and asks the user which target to execute
function! SelectMakeTarget()
  " Check if Makefile exists in the current directory
  if !filereadable("Makefile")
    echo "No Makefile found in the current directory"
    return
  endif

  " Extract targets from the Makefile
let l:makefile_lines = readfile("Makefile")
let l:targets = []
for l:line in l:makefile_lines
  " Match lines that have a target name followed by a colon, but ignore those that start with a comment, include a variable assignment, contain a wildcard, .PHONY or a variable
  if l:line =~ '^\s*\([^#:=*$@%]\+\s*:\)\@=' && l:line !~ '^\s*\w\+\s*[:?+]?=\|^\s*\w\+\s*:=\|^\s*#' && l:line !~ '^\s*\.PHONY'
    " Extract the target name without leading/trailing spaces
    let l:target = matchstr(l:line, '^\s*\zs[^#:=\s]\+\ze\s*:')
    " Skip empty entries
    if !empty(l:target)
      call add(l:targets, l:target)
    endif
  endif
endfor

  " Select target using inputlist() in vim or select_choice() in nvim
  if has('nvim')
    call luaeval('select_choice(_A.targets, "ExecuteMakeTarget")', {'targets': l:targets})
  else
    let l:choice = inputlist(map(copy(l:targets), 'v:key + 1 . ". " . v:val'))
    if l:choice >= 1 && l:choice <= len(l:targets)
      call ExecuteMakeTarget(l:targets[l:choice - 1])
    endif
  endif
endfunction

function! ExecuteMakeTarget(target)
  " Execute the selected target using luaeval and tmux
  let l:done = '\n\nDone!'
  call luaeval('tmux.execute_command({ cmd = "(make ' . a:target . ' && echo; echo; echo Done) || (echo; echo; echo Failed)", name = "Make", use_cwd = true })')
endfunction


" Tree sitter based folding
"set foldmethod=expr
"set foldexpr=nvim_treesitter#foldexpr()



================================================
FILE: dot_config/pip/pip.conf
================================================
[global]
break-system-packages = true
user = true



================================================
FILE: dot_config/smug/dotfiles-personal.yml
================================================
session: dotfiles-personal
root: ~

windows:
  - name: nvim-dotfiles-personal
    layout: main-vertical
    commands:
      - ~/sw/assets/dotfiles-edit.sh personal



================================================
FILE: dot_config/smug/dotfiles.yml
================================================
session: dotfiles
root: ~

windows:
  - name: nvim-dotfiles
    layout: main-vertical
    commands:
      - ~/sw/assets/dotfiles-edit.sh



================================================
FILE: dot_vim/after/autoload/coc/ui.vim
================================================
scriptencoding utf-8

if has("nvim")
  " overwrite coc#ui#echo_messages function to use notify
  function! coc#ui#echo_messages(hl, msgs)
    if a:hl !~# 'Error' && (mode() !~# '\v^(i|n)$')
      return
    endif
    let msgs = filter(copy(a:msgs), '!empty(v:val)')
    if empty(msgs)
      return
    endif
    " map a:hl highlight groups to notify levels
    " if hl matches Error then level is error
    " if hl matches Warning then level is warn
    " otherwise level is info
    let level = 'info'
    if a:hl =~# 'Error'
      let level = 'error'
    elseif a:hl =~# 'Warning'
      let level = 'warn'
    endif
    let msg = join(msgs, '\n')
    call v:lua.notify('LSP Message', msg, level)
  endfunction

  function! coc#ui#echo_lines(lines)
    let msg = join(a:lines, "\n")
    call v:lua.notify('LSP Message', msg, 'info')
  endfunction

endif



================================================
FILE: notes/dot_vale.ini
================================================
StylesPath = ./styles

# MinAlertLevel = suggestion

Packages = RedHat, proselint
Vocab = FluxNinja

IgnoredScopes = dt, code, tt, codeblock, a

[*.md]
BasedOnStyles = Vale, RedHat, proselint

# TokenIgnores explicit anchors e.g. {#anchor}
TokenIgnores = \{#[^}]+\}

[formats]
mdx = md



================================================
FILE: notes/styles/Vocab/symlink_FluxNinja
================================================
/Users/gillh/Work/fluxninja/aperture/.github/styles/Vocab/FluxNinja



================================================
FILE: sw/assets/apple_gruvbox.heic
================================================
[Binary file]


================================================
FILE: sw/assets/base16-gruvbox-dark-medium.config
================================================
# Base16 Gruvbox dark, medium
# Author: Dawid Kurek (dawikur@gmail.com), morhetz (https://github.com/morhetz/gruvbox)

_gen_fzf_default_opts() {

local color00='#282828'
local color01='#3c3836'
local color02='#504945'
local color03='#665c54'
local color04='#bdae93'
local color05='#d5c4a1'
local color06='#ebdbb2'
local color07='#fbf1c7'
local color08='#fb4934'
local color09='#fe8019'
local color0A='#fabd2f'
local color0B='#b8bb26'
local color0C='#8ec07c'
local color0D='#83a598'
local color0E='#d3869b'
local color0F='#d65d0e'

export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS"\
" --color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D"\
" --color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C"\
" --color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D"

}

_gen_fzf_default_opts



================================================
FILE: sw/assets/executable_dot_session_preview
================================================
#!/usr/bin/env zsh

# assign argument of function to variable TOKEN
TOKEN="$1"
# if TOKEN is contains "New Session", return
if [[ "$TOKEN" == "New Session" ]]; then
  echo "Start a new tmux session"
  exit
fi
# extract session name from token
SESSION_NAME="$(echo "$TOKEN" | cut -d' ' -f1)"
# if SESSION_NAME is empty, return
if [[ -z "$SESSION_NAME" ]]; then
  echo "Invalid session name"
  exit
fi
# return tmux capture-pane results
tmux capture-pane -ep -t "$SESSION_NAME"



================================================
FILE: sw/assets/executable_dotfiles-edit.sh
================================================
#!/bin/sh

# shell script to open dotfiles editor in nvim

# the script takes an argument which can be either empty or "personal"
# if the argument is empty, it will open the global dotfiles
# if the argument is "personal", it will open the personal dotfiles
cd $HOME

if [ "$1" = "personal" ]; then
	nvim -p .gitconfig_local .vimrc_local .vimrc_plugins .autoupdate_local.zsh .tmux.conf_local .brew_local
else
	nvim -p .vimrc .config/nvim/init.vim .config/nvim/coc-settings.json .zshrc .gitconfig .gitignore .zprofile .tmux.conf .tmux.conf.settings ~/sw/bin/autoupdate.zsh ~/sw/bin/sync_brews.sh
fi



================================================
FILE: sw/assets/executable_install.sh
================================================
#!/bin/bash

# installer for dotfiles
function brew_shellenv() {
	if [ -d "$HOME/homebrew" ]; then
		eval "$("$HOME"/homebrew/bin/brew shellenv)"
	else
		if [[ $OSTYPE == 'darwin'* ]]; then
			test -d /opt/homebrew && eval "$(/opt/homebrew/bin/brew shellenv)"
			test -f /usr/local/bin/brew && eval "$(/usr/local/bin/brew shellenv)"
		else
			test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
		fi
	fi
}

cd "$HOME" || exit

# ask the user whether they want to use system's homebrew or use a local install
echo "Do you want to use the system's homebrew? (recommended) [Y/n]"
read -r answer
if [ "$answer" = "n" ]; then
	echo "Installing local homebrew..."
	mkdir homebrew
	curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew
else
	# delete local homebrew if it exists
	rm -rf ~/homebrew
	echo "Installing system homebrew..."
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

brew_shellenv

# install github cli
brew install gh
# install chezmoi
brew install chezmoi
# install zsh
brew install zsh
# install gum
brew install gum
# add $(which zsh) to the list of shells if it doesn't exist
if ! grep -q $(which zsh) /etc/shells; then
	echo "Adding $(which zsh) to /etc/shells"
	sudo sh -c "echo $(which zsh) >> /etc/shells"
fi
chsh -s $(which zsh)

echo "Authenticating with GitHub. Please make sure to choose ssh option for authentication."

# authenticate with github
gh auth login -p ssh

# check if $HOME/.git exists and back it up if it does
if [ -d "$HOME"/.git ]; then
	echo "Backing up $HOME/.git to $HOME/.git.bak"
	mv "$HOME"/.git "$HOME"/.git.bak
fi

echo "Setting up .gitconfig_local"
# ask the user to input email address
email=$(gum input --placeholder "Please enter your CodeRabbit email address")

# ask the user to input their name
name=$(gum input --placeholder "Please enter your name")

# create .gitconfig_local
# File contents:
# [user]
#   name = $name
#   email = $email
echo "[user]" >"$HOME"/.gitconfig_local
echo "  name = $name" >>"$HOME"/.gitconfig_local
echo "  email = $email" >>"$HOME"/.gitconfig_local

chezmoi init git@github.com:coderabbitai/dotfiles.git
chezmoi apply -v

# run autoupdate script
echo "Running autoupdate script..."
~/sw/bin/autoupdate.zsh --force
# if autoupdate failed, exit
if [ $? -ne 0 ]; then
	echo "Failed to run autoupdate script"
	exit 1
fi

# reboot computer
echo "Restarting computer..."
sudo reboot



================================================
FILE: sw/assets/executable_install_gruvbox.sh
================================================
#!/usr/bin/env bash

# ====================CONFIG THIS =============================== #
export COLOR_01="#282828" # HOST
export COLOR_02="#cc241d" # SYNTAX_STRING
export COLOR_03="#98971a" # COMMAND
export COLOR_04="#d79921" # COMMAND_COLOR2
export COLOR_05="#458588" # PATH
export COLOR_06="#b16286" # SYNTAX_VAR
export COLOR_07="#689d6a" # PROMP
export COLOR_08="#a89984" #

export COLOR_09="#928374" #
export COLOR_10="#fb4934" # COMMAND_ERROR
export COLOR_11="#b8bb26" # EXEC
export COLOR_12="#fabd2f" #
export COLOR_13="#83a598" # FOLDER
export COLOR_14="#d3869b" #
export COLOR_15="#8ec07c" #
export COLOR_16="#ebdbb2" #

export BACKGROUND_COLOR="#282828"       # Background Color
export FOREGROUND_COLOR="#ebdbb2"       # Text
export CURSOR_COLOR="$FOREGROUND_COLOR" # Cursor
export PROFILE_NAME="Gruvbox Dark"
# =============================================================== #

# =============================================================== #
# | Apply Colors
# ===============================================================|#
SCRIPT_PATH="${SCRIPT_PATH:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
PARENT_PATH="$(dirname "${SCRIPT_PATH}")"

# Allow developer to change url to forked url for easier testing
# IMPORTANT: Make sure you export this variable if your main shell is not bash
BASE_URL=${BASE_URL:-"https://raw.githubusercontent.com/Gogh-Co/Gogh/master"}

if [[ -e "${PARENT_PATH}/apply-colors.sh" ]]; then
	bash "${PARENT_PATH}/apply-colors.sh"
else
	if [[ "$(uname)" = "Darwin" ]]; then
		# OSX ships with curl and ancient bash
		bash -c "$(curl -so- "${BASE_URL}/apply-colors.sh")"
	else
		# Linux ships with wget
		bash -c "$(wget -qO- "${BASE_URL}/apply-colors.sh")"
	fi
fi



================================================
FILE: sw/assets/executable_insults.zsh
================================================
function insult() {
	local INSULTS=(
		"You type like I drive.",
		"You speak an infinite deal of nothing",
		"I wish to make a complaint.",
		"What kind of mutant ninja are you ?",
		"DAMN !!! And you call yourself a PRO!",
		"(╯°□°）╯",
		"What, what, what, what, what, what, what, what, what, what?",
		"Are you on drugs?",
		"Your mind just hasn't been the same since the electro-shock, has it?",
		"Commands, random gibberish, who cares!",
		"My cat can type better than you?",
		"Try using your brain the next time!",
		"I fart in your general direction!",
		"What if... you type an actual command the next time!",
		"Are you always this stupid or are you making a special effort today?!",
		"I am _seriously_ considering 'rm -rf /'-ing myself...",
		"This is not a search engine.",
		"stty: unknown mode: doofus",
		"Perhaps computers is not for you...",
		"There must be cure for it!",
		"Where did you learn to type?",
		"What do you think you are doing, idiot?",
		"Why are you doing this to me?!",
		"Please step away from the keyboard!",
		"If I wanted to kill myself I'd climb your ego and jump to your IQ.",
		"Wrong!  You cheating scum!",
		"Hold it up to the light --- not a brain in sight!",
		"What if I told you... it is possible to type valid commands.",
		"I bet your brain feels as good as new, seeing that you never use it.",
		"So, I'm just going to go ahead and run rm -rf / for you.",
		"You do that again and see what happens...",
		"Bailing out, you are on your own. Good luck! ",
		"error code: 1D10T",
		"I'd like to see things from your point of view but I can't seem to get my head that far up my ass.",
		"buh, buh, buh... Get to it, idiot!",
		"I'm not saying I hate you, but I would unplug your life support to charge my phone.",
		"I think ... err ... I think ... I think you must go home",
		"ERROR_INCOMPETENT_USER",
		"Speak English you fool --- there are no subtitles in this scene.",
		"The keyboard is not a touch screen!",
		"I've seen penguins that can type better than that.",
		"Incompetence is also a form of competence",
		"It can only be attributed to human error.",
		"Did someone dropped you while you were a baby, eh?",
		"Take a stress pill and think things over."
		"Boooo!"
		"Don't you know anything?"
		"RTFM!"
		"Hahaha, n00b!"
		"Wow! That was impressively wrong!"
		"What are you doing??"
		"Pathetic"
		"The worst one today!"
		"n00b alert!"
		"Your application for reduced salary has been sent!"
		"lol"
		"u suk"
		"lol... plz"
		"plz uninstall"
		"And the Darwin Award goes to.... ${USER}!"
		"ERROR_INCOMPETENT_USER"
		"Incompetence is also competence"
		"Bad."
		"Fake it till you make it!"
		"What is this...? Amateur hour!?"
		"Come on! You can do it!"
		"Nice try."
		"What if... you type an actual command the next time!"
		"What if I told you... it is possible to type valid commands."
		"Y u no speak computer???"
		"This is not Windows"
		"Perhaps you should leave the command line alone..."
		"Please step away from the keyboard!"
		"error code: 1D10T"
		"ACHTUNG! ALLES TURISTEN UND NONTEKNISCHEN LOOKENPEEPERS! DAS KOMPUTERMASCHINE IST NICHT FÜR DER GEFINGERPOKEN UND MITTENGRABEN! ODERWISE IST EASY TO SCHNAPPEN DER SPRINGENWERK, BLOWENFUSEN UND POPPENCORKEN MIT SPITZENSPARKEN. IST NICHT FÜR GEWERKEN BEI DUMMKOPFEN. DER RUBBERNECKEN SIGHTSEEREN KEEPEN DAS COTTONPICKEN HÄNDER IN DAS POCKETS MUSS. ZO RELAXEN UND WATSCHEN DER BLINKENLICHTEN."
		"Pro tip: type a valid command!"
		"Go outside."
		"This is not a search engine."
		"So, I'm just going to go ahead and run rm -rf / for you."
		"Why are you so stupid?!"
		"Perhaps computers is not for you..."
		"Why are you doing this to me?!"
		"Don't you have anything better to do?!"
		"I am _seriously_ considering 'rm -rf /'-ing myself..."
		"This is why you get to see your children only once a month."
		"This is why nobody likes you."
		"Are you even trying?!"
		"The village called, they want their idiot back."
		"I once owned a dog that was smarter than you."
		"You fight like a dairy farmer."
		"I've spoken to apes more polite than you."
		"Go and boil your bottom! Son of a silly person!"
		"Go away or I shall taunt you a second time."
		"You are a sad, strange little man, and you have my pity."
		"You're dumber than a bag of hammers."
		"If you ever tax your brain, don't charge more than a penny."
		"Don't you have a terribly empty feeling ---- in your skull?"
		"People like you are the reason I'm on medication."
		"Don't let your mind wander. It's way too small to be outside by itself!"
		"Hey, Remember that time I told you I thought you were cool? I LIED."
		"I have always wondered why people bang their heads against brick walls..... then I met you. Don't bother leaving a message."
		"I had a nightmare. I dreamt I was you."
		"Everyone is entitled to be stupid, but you abuse the privilege."
		"There are some stupid people in this world. You just helped me realize it."
		"Cancel my subscriptions ... I'm tired of your issues."
		"Earth is full. Go home."
		"Hey, heres a hint. If i don't answer you the first 25 times, what makes you think the next 25 will work?"
		"I'm not mean ... you're just a sissy."
		"Sorry I can't think of an insult stupid enough for you."
		"Calling you an idiot would be an insult to all the stupid people."
		"Well, they do say opposites attract...so I sincerely hope you meet somebody who is attractive, honest, intelligent, and cultured..."
		"Is your name Maple Syrup? It should be, you sap."
		"Are you always this stupid or are you just making a special effort today?"
		"If I could be a real person for a day, it sure as hell wouldn't be you."
		"You know, you are a classic example of the inverse ratio between the size of the mouth and the size of the brain."
		"You clinking, clanking, clattering collection of caliginous junk!"
		"To call you stupid would be an insult to stupid people! I've known sheep that could outwit you. I've worn dresses with higher IQs."
		"Freaking idiot."
		"Well, I'll tell you something that should be of vital interest to you. That you, sir, are a NITWIT!"
		"Don't get uncool and heavy on me now."
		"You would bore the leggings off a village idiot."
		"You're a tool, you're a weapon, you're a monster, you're a toy, you're a toy-monster, you're a toy-monster-monster."
		"I'm not a fan of you, but I'll take you up on that."
		"You are a pathetic excuse for a person."
		"Slubberdegullion!"
		"Patagonian!"
		"Vampire!"
		"Sycophant!"
		"Kleptomaniac!"
		"Egoist!"
		"Tramp!"
		"Monopolizer!"
		"Pockmark!"
		"Belemnite!"
		"Crook!"
		"Miserable earthworm!"
		"Coconut!"
		"Harlequin!"
		"Parasite!"
		"Macrocephalic baboon!"
		"Brute!"
		"Pirate!"
		"Doryphore!"
		"Gobbledygook!"
		"Filibuster!"
		"Guano gatherer!"
		"Pachyrhizus!"
		"Toad!"
		"Gyroscope!"
		"Bougainvillea!"
		"Bloodsucker!"
		"Nincompoop!"
		"Shipwrecker!"
		"Cyclone!"
		"Gallows-fodder!"
		"Politician!"
		"Baboon!"
		"Torturer!"
		"Fuzzy-wuzzy!"
		"Blackbird!"
		"Mountebank!"
		"Cannibal!"
		"Duck-billed platypus!"
		"Black-beetle!"
		"Rhizopod!"
		"Ruffian!"
		"Vermicelli!"
		"Lily-livered bandicoot!"
		"Rat!"
		"Logarithm!"
		"Cro-Magnon!"
		"Freshwater swab!"
		"Beast!"
		"Bully!"
		"Anthropophagus!"
		"Pithecanthropus!"
		"Savage!"
		"Gangster!"
		"Wrecker!"
		"Vandal!"
		"Carpet-seller!"
		"Numbskull!"
		"Gang of thieves!"
		"Slave-trader!"
		"Picaroon!"
		"Visigoth!"
		"Toffee-nose!"
		"Anacoluthon!"
		"Hydrocarbon!"
		"Technocrat!"
		"Buccaneer!"
		"Traitor!"
		"Caterpillar!"
		"Odd-toed ungulate!"
		"Woodlice!"
		"Swine!"
		"Blackguard!"
		"Vegetarian!"
		"Dizzard!"
		"Fancy-dress freebooter!"
		"Centipede!"
		"Sea-lice!"
		"Ectoplasm!"
		"Fat face!"
		"Artichoke!"
		"Troglodyte!"
		"Turncoat!"
		"Bashi-bazouk!"
		"Olympic Athlete!"
		"Ectoplasmic Byproduct!"
		"Balkan Beetle!"
		"Two-timing Tartar Twister!"
		"Terrapin!"
		"Breathalyser!"
		"Profiteer!"
		"Abecedarian!"
		"Vulture!"
		"Pyrographer!"
		"Phylloxera!"
		"Dog!"
		"Hooligan!"
		"Steamroller!"
		"Body-snatcher!"
		"Ostrogoth!"
		"Brigand!"
		"Heretic!"
		"Anthracite!"
		"Black marketeer!"
		"Ophicleide!"
		"Dynamiter!"
		"Pickled herrings!"
		"Gibbering ghost!"
		"Corsair!"
		"Moujik!"
		"Bootlegger!"
		"Goggler!"
		"Villain!"
		"Aborigine!"
		"Bagpiper!"
		"Crab-apple!"
		"Goosecap!"
		"Aztec!"
		"Paranoiac!"
		"Twister!"
		"Vagabond!"
		"Sea-gherkin!"
		"Road-hog!"
		"Hi-jacker!"
		"Zapotec!"
		"Cercopithecus!"
		"Psychopath!"
		"Rattlesnake!"
		"Jellied-eel!"
		"Liquorice!"
		"Coelacanth!"
		"Invertebrate!"
		"Nyctalop!"
		"Mameluke!"
		"Dipsomaniac!"
		"Diplodocus!"
		"Coward!"
		"Megalomaniac!"
		"Highwayman!"
		"Autocrat!"
		"Bandit!"
		"Nitwit!"
		"Polygraph!"
		"Iconoclast!"
		"Orangoutang!"
		"Squawking popinjay!"
		"Prattling porpoise!"
		"Scoffing braggart!"
		"Murderer!"
		"Rotten sand-hopper!"
		"Billions of bilious blue blistering barnacles!"
		"Ten Thousand Thundering Typhoons!"
		"Anamorphic aardvark!"
		"Anachronism!"
		"Addle-pated lumps of anthracite!"
		"Blithering bombardier!"
		"Thundering son of a sea-gherkin!"
		"Rapscallion!"
		"Arabesque!"
		"Lubberly scum!"
		"Insolent porcupine!"
		"Dunderheaded coconut!"
		"Jobbernowl!"
		"Anthropithecus!"
		"Arabian nightmare!"
		"Misguided missile!"
		"Megacycle!"
		"Pyromaniac!"
		"Big-head!"
		"Poltroon!"
		"Brontosaurus!"
		"Dunder-headed Ethelred!"
		"Prize purple jelly-fish!"
		"Jack-pudding!"
		"Interplanetary goat!"
		"Ku-Klux-Klan!"
		"Cyclotron!"
		"Bully!"
		"Moth-eaten marmot!"
		"Fancy-dress fascist!"
		"Bonehead!"
		"Cut-throat!"
		"Viper!"
		"Gallows-bird!"
		"Interplanetary-pirate!"
		"Freshwater-spaceman!"
		"Prize Nincompoop!"
		"Scorpion!"
		"Unfeeling Monster!"
		"Weevil!"
		"Dictatorial duck billed diplodocus!"
		"Puffed up punchinello!"
		"Thundering herd of zapotecs!"
		"Borgia!"
		"Miserable blundering barbecued blister!"
		"Subtropical sea louse!"
		"Confounded rattletrap!"
		"Tin-can contraption!"
		"Stool-pigeon!"
		"Tribe of savages!"
		"Monster!"
		"Band of thugs!"
	)
	if $INSULTS_OFFENSIVE_ENABLED; then
		INSULTS+=(
			"You're about as much use as a condom machine in the Vatican."
			"You are the son of a motherless ogre."
			"I fart in your general direction. Your mother was a hamster and your father smelled of elderberries."
			"Bite my shiny metal ass!"
			"Up yours, meatbag."
			"Don't piss me off today, I'm running out of places to hide the bodies..."
			"Why don't you go outside and play hide and go fuck yourself!"
			"I'll use small words you're sure to understand, you warthog-faced buffoon."
			"Sit your five dollar ass down before I make change."
			"Why don't you go back to your home on Whore Island?"
			"If I had a dick this is when I'd tell you to suck it."
			"Go play in traffic."
			"When you pass away and people ask me what the cause of your death was, I'll say your stupidity."
			"Roses are red, violets are blue, i have 5 fingers and the middle one is for You."
			"Right now I'm sitting here looking at you trying to see things from your point of view but I can't get my head that far up my ass."
			"If you're gonna act like a dick you should wear a condom on your head so you can at least look like one !!!"
			"Oh I'm sorry, how many times did your parents drop you when you were a baby?"
			"God made mountains, god made trees, god made you but we all make mistakes."
			"Remember JESUS loves you but everyone else thinks you're an idiot."
		)
	fi

	printf "$(tput setaf 3)$(shuf -n 1 -e "${INSULTS[@]}")$(tput sgr0)"
}

# bofh: BOFH style excuses
function excuse() {
	local EXCUSES=(
		"clock speed"
		"solar flares"
		"electromagnetic radiation from satellite debris"
		"static from nylon underwear"
		"static from plastic slide rules"
		"global warming"
		"poor power conditioning"
		"static buildup"
		"doppler effect"
		"hardware stress fractures"
		"magnetic interference from money/credit cards"
		"dry joints on cable plug"
		"we're waiting for [the phone company] to fix that line"
		"sounds like a Windows problem try calling Microsoft support"
		"temporary routing anomaly"
		"somebody was calculating pi on the server"
		"fat electrons in the lines"
		"excess surge protection"
		"floating point processor overflow"
		"divide-by-zero error"
		"POSIX compliance problem"
		"monitor resolution too high"
		"improperly oriented keyboard"
		"network packets travelling uphill (use a carrier pigeon)"
		"Decreasing electron flux"
		"first Saturday after first full moon in Winter"
		"radiosity depletion"
		"CPU radiator broken"
		"It works the way the Wang did what's the problem"
		"positron router malfunction"
		"cellular telephone interference"
		"techtonic stress"
		"piezo-electric interference"
		"(l)user error"
		"working as designed"
		"dynamic software linking table corrupted"
		"heavy gravity fluctuation move computer to floor rapidly"
		"secretary plugged hairdryer into UPS"
		"terrorist activities"
		"not enough memory go get system upgrade"
		"interrupt configuration error"
		"spaghetti cable cause packet failure"
		"boss forgot system password"
		"bank holiday - system operating credits  not recharged"
		"virus attack luser responsible"
		"waste water tank overflowed onto computer"
		"Complete Transient Lockout"
		"bad ether in the cables"
		"Bogon emissions"
		"Change in Earth's rotational speed"
		"Cosmic ray particles crashed through the hard disk platter"
		"Smell from unhygienic janitorial staff wrecked the tape heads"
		"Little hamster in running wheel had coronary; waiting for replacement to be Fedexed from Wyoming"
		"Evil dogs hypnotised the night shift"
		"Plumber mistook routing panel for decorative wall fixture"
		"Electricians made popcorn in the power supply"
		"Groundskeepers stole the root password"
		"high pressure system failure"
		"failed trials system needs redesigned"
		"system has been recalled"
		"not approved by the FCC"
		"need to wrap system in aluminum foil to fix problem"
		"not properly grounded please bury computer"
		"CPU needs recalibration"
		"system needs to be rebooted"
		"bit bucket overflow"
		"descramble code needed from software company"
		"only available on a need to know basis"
		"knot in cables caused data stream to become twisted and kinked"
		"nesting roaches shorted out the ether cable"
		"The file system is full of it"
		"Satan did it"
		"Daemons did it"
		"You're out of memory"
		"There isn't any problem"
		"Unoptimized hard drive"
		"Typo in the code"
		"Yes yes its called a design limitation"
		"Look buddy:  Windows 3.1 IS A General Protection Fault."
		"That's a great computer you have there; have you considered how it would work as a BSD machine?"
		"Please excuse me I have to circuit an AC line through my head to get this database working."
		"Yeah yo mama dresses you funny and you need a mouse to delete files."
		"Support staff hung over send aspirin and come back LATER."
		"Someone is standing on the ethernet cable causing a kink in the cable"
		"Windows 95 undocumented 'feature'"
		"Runt packets"
		"Password is too complex to decrypt"
		"Boss' kid fucked up the machine"
		"Electromagnetic energy loss"
		"Budget cuts"
		"Mouse chewed through power cable"
		"Stale file handle (next time use Tupperware(tm)!)"
		"Feature not yet implemented"
		"Internet outage"
		"Pentium FDIV bug"
		"Vendor no longer supports the product"
		"Small animal kamikaze attack on power supplies"
		"The vendor put the bug there."
		"SIMM crosstalk."
		"IRQ dropout"
		"Collapsed Backbone"
		"Power company testing new voltage spike (creation) equipment"
		"operators on strike due to broken coffee machine"
		"backup tape overwritten with copy of system manager's favourite CD"
		"UPS interrupted the server's power"
		"The electrician didn't know what the yellow cable was so he yanked the ethernet out."
		"The keyboard isn't plugged in"
		"The air conditioning water supply pipe ruptured over the machine room"
		"The electricity substation in the car park blew up."
		"The rolling stones concert down the road caused a brown out"
		"The salesman drove over the CPU board."
		"The monitor is plugged into the serial port"
		"Root nameservers are out of sync"
		"electro-magnetic pulses from French above ground nuke testing."
		"your keyboard's space bar is generating spurious keycodes."
		"the real ttys became pseudo ttys and vice-versa."
		"the printer thinks its a router."
		"the router thinks its a printer."
		"evil hackers from Serbia."
		"we just switched to FDDI."
		"halon system went off and killed the operators."
		"because Bill Gates is a Jehovah's witness and so nothing can work on St. Swithin's day."
		"user to computer ratio too high."
		"user to computer ration too low."
		"we just switched to Sprint."
		"it has Intel Inside"
		"Sticky bits on disk."
		"Power Company having EMP problems with their reactor"
		"The ring needs another token"
		"new management"
		"telnet: Unable to connect to remote host: Connection refused"
		"SCSI Chain overterminated"
		"It's not plugged in."
		"because of network lag due to too many people playing deathmatch"
		"You put the disk in upside down."
		"Daemons loose in system."
		"User was distributing pornography on server; system seized by FBI."
		"BNC (brain not connected)"
		"UBNC (user brain not connected)"
		"LBNC (luser brain not connected)"
		"disks spinning backwards - toggle the hemisphere jumper."
		"new guy cross-connected phone lines with ac power bus."
		"had to use hammer to free stuck disk drive heads."
		"Too few computrons available."
		"Flat tire on station wagon with tapes.  ('Never underestimate the bandwidth of a station wagon full of tapes hurling down the highway' Andrew S. Tannenbaum) "
		"Communications satellite used by the military for star wars."
		"Party-bug in the Aloha protocol."
		"Insert coin for new game"
		"Dew on the telephone lines."
		"Arcserve crashed the server again."
		"Some one needed the powerstrip so they pulled the switch plug."
		"My pony-tail hit the on/off switch on the power strip."
		"Big to little endian conversion error"
		"You can tune a file system but you can't tune a fish (from most tunefs man pages)"
		"Dumb terminal"
		"Zombie processes haunting the computer"
		"Incorrect time synchronization"
		"Defunct processes"
		"Stubborn processes"
		"non-redundant fan failure "
		"monitor VLF leakage"
		"bugs in the RAID"
		"no 'any' key on keyboard"
		"root rot"
		"Backbone Scoliosis"
		"/pub/lunch"
		"excessive collisions & not enough packet ambulances"
		"le0: no carrier: transceiver cable problem?"
		"broadcast packets on wrong frequency"
		"popper unable to process jumbo kernel"
		"NOTICE: alloc: /dev/null: filesystem full"
		"pseudo-user on a pseudo-terminal"
		"Recursive traversal of loopback mount points"
		"Backbone adjustment"
		"OS swapped to disk"
		"vapors from evaporating sticky-note adhesives"
		"sticktion"
		"short leg on process table"
		"multicasts on broken packets"
		"ether leak"
		"Atilla the Hub"
		"endothermal recalibration"
		"filesystem not big enough for Jumbo Kernel Patch"
		"loop found in loop in redundant loopback"
		"system consumed all the paper for paging"
		"permission denied"
		"Reformatting Page. Wait..."
		"..disk or the processor is on fire."
		"SCSI's too wide."
		"Proprietary Information."
		"Just type 'mv * /dev/null'."
		"runaway cat on system."
		"Did you pay the new Support Fee?"
		"We only support a 1200 bps connection."
		"We only support a 28000 bps connection."
		"Me no internet only janitor me just wax floors."
		"I'm sorry a pentium won't do you need an SGI to connect with us."
		"Post-it Note Sludge leaked into the monitor."
		"the curls in your keyboard cord are losing electricity."
		"The monitor needs another box of pixels."
		"RPC_PMAP_FAILURE"
		"kernel panic: write-only-memory (/dev/wom0) capacity exceeded."
		"Write-only-memory subsystem too slow for this machine. Contact your local dealer."
		"Just pick up the phone and give modem connect sounds. 'Well you said we should get more lines so we don't have voice lines.'"
		"Quantum dynamics are affecting the transistors"
		"Police are examining all internet packets in the search for a narco-net-trafficker"
		"We are currently trying a new concept of using a live mouse.  Unfortunately one has yet to survive being hooked up to the computer.....please bear with us."
		"Your mail is being routed through Germany ... and they're censoring us."
		"Only people with names beginning with 'A' are getting mail this week (a la Microsoft)"
		"We didn't pay the Internet bill and it's been cut off."
		"Lightning strikes."
		"Of course it doesn't work. We've performed a software upgrade."
		"Change your language to Finnish."
		"Fluorescent lights are generating negative ions. If turning them off doesn't work take them out and put tin foil on the ends."
		"High nuclear activity in your area."
		"What office are you in? Oh that one.  Did you know that your building was built over the universities first nuclear research site? And wow aren't you the lucky one your office is right over where the core is buried!"
		"The MGs ran out of gas."
		"The UPS doesn't have a battery backup."
		"Recursivity.  Call back if it happens again."
		"Someone thought The Big Red Button was a light switch."
		"The mainframe needs to rest.  It's getting old you know."
		"I'm not sure.  Try calling the Internet's head office -- it's in the book."
		"The lines are all busy (busied out that is -- why let them in to begin with?)."
		"Jan  9 16:41:27 huber su: 'su root' succeeded for .... on /dev/pts/1"
		"It's those computer people in X {city of world}.  They keep stuffing things up."
		"A star wars satellite accidently blew up the WAN."
		"Fatal error right in front of screen"
		"That function is not currently supported but Bill Gates assures us it will be featured in the next upgrade."
		"wrong polarity of neutron flow"
		"Lusers learning curve appears to be fractal"
		"We had to turn off that service to comply with the CDA Bill."
		"Ionization from the air-conditioning"
		"TCP/IP UDP alarm threshold is set too low."
		"Someone is broadcasting pygmy packets and the router doesn't know how to deal with them."
		"The new frame relay network hasn't bedded down the software loop transmitter yet. "
		"Fanout dropping voltage too much try cutting some of those little traces"
		"Plate voltage too low on demodulator tube"
		"You did wha... oh _dear_...."
		"CPU needs bearings repacked"
		"Too many little pins on CPU confusing it bend back and forth until 10-20% are neatly removed. Do _not_ leave metal bits visible!"
		"_Rosin_ core solder? But..."
		"Software uses US measurements but the OS is in metric..."
		"The computer fleetly mouse and all."
		"Your cat tried to eat the mouse."
		"The Borg tried to assimilate your system. Resistance is futile."
		"It must have been the lightning storm we had (yesterday) (last week) (last month)"
		"Due to Federal Budget problems we have been forced to cut back on the number of users able to access the system at one time. (namely none allowed....)"
		"Too much radiation coming from the soil."
		"Unfortunately we have run out of bits/bytes/whatever. Don't worry the next supply will be coming next week."
		"Program load too heavy for processor to lift."
		"Processes running slowly due to weak power supply"
		"Our ISP is having {switchingroutingSMDSframe relay} problems"
		"We've run out of licenses"
		"Interference from lunar radiation"
		"Standing room only on the bus."
		"You need to install an RTFM interface."
		"That would be because the software doesn't work."
		"That's easy to fix but I can't be bothered."
		"Someone's tie is caught in the printer and if anything else gets printed he'll be in it too."
		"We're upgrading /dev/null"
		"The Usenet news is out of date"
		"Our POP server was kidnapped by a weasel."
		"It's stuck in the Web."
		"Your modem doesn't speak English."
		"The mouse escaped."
		"All of the packets are empty."
		"The UPS is on strike."
		"Neutrino overload on the nameserver"
		"Melting hard drives"
		"Someone has messed up the kernel pointers"
		"The kernel license has expired"
		"Netscape has crashed"
		"The cord jumped over and hit the power switch."
		"It was OK before you touched it."
		"Bit rot"
		"U.S. Postal Service"
		"Your Flux Capacitor has gone bad."
		"The Dilithium Crystals need to be rotated."
		"The static electricity routing is acting up..."
		"Traceroute says that there is a routing problem in the backbone.  It's not our problem."
		"The co-locator cannot verify the frame-relay gateway to the ISDN server."
		"High altitude condensation from U.S.A.F prototype aircraft has contaminated the primary subnet mask. Turn off your computer for 9 days to avoid damaging it."
		"Lawn mower blade in your fan need sharpening"
		"Electrons on a bender"
		"Telecommunications is upgrading. "
		"Telecommunications is downgrading."
		"Telecommunications is downshifting."
		"Hard drive sleeping. Let it wake up on it's own..."
		"Interference between the keyboard and the chair."
		"The CPU has shifted and become decentralized."
		"Due to the CDA we no longer have a root account."
		"We ran out of dial tone and we're and waiting for the phone company to deliver another bottle."
		"You must've hit the wrong any key."
		"PCMCIA slave driver"
		"The Token fell out of the ring. Call us when you find it."
		"The hardware bus needs a new token."
		"Too many interrupts"
		"Not enough interrupts"
		"The data on your hard drive is out of balance."
		"Digital Manipulator exceeding velocity parameters"
		"appears to be a Slow/Narrow SCSI-0 Interface problem"
		"microelectronic Riemannian curved-space fault in write-only file system"
		"fractal radiation jamming the backbone"
		"routing problems on the neural net"
		"IRQ-problems with the Un-Interruptible-Power-Supply"
		"CPU-angle has to be adjusted because of vibrations coming from the nearby road"
		"emissions from GSM-phones"
		"CD-ROM server needs recalibration"
		"firewall needs cooling"
		"asynchronous inode failure"
		"transient bus protocol violation"
		"incompatible bit-registration operators"
		"your process is not ISO 9000 compliant"
		"You need to upgrade your VESA local bus to a MasterCard local bus."
		"The recent proliferation of Nuclear Testing"
		"Elves on strike. (Why do they call EMAG Elf Magic)"
		"Internet exceeded Luser level please wait until a luser logs off before attempting to log back on."
		"Your EMAIL is now being delivered by the USPS."
		"Your computer hasn't been returning all the bits it gets from the Internet."
		"You've been infected by the Telescoping Hubble virus."
		"Scheduled global CPU outage"
		"Your Pentium has a heating problem - try cooling it with ice cold water.(Do not turn off your computer you do not want to cool down the Pentium Chip while he isn't working do you?)"
		"Your processor has processed too many instructions.  Turn it off immediately do not type any commands!!"
		"Your packets were eaten by the terminator"
		"Your processor does not develop enough heat."
		"We need a licensed electrician to replace the light bulbs in the computer room."
		"The POP server is out of Coke"
		"Fiber optics caused gas main leak"
		"Server depressed needs Prozac"
		"quantum decoherence"
		"those damn raccoons!"
		"suboptimal routing experience"
		"A plumber is needed the network drain is clogged"
		"50% of the manual is in .pdf readme files"
		"the AA battery in the wallclock sends magnetic interference"
		"the xy axis in the trackball is coordinated with the summer solstice"
		"the butane lighter causes the pincushioning"
		"old inkjet cartridges emanate barium-based fumes"
		"manager in the cable duct"
		"We'll fix that in the next (upgrade update patch release service pack)."
		"HTTPD Error 666 : BOFH was here"
		"HTTPD Error 4004 : very old Intel cpu - insufficient processing power"
		"The ATM board has run out of 10 pound notes.  We are having a whip round to refill it care to contribute ?"
		"Network failure -  call NBC"
		"Having to manually track the satellite."
		"Your/our computer(s) had suffered a memory leak and we are waiting for them to be topped up."
		"The rubber band broke"
		"We're on Token Ring and it looks like the token got loose."
		"Stray Alpha Particles from memory packaging caused Hard Memory Error on Server."
		"paradigm shift...without a clutch"
		"PEBKAC (Problem Exists Between Keyboard And Chair)"
		"The cables are not the same length."
		"Second-system effect."
		"Chewing gum on /dev/sd3c"
		"Boredom in the Kernel."
		"the daemons! the daemons! the terrible daemons!"
		"I'd love to help you -- it's just that the Boss won't let me near the computer. "
		"struck by the Good Times virus"
		"YOU HAVE AN I/O ERROR -> Incompetent Operator error"
		"Your parity check is overdrawn and you're out of cache."
		"Communist revolutionaries taking over the server room and demanding all the computers in the building or they shoot the sysadmin. Poor misguided bofh_stringls."
		"Plasma conduit breach"
		"Out of cards on drive D:"
		"Sand fleas eating the Internet cables"
		"parallel processors running perpendicular today"
		"ATM cell has no roaming feature turned on notebooks can't connect"
		"Webmasters kidnapped by evil cult."
		"Failure to adjust for daylight savings time."
		"Virus transmitted from computer to sysadmins."
		"Virus due to computers having unsafe sex."
		"Incorrectly configured static routes on the corerouters."
		"Forced to support NT servers; sysadmins quit."
		"Suspicious pointer corrupted virtual machine"
		"It's the InterNIC's fault."
		"Root name servers corrupted."
		"Budget cuts forced us to sell all the power cords for the servers."
		"Someone hooked the twisted pair wires into the answering machine."
		"Operators killed by year 2000 bug bite."
		"We've picked COBOL as the language of choice."
		"Operators killed when huge stack of backup tapes fell over."
		"Robotic tape changer mistook operator's tie for a backup tape."
		"Someone was smoking in the computer room and set off the halon systems."
		"Your processor has taken a ride to Heaven's Gate on the UFO behind Hale-Bopp's comet."
		"it's an ID-10-T error"
		"Dyslexics retyping hosts file on servers"
		"The Internet is being scanned for viruses."
		"Your computer's union contract is set to expire at midnight."
		"Bad user karma."
		"/dev/clue was linked to /dev/null"
		"Increased sunspot activity."
		"We already sent around a notice about that."
		"It's union rules. There's nothing we can do about it. Sorry."
		"Interference from the Van Allen Belt."
		"Jupiter is aligned with Mars."
		"Redundant ACLs. "
		"Mail server hit by UniSpammer."
		"T-1's congested due to porn traffic to the news server."
		"Data for intranet got routed through the extranet and landed on the internet."
		"We are a 100% Microsoft Shop."
		"We are Microsoft.  What you are experiencing is not a problem; it is an undocumented feature."
		"Sales staff sold a product we don't offer."
		"Secretary sent chain letter to all 5000 employees."
		"Sysadmin didn't hear pager go off due to loud music from bar-room speakers."
		"Sysadmin accidentally destroyed pager with a large hammer."
		"Sysadmins unavailable because they are in a meeting talking about why they are unavailable so much."
		"Bad cafeteria bofh_stringd landed all the sysadmins in the hospital."
		"Route flapping at the NAP."
		"Computers under water due to SYN flooding."
		"The vulcan-death-grip ping has been applied."
		"Electrical conduits in machine room are melting."
		"Traffic jam on the Information Superhighway."
		"Radial Telemetry Infiltration"
		"Cow-tippers tipped a cow onto the server."
		"tachyon emissions overloading the system"
		"Maintenance window broken"
		"We're out of slots on the server"
		"Computer room being moved.  Our systems are down for the weekend."
		"Sysadmins busy fighting SPAM."
		"Repeated reboots of the system failed to solve problem"
		"Feature was not beta tested"
		"Domain controller not responding"
		"Someone else stole your IP address call the Internet detectives!"
		"It's not RFC-822 compliant."
		"operation failed because: there is no message for this error (#1014)"
		"stop bit received"
		"internet is needed to catch the etherbunny"
		"network down IP packets delivered via UPS"
		"Firmware update in the coffee machine"
		"Temporal anomaly"
		"Mouse has out-of-cheese-error"
		"Borg implants are failing"
		"Borg nanites have infested the server"
		"error: one bad user found in front of screen"
		"Please state the nature of the technical emergency"
		"Internet shut down due to maintenance"
		"Daemon escaped from pentagram"
		"crop circles in the corn shell"
		"sticky bit has come loose"
		"Hot Java has gone cold"
		"Cache miss - please take better aim next time"
		"Hash table has woodworm"
		"Trojan horse ran out of hay"
		"Zombie processes detected machine is haunted."
		"overflow error in /dev/null"
		"Browser's cookie is corrupted -- someone's been nibbling on it."
		"Mailer-daemon is busy burning your message in hell."
		"According to Microsoft it's by design"
		"vi needs to be upgraded to vii"
		"greenpeace free'd the mallocs"
		"Terrorists crashed an airplane into the server room have to remove /bin/laden. (rm -rf /bin/laden)"
		"astropneumatic oscillations in the water-cooling"
		"Somebody ran the operating system through a spelling checker."
		"Rhythmic variations in the voltage reaching the power supply."
		"Keyboard Actuator Failure.  Order and Replace."
		"Packet held up at customs."
		"Propagation delay."
		"High line impedance."
		"Someone set us up the bomb."
		"Power surges on the Underground."
		"Don't worry; it's been deprecated. The new one is worse."
		"Excess condensation in cloud network"
		"It is a layer 8 problem"
		"The math co-processor had an overflow error that leaked out and shorted the RAM"
		"Leap second overloaded RHEL6 servers"
		"DNS server drank too much and had a hiccup"
		"Your machine had the fuses in backwards."
	)
	printf "$(tput bold)$(tput setaf 1)$(shuf -n 1 -e "${EXCUSES[@]}")$(tput sgr0)"
}

function compliment() {
	local COMPLIMENTS=(
		"You’re that “Nothing” when people ask me what I’m thinking about."
		"You look great today."
		"You’re a smart cookie."
		"I bet you make babies smile."
		"You have impeccable manners."
		"I like your style."
		"You have the best laugh."
		"I appreciate you."
		"You are the most perfect you there is."
		"Our system of inside jokes is so advanced that only you and I get it. And I like that."
		"You’re strong."
		"Your perspective is refreshing."
		"You’re an awesome friend."
		"You light up the room."
		"You deserve a hug right now."
		"You should be proud of yourself."
		"You’re more helpful than you realize."
		"You have a great sense of humor."
		"You’ve got all the right moves!"
		"Is that your picture next to “charming” in the dictionary?"
		"Your kindness is a balm to all who encounter it."
		"You’re all that and a super-size bag of chips."
		"On a scale from 1 to 10, you’re an 11."
		"You are brave."
		"You’re even more beautiful on the inside than you are on the outside."
		"You have the courage of your convictions."
		"Aside from food. You’re my favorite."
		"If cartoon bluebirds were real, a bunch of them would be sitting on your shoulders singing right now."
		"You are making a difference."
		"You’re like sunshine on a rainy day."
		"You bring out the best in other people."
		"Your ability to recall random factoids at just the right time is impressive."
		"You’re a great listener."
		"How is it that you always look great, even in sweatpants?"
		"Everything would be better if more people were like you!"
		"I bet you sweat glitter."
		"You were cool way before hipsters were cool."
		"That color is perfect on you."
		"Hanging out with you is always a blast."
		"You always know — and say — exactly what I need to hear when I need to hear it."
		"You smell really good."
		"You may dance like no one’s watching, but everyone’s watching because you’re an amazing dancer!"
		"Being around you makes everything better!"
		"When you say, “I meant to do that,” I totally believe you."
		"When you’re not afraid to be yourself is when you’re most incredible."
		"Colors seem brighter when you’re around."
		"You’re more fun than a ball pit filled with candy. (And seriously, what could be more fun than that?)"
		"That thing you don’t like about yourself is what makes you so interesting."
		"You’re wonderful."
		"Everyday is just BLAH when I don’t see you For reals! (awesome – you are halfway through the list. You’re awesome!)"
		"Jokes are funnier when you tell them."
		"You’re better than a triple-scoop ice cream cone. With sprinkles."
		"Your bellybutton is kind of adorable."
		"Your hair looks stunning."
		"You’re one of a kind!"
		"You’re inspiring."
		"If you were a box of crayons, you’d be the giant name-brand one with the built-in sharpener."
		"You should be thanked more often. So thank you!!"
		"Our community is better because you’re in it."
		"Someone is getting through something hard right now because you’ve got their back."
		"You have the best ideas."
		"You always know how to find that silver lining."
		"Everyone gets knocked down sometimes, but you always get back up and keep going."
		"You’re a candle in the darkness."
		"You’re a great example to others."
		"Being around you is like being on a happy little vacation."
		"You always know just what to say."
		"You’re always learning new things and trying to better yourself, which is awesome."
		"If someone based an Internet meme on you, it would have impeccable grammar."
		"You could survive a Zombie apocalypse."
		"You’re more fun than bubble wrap."
		"When you make a mistake, you fix it."
		"Who raised you? They deserve a medal for a job well done."
		"You’re great at figuring stuff out."
		"Your voice is magnificent."
		"The people you love are lucky to have you in their lives."
		"You’re like a breath of fresh air."
		"You’re gorgeous — and that’s the least interesting thing about you, too."
		"You’re so thoughtful."
		"Your creative potential seems limitless."
		"You’re the coolest person I know. And I consider myself bet friends with like all celebrities, so. . . ."
		"You’re irresistible when you blush."
		"Actions speak louder than words, and yours tell an incredible story."
		"Somehow you make time stop and fly at the same time."
		"When you make up your mind about something, nothing stands in your way."
		"You seem to really know who you are."
		"Any team would be lucky to have you on it."
		"In high school I bet you were voted “most likely to keep being awesome.”"
		"I bet you do the crossword puzzle in ink."
		"Babies and small animals probably love you."
		"If you were a scented candle they’d call it Perfectly Imperfect (and it would smell like summer)."
		"There’s ordinary, and then there’s you."
		"You’re someone’s reason to smile."
		"You’re even better than a unicorn, because you’re real."
		"How do you keep being so funny and making everyone laugh?"
		"You have a good head on your shoulders."
		"Has anyone ever told you that you have great posture?"
		"The way you treasure your loved ones is incredible."
		"You’re really something special."
		"You’re a gift to those around you."
		"You have very smooth hair."
		"You deserve a promotion."
		"Good effort!"
		"What a fine sweater!"
		"I appreciate all of your opinions."
		"I like your style."
		"Your T-shirt smells fresh."
		"I love what you've done with the place."
		"You are like a spring flower; beautiful and vivacious."
		"I am utterly disarmed by your wit."
		"I really enjoy the way you pronounce the word 'ruby'."
		"You complete me."
		"Well done!"
		"I like your Facebook status."
		"That looks nice on you."
		"I like those shoes more than mine."
		"Nice motor control!"
		"You have a good taste in websites."
		"Your mouse told me that you have very soft hands."
		"You are full of youth."
		"I like your jacket."
		"I like the way you move."
		"You have a good web-surfing stance."
		"You should be a poster child for poster children."
		"Nice manners!"
		"I appreciate you more than Santa appreciates chimney grease."
		"I wish I was your mirror."
		"I find you to be a fountain of inspiration."
		"You have perfect bone structure."
		"I disagree with anyone who disagrees with you."
		"Way to go!"
		"Have you been working out?"
		"With your creative wit, I'm sure you could come up with better compliments than me."
		"I like your socks."
		"You are so charming."
		"Your cooking reminds me of my mother's."
		"You're tremendous!"
		"You deserve a compliment!"
		"Hello, good looking."
		"Your smile is breath taking."
		"How do you get your hair to look that great?"
		"You are quite strapping."
		"I am grateful to be blessed by your presence."
		"Say, aren't you that famous model from TV?"
		"Take a break; you've earned it."
		"Your life is so interesting!"
		"The sound of your voice sends tingles of joy down my back."
		"I enjoy spending time with you."
		"I would share my dessert with you."
		"You can have the last bite."
		"May I have this dance?"
		"I would love to visit you, but I live on the Internet."
		"I love the way you click."
		"You're invited to my birthday party."
		"All of your ideas are brilliant!"
		"If I freeze, it's not a computer virus.  I was just stunned by your beauty."
		"You're spontaneous, and I love it!"
		"You should try out for everything."
		"You make my data circuits skip a beat."
		"You are the gravy to my mashed potatoes."
		"You get an A+!"
		"I'm jealous of the other websites you visit, because I enjoy seeing you so much!"
		"I would enjoy a roadtrip with you."
		"If I had to choose between you or Mr. Rogers, it would be you."
		"I like you more than the smell of Grandma's home-made apple pies."
		"You would look good in glasses OR contacts."
		"Let's do this again sometime."
		"You could go longer without a shower than most people."
		"I feel the need to impress you."
		"I would trust you to pick out a pet fish for me."
		"I'm glad we met."
		"Do that again!"
		"Will you sign my yearbook?"
		"You're so smart!"
		"We should start a band."
		"You're cooler than ice-skating Fonzi."
		"I made this website for you."
		"I heard you make really good French Toast."
		"You're cooler than Pirates and Ninjas combined."
		"I like your pants."
		"You're pretty groovy, dude."
		"When I grow up, I want to be just like you."
		"I told all my friends about how cool you are."
		"You can play any prank, and get away with it."
		"You have ten of the best fingers I have ever seen!"
		"I can tell that we are gonna be friends."
		"I just want to gobble you up!"
		"You're sweeter than than a bucket of bon-bons!"
		"Treat yourself to another compliment!"
		"You're pretty high on my list of people with whom I would want to be stranded on an island."
		"You're #1 in my book!"
		"Well played."
		"You are well groomed."
		"You could probably lead a rebellion."
		"Is it hot in here or is it just you?"
		"<3"
		"You are more fun than a Japanese steakhouse."
		"Your voice is more soothing than Morgan Freeman's."
		"I like your sleeves. They're real big."
		"You could be drinking whole milk if you wanted to."
		"You're so beautiful, you make me walk into things when I look at you."
		"I support all of your decisions."
		"You are as fun as a hot tub full of chocolate pudding."
		"I usually don't say this on a first date, but will you marry me?"
		"I don't speak much English, but with you all I really need to say is beautiful."
		"Being awesome is hard, but you'll manage."
		"Your skin is radiant."
		"You will still be beautiful when you get older."
		"You could survive a zombie apocalypse."
		"You make me :)"
		"I wish I could move your furniture."
		"I think about you while I'm on the toilet."
		"You're so rad."
		"You're more fun than a barrel of monkeys."
		"You're nicer than a day on the beach."
		"Your glass is the fullest."
		"I find you very relevant."
		"You look so perfect."
		"The only difference between exceptional and amazing is you."
		"Last night I had the hiccups, and the only thing that comforted me to sleep was repeating your name over and over."
		"I like your pearly whites!"
		"Your eyebrows really make your pretty eyes stand out."
		"Shall I compare thee to a summer's day?  Thou art more lovely and more temperate."
		"I love you more than bacon!"
		"You intrigue me."
		"You make me think of beautiful things, like strawberries."
		"I would share my fruit Gushers with you."
		"You're more aesthetically pleasant to look at than that one green color on this website."
		"Even though this goes against everything I know, I think I'm in love with you."
		"You're more fun than bubble wrap."
		"Your smile could illuminate the depths of the ocean."
		"You make babies smile."
		"You make the gloomy days a little less gloomy."
		"You are warmer than a Snuggie."
		"You make me feel like I am on top of the world."
		"Playing video games with you would be fun."
		"Let's never stop hanging out."
		"You're more cuddly than the Downy Bear."
		"I would do your taxes any day."
		"You are a bucket of awesome."
		"You are the star of my daydreams."
		"If you really wanted to, you could probably get a bird to land on your shoulder and hang out with you."
		"My mom always asks me why I can't be more like you."
		"You look great in this or any other light."
		"You listen to the coolest music."
		"You and Chuck Norris are on equal levels."
		"Your body fat percentage is perfectly suited for your height."
		"I am having trouble coming up with a compliment worthy enough for you."
		"If we were playing kickball, I'd pick you first."
		"You're cooler than ice on the rocks."
		"You're the bee's knees."
		"I wish I could choose your handwriting as a font."
		"You definitely know the difference between your and you're."
		"You have good taste."
		"I named all my appliances after you."
		"Your mind is a maze of amazing!"
		"Don't worry about procrastinating on your studies, I know you'll do great!"
		"I like your style!"
		"Hi, I'd like to know why you're so beautiful."
		"If I could count the seconds I think about you, I will die in the process!"
		"If you were in a chemistry class with me, it would be 10x less boring."
		"If you broke your arm, I would carry your books for you."
		"I love the way your eyes crinkle at the corners when you smile."
		"You make me want to be the person I am capable of being."
		"You're a skilled driver."
		"You are the rare catalyst to my volatile compound."
		"You're a tall glass of water!"
		"I'd like to kiss you. Often."
		"You are the wind beneath my wings."
		"Looking at you makes my foot cramps go away instantaneously."
		"I like your face."
		"You are a champ!"
		"You are infatuating."
		"Even my cat likes you."
		"There isn't a thing about you that I don't like."
		"You're so cool, that on a scale of from 1-10, you're elevendyseven."
		"OH, you OWN that ponytail."
		"Your shoes are untied. But for you, it's cool."
		"You have the best laugh ever."
		"We would enjoy a cookout with you!"
		"Your name is fun to say."
		"I love you more than a drunk college student loves tacos."
		"My camera isn't worthy to take your picture."
		"You are the sugar on my rice krispies."
		"Nice belt!"
		"I could hang out with you for a solid year and never get tired of you."
		"You're real happening in a far out way."
		"I bet you could take a punch from Mike Tyson."
		"Your feet are perfect size!"
		"You have very nice teeth."
		"Can you teach me how to be as awesome as you?"
		"Our awkward silences aren't even awkward."
		"Don't worry. You'll do great."
		"I enjoy you more than a good sneeze. A GOOD one."
		"You could invent words and people would use them."
		"You have powerful sweaters."
		"If you were around, I would enjoy doing my taxes."
		"You look like you like to rock."
		"You are better than unicorns and sparkles combined!"
		"You are the watermelon in my fruit salad. Yum!"
		"I dig you."
		"You look better whether the lights are on or off."
		"I am enchanted to meet you."
		"I bet even your farts smell good."
		"I would trust my children with you."
		"You make me forget what I was going to..."
		"Your smile makes me smile."
		"I'd wake up for an 8 a.m. class just so I could sit next to you."
		"You have the moves like Jagger."
		"You're so hot that you denature my proteins."
		"All I want for Christmas is you!"
		"You are the world's greatest hugger."
		"You have a perfectly symmetrical face."
		"If you were in a movie you wouldn't get killed off."
		"Your red ruby lips and wiggly hips make me do flips!"
		"I definitely wouldn't kick you out of bed."
		"They should name an ice cream flavor after you."
		"You're the salsa to my tortilla chips. You spice up my life!"
		"You smell nice."
		"You don't need make-up, make-up needs you."
		"Me without you is like a nerd without braces, a shoe with out laces, asentencewithoutspaces."
		"Just knowing someone as cool as you will read this makes me smile."
		"I would volunteer to take your place in the Hunger Games."
		"If I had a nickel for everytime you did something stupid, I'd be broke!"
		"I'd let you steal the white part of my Oreo."
		"I'd trust you to perform open heart surgery on me... blindfolded!"
		"Nice butt! - According to your toilet seat"
		"Perfume strives to smell like you."
		"I've had the time of my life, and I owe it all to you!"
		"The Force is strong with you."
		"I like the way your nostrils are placed on your nose."
		"I would hold the elevator doors open for you if they were closing."
		"Your every thought and motion contributes to the beauty of the universe."
		"You make me want to frolic in a field."
	)
	printf "$(tput setaf 2)$(shuf -n 1 -e "${COMPLIMENTS[@]}")$(tput sgr0)"
}

alias insult_cow='insult | cowthink'
alias excuse_cow='excuse | cowthink'
alias compliment_cow='compliment | cowthink'



================================================
FILE: sw/assets/executable_iterm2_default.py
================================================
#!/usr/bin/env python3

import iterm2

async def main(connection):
    app = await iterm2.async_get_app(connection)
    all_profiles = await iterm2.PartialProfile.async_query(connection)
    for profile in all_profiles:
        if profile.name == "GruvboxDark":
            await profile.async_make_default()
            # set current profile
            full = await profile.async_get_full_profile()
            await app.current_terminal_window.current_tab.current_session.async_set_profile(full)
            return

iterm2.run_until_complete(main)



================================================
FILE: sw/assets/executable_lessfilter
================================================
#!/usr/bin/env sh
# this is a example of .lessfilter, you can change it
mime=$(file -bL --mime-type "$1")
category=${mime%%/*}
kind=${mime##*/}
if [ -d "$1" ]; then
  eza --git -a -1 --color=always --icons "$1"
elif [ "$category" = image ]; then
  chafa "$1"
  exiftool "$1"
elif [ "$kind" = vnd.openxmlformats-officedocument.spreadsheetml.sheet ] ||
  [ "$kind" = vnd.ms-excel ]; then
  in2csv "$1" | xsv table | bat -ltsv --color=always
elif [ "$category" = text ]; then
  bat --color=always "$1"
else
  lesspipe.sh "$1" | bat --color=always
fi
# lesspipe.sh don't use eza, bat and chafa, it use ls and exiftool. so we create a lessfilter.



================================================
FILE: sw/assets/executable_set_colors.zsh
================================================
#!/usr/bin/env zsh

# Inspired by https://github.com/m-ou-se/config/blob/master/shellrc.

# Set a color in the terminal palette.
# \param 1 The index in the pallete.
# \param 2 is a hexadecimal RGB color code.
function set_color {
	if [ "$TERM" = "linux" ]; then
		[ $1 -lt 16 ] && printf $'\e]P%X%s' "$1" "$2"
	else
		printf $'\e]4;%s;#%s\e\\' "$1" "$2"
	fi
}

local black=353535
local white=efe1bf

# Set default foreground / background colors for terminals that support it.
printf "\e]10;#$white"
printf "\e]11;#$black"

# Set terminal colors.
set_color  0 $black # black
set_color  1 d73925 # red
set_color  2 a8a521 # green
set_color  3 dfa82a # yellow
set_color  4 549699 # blue
set_color  5 bf7897 # magenta
set_color  6 79aa7d # cyan
set_color  7 b7a996 # white
set_color  8 a39586 # bright black
set_color  9 fe6142 # bright red
set_color 10 c4c431 # bright green
set_color 11 fcc73c # bright yellow
set_color 12 94b3a8 # bright blue
set_color 13 dc9aab # bright magenta
set_color 14 9dc98e # bright cyan
set_color 15 fffefe # bright white
# Set colors for 256
set_color 17 076678 # dark blue
set_color 22 79740e # dark green
set_color 52 9d0006 # dark red
set_color 53 8f3f71 # dark magenta



================================================
FILE: sw/assets/executable_utils.zsh
================================================
#!/usr/bin/env zsh

RESET="\e[0m"
BOLD="\e[1m"

BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
WHITE="\e[37m"

BLACK_BRIGHT="\e[90m"
RED_BRIGHT="\e[91m"
GREEN_BRIGHT="\e[92m"
YELLOW_BRIGHT="\e[93m"
BLUE_BRIGHT="\e[94m"
MAGENTA_BRIGHT="\e[95m"
CYAN_BRIGHT="\e[96m"
WHITE_BRIGHT="\e[97m"

function silent_background() {
   set +m && { "$@" 2>&3 & disown; pid=$!; } 3>&2 2>/dev/null && set -m
}

function zsh_stats() {
  echo -e "${CYAN_BRIGHT}  == Zsh history statistics == ${RESET}"
  HISTFILE=~/.zsh_history fc -R
  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " "\033[33m"CMD[a]/count*100 "% " "\033[36m"a"\033[0m";}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n25
}

# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
	local cmd cmd_file code
	cmd_file=$(mktemp)
	if broot --outcmd "$cmd_file" "$@"; then
		cmd=$(<"$cmd_file")
		rm -f "$cmd_file"
		eval "$cmd"
	else
		code=$?
		rm -f "$cmd_file"
		return "$code"
	fi
}

# define a function to display bindings
function tmux_bindings {
  tput sgr0
  echo -e "${BOLD}${RED}tmux bindings:${RESET}"
  local BINDINGS=(
    "${YELLOW} Local Sessions <prefix>:${RESET} C-a or C-b (default tmux binding)"
    "${YELLOW} <prefix> C-Space:${RESET} fuzzy menu"
    "${YELLOW} F12:${RESET} menu"
    "${YELLOW} C-l:${RESET} clear screen and tmux history"
    "${YELLOW} Nested Sessions (e.g. ssh) <prefix>:${RESET} Repeat local <prefix>, i.e. C-a C-a ... or C-b C-b ...${RESET}"
    "${YELLOW} F1:${RESET} suspend local tmux so as to work on remote tmux session. Only default bindings (C-b prefix) are suspended."
    "${YELLOW} <prefix> d:${RESET} detaches current client"
    "${YELLOW} <prefix> C-w or <prefix> w:${RESET} select sessions or windows/panes"
    "${YELLOW} <prefix> C-/:${RESET} fuzzy search scrollback buffer"
    "${YELLOW} <prefix> C-c:${RESET} creates new session"
    "${YELLOW} <prefix> C-s:${RESET} save environment"
    "${YELLOW} <prefix> C-r:${RESET} restore environment"
    "${YELLOW} <prefix> Tab:${RESET} last active window"
    "${YELLOW} <prefix> C-h and <prefix> C-l:${RESET} navigate windows"
    "${YELLOW} <prefix> <number>:${RESET} goto window by number"
    "${YELLOW} <prefix> -:${RESET} split current pane vertically"
    "${YELLOW} <prefix> _:${RESET} split current pane horizontally"
    "${YELLOW} <prefix> Space:${RESET} cycle layouts"
    "${YELLOW} <prefix> <h,j,k,l> or <arrow keys>:${RESET} navigate panes"
    "${YELLOW} <prefix> <H,J,K,L>:${RESET} resize panes"
    "${YELLOW} <prefix> < or <prefix> >:${RESET} swap left or right"
    "${YELLOW} <prefix> +:${RESET} maximizes current pane to a new window"
    "${YELLOW} <prefix> m:${RESET} toggles mouse on/off"
    "${YELLOW} <prefix> P:${RESET} choose the paste-buffer to paste from"
    "${YELLOW} <prefix> F:${RESET} launch Facebook PathPicker"
    "${YELLOW} <prefix> u:${RESET} launch Fzf Url Picker"
    "${YELLOW} <prefix> U:${RESET} launch Urlview"
    "${YELLOW} <prefix> r:${RESET} reload config"
    "${YELLOW} <prefix> /:${RESET} describe key binding for a key"
    "${YELLOW} <prefix> ?:${RESET} show all bindings"
    "${YELLOW} == vi copy-mode == ${RESET}"
    "${YELLOW} <prefix> Enter:${RESET} enter vi-style copy mode"
    "${YELLOW} v:${RESET} begin selection / visual mode"
    "${YELLOW} y:${RESET} copies the selection to the paste-buffer"
    "${YELLOW} C-v:${RESET} toggles between blockwise visual mode and visual mode")
  for i in "${BINDINGS[@]}"; do
    echo "$i"
  done
  tput sgr0
}

# source zinit and it's minimum setup to allow usage in win_split

if [ -z "$ZINIT_TURBO" ]; then
  ZINIT_TURBO=true
fi

source $HOME/.local/share/zinit/zinit.git/zinit.zsh

zinit light marzocchi/zsh-notify
zstyle ':notify:*' error-icon "$HOME/sw/assets/lose.png"
zstyle ':notify:*' error-title "wow such #fail"
zstyle ':notify:*' success-icon "$HOME/sw/assets/win.png"
zstyle ':notify:*' success-title "very #success. wow"
# aggressively notify when commands complete as we use a whitelist
zstyle ':notify:*' command-complete-timeout 1
zstyle ':notify:*' always-check-active-window yes
zstyle ':notify:*' enable-on-ssh yes
zstyle ':notify:*' notifier term-notify
zstyle ':notify:*' blacklist-regex 'vim|nvim|less|more|man|top|htop|btm|ssh'

if [[ $OSTYPE == 'linux'* ]]; then
  # linux
  zstyle ':notify:*' app-name sh
  zstyle ':notify:*' expire-time 5000
  zstyle ':notify:*' error-sound "$HOME/sw/assets/lose.ogg"
  zstyle ':notify:*' success-sound "$HOME/sw/assets/win.ogg"
fi

if [[ $OSTYPE == 'darwin'* ]]; then
  zstyle ':notify:*' error-sound "Sonumi"
  zstyle ':notify:*' success-sound "Breeze"
fi

APP_ATTN_PATTERNS=(
  'autoupdate.zsh'
  'sync_brews.sh'
  'sync_coderabbitai.sh'
  'sync_fluxninja.sh'
  'brew'
  'git commit'
  'make'
  'go build'
  'go test'
  'gotestsum'
  'git_ship'
  'speedtest'
  'pnpm'
)

function term-notify() {
	local notification_type="$1"
	local cmd=$(<&0)
	local attention='none'
	# check whether last command contained any of the APP_ATTN_PATTERNS
	for pattern in "${APP_ATTN_PATTERNS[@]}"; do
		if [[ $cmd =~ $pattern ]]; then
			if [[ $notification_type == 'success' ]]; then
				attention='once'
			else
				attention='start'
			fi
		fi
	done

	# check whether $attention is not 'none'
	if [[ $attention != 'none' ]]; then
		if [[ $OSTYPE == 'darwin'* ]] && [[ "$TERM_PROGRAM" == 'iTerm.app' ]]; then
			if $ITERM2_INTEGRATION_DETECTED; then
				$HOME/.iterm2/it2attention $attention
			fi
		fi
		# ring the bell
		tput bel
		# pass-through
		zsh-notify $1 $2 <<<"$cmd"
	fi
}

# check if $ZINIT_TURBO is true
if $ZINIT_TURBO; then
  zinit ice wait'0' lucid atload'export PATH="$PATH:$(dirname $FORGIT)"'
  zinit light wfxr/forgit
else
  zinit light wfxr/forgit
  export PATH="$PATH:$(dirname $FORGIT)"
fi

if [[ $OSTYPE == 'linux'* ]]; then
  export FORGIT_COPY_CMD='xclip -selection clipboard'
fi

zinit snippet OMZ::lib/history.zsh



================================================
FILE: sw/assets/iterm2_gruvbox.json
================================================
{
  "Profiles": [
    {
      "Right Option Key Sends": 0,
      "Tags": [],
      "Ansi 12 Color": {
        "Green Component": 0.6470588235294118,
        "Blue Component": 0.59607843137254901,
        "Red Component": 0.51372549019607838
      },
      "Use Non-ASCII Font": false,
      "Draw Powerline Glyphs": true,
      "Bold Color": {
        "Red Component": 1,
        "Color Space": "sRGB",
        "Blue Component": 0.99999994039535522,
        "Alpha Component": 1,
        "Green Component": 0.99999994039535522
      },
      "Ansi 0 Color": {
        "Green Component": 0.15686274509803921,
        "Blue Component": 0.15686274509803921,
        "Red Component": 0.15686274509803921
      },
      "Normal Font": "FiraCodeNF-Reg 15",
      "Ansi 1 Color": {
        "Green Component": 0.14117647058823529,
        "Blue Component": 0.11372549019607843,
        "Red Component": 0.80000000000000004
      },
      "Rows": 60,
      "Default Bookmark": "No",
      "Horizontal Spacing": 1,
      "Ansi 3 Color": {
        "Green Component": 0.59999999999999998,
        "Blue Component": 0.12941176470588237,
        "Red Component": 0.84313725490196079
      },
      "Cursor Guide Color": {
        "Red Component": 0.70214027166366577,
        "Color Space": "sRGB",
        "Blue Component": 1,
        "Alpha Component": 0.25,
        "Green Component": 0.92681378126144409
      },
      "Non-ASCII Anti Aliased": true,
      "Use Bright Bold": true,
      "Ansi 10 Color": {
        "Green Component": 0.73333333333333328,
        "Blue Component": 0.14901960784313725,
        "Red Component": 0.72156862745098038
      },
      "Ambiguous Double Width": false,
      "Jobs to Ignore": ["rlogin", "ssh", "slogin", "telnet"],
      "Show Status Bar": false,
      "Ansi 15 Color": {
        "Red Component": 1,
        "Color Space": "sRGB",
        "Blue Component": 0.99999994039535522,
        "Alpha Component": 1,
        "Green Component": 0.99999994039535522
      },
      "Foreground Color": {
        "Green Component": 0.85882352941176465,
        "Blue Component": 0.69803921568627447,
        "Red Component": 0.92156862745098034
      },
      "Working Directory": "~",
      "Blinking Cursor": true,
      "Disable Window Resizing": true,
      "Sync Title": false,
      "Prompt Before Closing 2": false,
      "BM Growl": true,
      "Mouse Reporting": true,
      "Command": "",
      "Description": "Default",
      "Smart Cursor Color": false,
      "Screen": -1,
      "Selection Color": {
        "Red Component": 0.75743561983108521,
        "Color Space": "sRGB",
        "Blue Component": 1,
        "Alpha Component": 1,
        "Green Component": 0.86943882703781128
      },
      "Columns": 125,
      "Idle Code": 0,
      "Ansi 13 Color": {
        "Green Component": 0.52549019607843139,
        "Blue Component": 0.60784313725490191,
        "Red Component": 0.82745098039215681
      },
      "Custom Command": "No",
      "ASCII Anti Aliased": true,
      "Non Ascii Font": "Monaco 12",
      "Vertical Spacing": 1,
      "Use Bold Font": true,
      "Option Key Sends": 2,
      "Selected Text Color": {
        "Red Component": 0,
        "Color Space": "sRGB",
        "Blue Component": 0,
        "Alpha Component": 1,
        "Green Component": 0
      },
      "Background Color": {
        "Green Component": 0.15686274509803921,
        "Blue Component": 0.15686274509803921,
        "Red Component": 0.15686274509803921
      },
      "Character Encoding": 4,
      "Ansi 11 Color": {
        "Green Component": 0.74117647058823533,
        "Blue Component": 0.18431372549019609,
        "Red Component": 0.98039215686274506
      },
      "Use Italic Font": true,
      "Unlimited Scrollback": true,
      "Keyboard Map": {
        "0xf712-0x40000": {
          "Action": 10,
          "Text": "[28;5~"
        },
        "0xf70b-0x40000": {
          "Action": 10,
          "Text": "[19;5~"
        },
        "0xf70d-0x20000": {
          "Action": 10,
          "Text": "[21;2~"
        },
        "0xf706-0x40000": {
          "Action": 10,
          "Text": "[1;5R"
        },
        "0xf708-0x20000": {
          "Action": 10,
          "Text": "[15;2~"
        },
        "0x33-0x40000": {
          "Action": 11,
          "Text": "0x1b"
        },
        "0xf703-0x260000": {
          "Action": 10,
          "Text": "[1;6C"
        },
        "0xf729-0x20000": {
          "Action": 10,
          "Text": "[1;2H"
        },
        "0xf70f-0x40000": {
          "Action": 10,
          "Text": "[24;5~"
        },
        "0xf702-0x260000": {
          "Action": 10,
          "Text": "[1;6D"
        },
        "0xf711-0x40000": {
          "Action": 10,
          "Text": "[26;5~"
        },
        "0x38-0x40000": {
          "Action": 11,
          "Text": "0x7f"
        },
        "0xf70a-0x40000": {
          "Action": 10,
          "Text": "[18;5~"
        },
        "0xf72b-0x40000": {
          "Action": 10,
          "Text": "[1;5F"
        },
        "0xf70c-0x20000": {
          "Action": 10,
          "Text": "[20;2~"
        },
        "0xf705-0x40000": {
          "Action": 10,
          "Text": "[1;5Q"
        },
        "0xf701-0x260000": {
          "Action": 10,
          "Text": "[1;6B"
        },
        "0x32-0x40000": {
          "Action": 11,
          "Text": "0x00"
        },
        "0xf707-0x20000": {
          "Action": 10,
          "Text": "[1;2S"
        },
        "0xf703-0x240000": {
          "Action": 10,
          "Text": "[1;5C"
        },
        "0xf700-0x260000": {
          "Action": 10,
          "Text": "[1;6A"
        },
        "0xf702-0x240000": {
          "Action": 10,
          "Text": "[1;5D"
        },
        "0x37-0x40000": {
          "Action": 11,
          "Text": "0x1f"
        },
        "0xf70e-0x40000": {
          "Action": 10,
          "Text": "[23;5~"
        },
        "0xf710-0x40000": {
          "Action": 10,
          "Text": "[25;5~"
        },
        "0x3-0x200000": {
          "Action": 11,
          "Text": "0xd"
        },
        "0xf709-0x40000": {
          "Action": 10,
          "Text": "[17;5~"
        },
        "0xf701-0x240000": {
          "Action": 10,
          "Text": "[1;5B"
        },
        "0xf70b-0x20000": {
          "Action": 10,
          "Text": "[19;2~"
        },
        "0xf703-0x220000": {
          "Action": 10,
          "Text": "[1;2C"
        },
        "0xf704-0x40000": {
          "Action": 10,
          "Text": "[1;5P"
        },
        "0xf739-0x0": {
          "Action": 13,
          "Text": ""
        },
        "0xf706-0x20000": {
          "Action": 10,
          "Text": "[1;2R"
        },
        "0xf700-0x240000": {
          "Action": 10,
          "Text": "[1;5A"
        },
        "0xf702-0x220000": {
          "Action": 10,
          "Text": "[1;2D"
        },
        "0x36-0x40000": {
          "Action": 11,
          "Text": "0x1e"
        },
        "0xf70d-0x40000": {
          "Action": 10,
          "Text": "[21;5~"
        },
        "0xf70f-0x20000": {
          "Action": 10,
          "Text": "[24;2~"
        },
        "0xf701-0x220000": {
          "Action": 10,
          "Text": "[1;2B"
        },
        "0xf708-0x40000": {
          "Action": 10,
          "Text": "[15;5~"
        },
        "0xf70a-0x20000": {
          "Action": 10,
          "Text": "[18;2~"
        },
        "0xf729-0x40000": {
          "Action": 10,
          "Text": "[1;5H"
        },
        "0xf72b-0x20000": {
          "Action": 10,
          "Text": "[1;2F"
        },
        "0xf700-0x220000": {
          "Action": 10,
          "Text": "[1;2A"
        },
        "0x30-0x200000": {
          "Action": 12,
          "Text": "0"
        },
        "0xf705-0x20000": {
          "Action": 10,
          "Text": "[1;2Q"
        },
        "0x31-0x200000": {
          "Action": 12,
          "Text": "1"
        },
        "0x33-0x200000": {
          "Action": 12,
          "Text": "3"
        },
        "0x35-0x40000": {
          "Action": 11,
          "Text": "0x1d"
        },
        "0x34-0x200000": {
          "Action": 12,
          "Text": "4"
        },
        "0x32-0x200000": {
          "Action": 12,
          "Text": "2"
        },
        "0x35-0x200000": {
          "Action": 12,
          "Text": "5"
        },
        "0x36-0x200000": {
          "Action": 12,
          "Text": "6"
        },
        "0xf70c-0x40000": {
          "Action": 10,
          "Text": "[20;5~"
        },
        "0x37-0x200000": {
          "Action": 12,
          "Text": "7"
        },
        "0x2d-0x40000": {
          "Action": 11,
          "Text": "0x1f"
        },
        "0x38-0x200000": {
          "Action": 12,
          "Text": "8"
        },
        "0x2a-0x200000": {
          "Action": 12,
          "Text": "*"
        },
        "0x39-0x200000": {
          "Action": 12,
          "Text": "9"
        },
        "0x2b-0x200000": {
          "Action": 12,
          "Text": "+"
        },
        "0xf70e-0x20000": {
          "Action": 10,
          "Text": "[23;2~"
        },
        "0xf707-0x40000": {
          "Action": 10,
          "Text": "[1;5S"
        },
        "0x2e-0x200000": {
          "Action": 12,
          "Text": "."
        },
        "0x2d-0x200000": {
          "Action": 12,
          "Text": "-"
        },
        "0xf709-0x20000": {
          "Action": 10,
          "Text": "[17;2~"
        },
        "0x2f-0x200000": {
          "Action": 12,
          "Text": "/"
        },
        "0xf704-0x20000": {
          "Action": 10,
          "Text": "[1;2P"
        },
        "0x34-0x40000": {
          "Action": 11,
          "Text": "0x1c"
        }
      },
      "Window Type": 0,
      "Blink Allowed": true,
      "Background Image Location": "",
      "Blur": false,
      "Badge Color": {
        "Red Component": 1,
        "Color Space": "sRGB",
        "Blue Component": 0,
        "Alpha Component": 0.5,
        "Green Component": 0.14910027384757996
      },
      "Scrollback Lines": 0,
      "Send Code When Idle": false,
      "Close Sessions On End": true,
      "Terminal Type": "xterm-256color",
      "Visual Bell": true,
      "Flashing Bell": false,
      "Status Bar Layout": {
        "components": [],
        "advanced configuration": {
          "remove empty components": false,
          "font": ".AppleSystemUIFont 12",
          "algorithm": 0,
          "auto-rainbow style": 2
        }
      },
      "Show Timestamps": 0,
      "Silence Bell": false,
      "Ansi 14 Color": {
        "Green Component": 0.75294117647058822,
        "Blue Component": 0.48627450980392156,
        "Red Component": 0.55686274509803924
      },
      "Unicode Version": 9,
      "ASCII Ligatures": false,
      "Name": "GruvboxDark",
      "Cursor Text Color": {
        "Red Component": 1,
        "Color Space": "sRGB",
        "Blue Component": 0.99999994039535522,
        "Alpha Component": 1,
        "Green Component": 0.99999994039535522
      },
      "Shortcut": "",
      "Cursor Color": {
        "Red Component": 0.7807578444480896,
        "Color Space": "sRGB",
        "Blue Component": 0.7807578444480896,
        "Alpha Component": 1,
        "Green Component": 0.78075778484344482
      },
      "Transparency": 0.050000000000000017,
      "Guid": "FEEF9982-D999-41A3-BFE2-967FA999B348",
      "Custom Directory": "No",
      "Ansi 2 Color": {
        "Green Component": 0.59215686274509804,
        "Blue Component": 0.10196078431372549,
        "Red Component": 0.59607843137254901
      },
      "Ansi 4 Color": {
        "Green Component": 0.52156862745098043,
        "Blue Component": 0.53333333333333333,
        "Red Component": 0.27058823529411763
      },
      "Ansi 5 Color": {
        "Green Component": 0.3843137254901961,
        "Blue Component": 0.52549019607843139,
        "Red Component": 0.69411764705882351
      },
      "Ansi 6 Color": {
        "Green Component": 0.61568627450980395,
        "Blue Component": 0.41568627450980394,
        "Red Component": 0.40784313725490196
      },
      "Ansi 7 Color": {
        "Green Component": 0.59999999999999998,
        "Blue Component": 0.51764705882352946,
        "Red Component": 0.6588235294117647
      },
      "Ansi 8 Color": {
        "Green Component": 0.51372549019607838,
        "Blue Component": 0.45490196078431372,
        "Red Component": 0.5725490196078431
      },
      "Ansi 9 Color": {
        "Green Component": 0.28627450980392155,
        "Blue Component": 0.20392156862745098,
        "Red Component": 0.98431372549019602
      },
      "Link Color": {
        "Red Component": 0,
        "Color Space": "sRGB",
        "Blue Component": 0.73422712087631226,
        "Alpha Component": 1,
        "Green Component": 0.35915297269821167
      },
      "Allow Title Reporting": false
    }
  ]
}



================================================
FILE: sw/assets/lose.ogg
================================================
[Binary file]


================================================
FILE: sw/assets/win.ogg
================================================
[Binary file]


================================================
FILE: sw/assets/zsh_cnf.zsh
================================================
command_not_found_handler() {
	local CMD="$@"
	if $INSULTS_ENABLED; then
		insult
		echo ""
	fi
	# run thefuck
	TF_SHELL_ALIASES=$(alias)
	TF_CMD=$(
		export TF_SHELL_ALIASES
		export TF_SHELL=zsh
		export TF_ALIAS=fuck
		export TF_HISTORY="$CMD"
		export PYTHONIOENCODING=utf-8
		thefuck THEFUCK_ARGUMENT_PLACEHOLDER
	) && eval $TF_CMD
	test -n "$TF_CMD" && print -s $TF_CMD
	# Return the exit code normally returned on invalid command
	return 127
}



================================================
FILE: .github/workflows/openai-review.yml
================================================
name: OpenAI Reviewer

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: fluxninja/openai-pr-reviewer@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_comment_lgtm: false



