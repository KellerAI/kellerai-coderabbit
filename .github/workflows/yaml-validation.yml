name: YAML Validation

on:
  push:
    paths:
      - '**.yaml'
      - '**.yml'
      - '.github/workflows/yaml-validation.yml'
  pull_request:
    paths:
      - '**.yaml'
      - '**.yml'
      - '.github/workflows/yaml-validation.yml'

jobs:
  validate-yaml:
    name: Validate YAML Syntax
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: Create yamllint config
        run: |
          cat > .yamllint.yml << 'EOF'
          extends: default
          rules:
            line-length:
              max: 120
              level: warning
            indentation:
              spaces: 2
              indent-sequences: true
            comments:
              min-spaces-from-content: 2
            comments-indentation: {}
            document-start: disable
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no', 'on', 'off']
          EOF

      - name: Validate YAML syntax
        run: |
          echo "Validating YAML files..."
          yamllint -c .yamllint.yml .

      - name: Validate .coderabbit.yaml structure
        run: |
          python - << 'EOF'
          import yaml
          import sys
          from pathlib import Path

          def validate_coderabbit_config(file_path):
              """Validate CodeRabbit configuration structure"""
              print(f"Validating {file_path}...")

              try:
                  with open(file_path, 'r') as f:
                      config = yaml.safe_load(f)

                  # Required top-level keys
                  required_keys = ['reviews', 'comments', 'languages']

                  for key in required_keys:
                      if key not in config:
                          print(f"❌ ERROR: Missing required key '{key}'")
                          return False

                  # Validate reviews section
                  if 'reviews' in config:
                      reviews = config['reviews']
                      if 'profile' in reviews and reviews['profile'] not in ['chill', 'assertive', 'custom']:
                          print(f"❌ ERROR: Invalid review profile '{reviews['profile']}'")
                          return False

                  # Validate languages section
                  if 'languages' in config:
                      supported_languages = ['python', 'typescript', 'javascript', 'java', 'go', 'rust', 'ruby']
                      languages = config['languages']
                      for lang in languages.keys():
                          if lang not in supported_languages:
                              print(f"⚠️  WARNING: Unsupported language '{lang}'")

                  print(f"✅ {file_path} is valid")
                  return True

              except yaml.YAMLError as e:
                  print(f"❌ YAML syntax error in {file_path}: {e}")
                  return False
              except Exception as e:
                  print(f"❌ Validation error in {file_path}: {e}")
                  return False

          # Validate main configuration
          main_config = Path('.coderabbit.yaml')
          if main_config.exists():
              if not validate_coderabbit_config(main_config):
                  sys.exit(1)

          # Validate template configurations
          templates_dir = Path('templates')
          if templates_dir.exists():
              for template_config in templates_dir.rglob('.coderabbit.yaml'):
                  if not validate_coderabbit_config(template_config):
                      sys.exit(1)

          print("\n✅ All CodeRabbit configurations are valid")
          EOF

      - name: Check for required files
        run: |
          echo "Checking for required configuration files..."

          required_files=(
            ".coderabbit.yaml"
            "README.md"
          )

          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "❌ Missing required files:"
            printf '  - %s\n' "${missing_files[@]}"
            exit 1
          fi

          echo "✅ All required files present"

      - name: Summary - Success
        if: success()
        run: |
          echo "## YAML Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All YAML files validated successfully" >> $GITHUB_STEP_SUMMARY
      
      - name: Summary - Failure
        if: failure()
        run: |
          echo "## YAML Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ YAML validation failed - please fix errors above" >> $GITHUB_STEP_SUMMARY
